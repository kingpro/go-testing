// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: im_message.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataType int32

const (
	DataType_IMAuthMessageType      DataType = 0
	DataType_IMAuthMessageAckType   DataType = 1
	DataType_IMChatMessageType      DataType = 2
	DataType_IMChatMessageACKType   DataType = 3
	DataType_IMChatMessageToACKType DataType = 4
	DataType_IMPingMessageType      DataType = 5
	DataType_IMPongMessageType      DataType = 6
	DataType_IMOffLineMessageType   DataType = 7
	DataType_IMServerMessageType    DataType = 8
)

var DataType_name = map[int32]string{
	0: "IMAuthMessageType",
	1: "IMAuthMessageAckType",
	2: "IMChatMessageType",
	3: "IMChatMessageACKType",
	4: "IMChatMessageToACKType",
	5: "IMPingMessageType",
	6: "IMPongMessageType",
	7: "IMOffLineMessageType",
	8: "IMServerMessageType",
}

var DataType_value = map[string]int32{
	"IMAuthMessageType":      0,
	"IMAuthMessageAckType":   1,
	"IMChatMessageType":      2,
	"IMChatMessageACKType":   3,
	"IMChatMessageToACKType": 4,
	"IMPingMessageType":      5,
	"IMPongMessageType":      6,
	"IMOffLineMessageType":   7,
	"IMServerMessageType":    8,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{0}
}

//用户聊天类型
type ChatType int32

const (
	ChatType_SingleChat ChatType = 0
	ChatType_GroupChat  ChatType = 1
	ChatType_OpenChat   ChatType = 2
)

var ChatType_name = map[int32]string{
	0: "SingleChat",
	1: "GroupChat",
	2: "OpenChat",
}

var ChatType_value = map[string]int32{
	"SingleChat": 0,
	"GroupChat":  1,
	"OpenChat":   2,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}

func (ChatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{1}
}

type MessageType int32

const (
	//基础聊天类消息
	MessageType_TextMessageType  MessageType = 0
	MessageType_ImageMessageType MessageType = 1
	MessageType_VideoMessageType MessageType = 2
	MessageType_GEOMessageType   MessageType = 3
	MessageType_VoiceMessageType MessageType = 4
	MessageType_FileMessageType  MessageType = 5
	MessageType_CardMessageType  MessageType = 6
	MessageType_SharkUrlType     MessageType = 7
	MessageType_BackMessageType  MessageType = 8
	MessageType_DelMessageType   MessageType = 9
	MessageType_AtMessageType    MessageType = 10
)

var MessageType_name = map[int32]string{
	0:  "TextMessageType",
	1:  "ImageMessageType",
	2:  "VideoMessageType",
	3:  "GEOMessageType",
	4:  "VoiceMessageType",
	5:  "FileMessageType",
	6:  "CardMessageType",
	7:  "SharkUrlType",
	8:  "BackMessageType",
	9:  "DelMessageType",
	10: "AtMessageType",
}

var MessageType_value = map[string]int32{
	"TextMessageType":  0,
	"ImageMessageType": 1,
	"VideoMessageType": 2,
	"GEOMessageType":   3,
	"VoiceMessageType": 4,
	"FileMessageType":  5,
	"CardMessageType":  6,
	"SharkUrlType":     7,
	"BackMessageType":  8,
	"DelMessageType":   9,
	"AtMessageType":    10,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{2}
}

type ServerMsgType int32

const (
	//系统通知类消息
	ServerMsgType_NoticeMessageType          ServerMsgType = 0
	ServerMsgType_RegisterWelcomeMessageType ServerMsgType = 1
	ServerMsgType_SynchroMessageType         ServerMsgType = 2
	ServerMsgType_ChatMessageType            ServerMsgType = 3
	//好友通知类消息
	ServerMsgType_FriendInviteMessageType  ServerMsgType = 101
	ServerMsgType_FriendConfirmMessageType ServerMsgType = 102
	ServerMsgType_FriendDelMessageType     ServerMsgType = 103
	ServerMsgType_FriendSayMessageType     ServerMsgType = 104
	//群组通知类消息
	ServerMsgType_CreateGroupMessageType        ServerMsgType = 200
	ServerMsgType_JoinReqGroupMessageType       ServerMsgType = 201
	ServerMsgType_JoinConfirmGroupMessageType   ServerMsgType = 202
	ServerMsgType_OutGroupMessageType           ServerMsgType = 203
	ServerMsgType_KickGroupMessageType          ServerMsgType = 204
	ServerMsgType_DelGroupMessageType           ServerMsgType = 205
	ServerMsgType_TransferOwnerMessageType      ServerMsgType = 206
	ServerMsgType_EstoppelGroupMessageType      ServerMsgType = 207
	ServerMsgType_NoticeGroupMessageType        ServerMsgType = 208
	ServerMsgType_LockAndNoGroupMessageType     ServerMsgType = 209
	ServerMsgType_NameGroupMessageType          ServerMsgType = 210
	ServerMsgType_AdminGroupMessageType         ServerMsgType = 211
	ServerMsgType_NoChatGroupMessageType        ServerMsgType = 212
	ServerMsgType_JoinVerifyGroupMessageType    ServerMsgType = 213
	ServerMsgType_InviteJoinRepGroupMessageType ServerMsgType = 214
	ServerMsgType_InviteConfirmGroupMessageType ServerMsgType = 215
	ServerMsgType_MemberNoGroupMessageType      ServerMsgType = 216
	ServerMsgType_NullGroupMessageType          ServerMsgType = 217
	ServerMsgType_GroupNoChatMessageType        ServerMsgType = 218
	//系统单人命令消息
	ServerMsgType_UserForcedOfflineType ServerMsgType = 500
)

var ServerMsgType_name = map[int32]string{
	0:   "NoticeMessageType",
	1:   "RegisterWelcomeMessageType",
	2:   "SynchroMessageType",
	3:   "ChatMessageType",
	101: "FriendInviteMessageType",
	102: "FriendConfirmMessageType",
	103: "FriendDelMessageType",
	104: "FriendSayMessageType",
	200: "CreateGroupMessageType",
	201: "JoinReqGroupMessageType",
	202: "JoinConfirmGroupMessageType",
	203: "OutGroupMessageType",
	204: "KickGroupMessageType",
	205: "DelGroupMessageType",
	206: "TransferOwnerMessageType",
	207: "EstoppelGroupMessageType",
	208: "NoticeGroupMessageType",
	209: "LockAndNoGroupMessageType",
	210: "NameGroupMessageType",
	211: "AdminGroupMessageType",
	212: "NoChatGroupMessageType",
	213: "JoinVerifyGroupMessageType",
	214: "InviteJoinRepGroupMessageType",
	215: "InviteConfirmGroupMessageType",
	216: "MemberNoGroupMessageType",
	217: "NullGroupMessageType",
	218: "GroupNoChatMessageType",
	500: "UserForcedOfflineType",
}

var ServerMsgType_value = map[string]int32{
	"NoticeMessageType":             0,
	"RegisterWelcomeMessageType":    1,
	"SynchroMessageType":            2,
	"ChatMessageType":               3,
	"FriendInviteMessageType":       101,
	"FriendConfirmMessageType":      102,
	"FriendDelMessageType":          103,
	"FriendSayMessageType":          104,
	"CreateGroupMessageType":        200,
	"JoinReqGroupMessageType":       201,
	"JoinConfirmGroupMessageType":   202,
	"OutGroupMessageType":           203,
	"KickGroupMessageType":          204,
	"DelGroupMessageType":           205,
	"TransferOwnerMessageType":      206,
	"EstoppelGroupMessageType":      207,
	"NoticeGroupMessageType":        208,
	"LockAndNoGroupMessageType":     209,
	"NameGroupMessageType":          210,
	"AdminGroupMessageType":         211,
	"NoChatGroupMessageType":        212,
	"JoinVerifyGroupMessageType":    213,
	"InviteJoinRepGroupMessageType": 214,
	"InviteConfirmGroupMessageType": 215,
	"MemberNoGroupMessageType":      216,
	"NullGroupMessageType":          217,
	"GroupNoChatMessageType":        218,
	"UserForcedOfflineType":         500,
}

func (x ServerMsgType) String() string {
	return proto.EnumName(ServerMsgType_name, int32(x))
}

func (ServerMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{3}
}

//同步类型
type SynchroType int32

const (
	SynchroType_UserHeader         SynchroType = 0
	SynchroType_UserNick           SynchroType = 1
	SynchroType_UserUuid           SynchroType = 2
	SynchroType_UserSex            SynchroType = 3
	SynchroType_UserSign           SynchroType = 4
	SynchroType_NewMsgNoticeStatus SynchroType = 5
	SynchroType_VoiceStatus        SynchroType = 6
	SynchroType_ShockStatus        SynchroType = 7
	SynchroType_SessionTop         SynchroType = 8
	SynchroType_SessionUnTop       SynchroType = 9
	SynchroType_SessionDel         SynchroType = 10
	SynchroType_SessionRead        SynchroType = 11
	SynchroType_SessionUnread      SynchroType = 12
	SynchroType_FriendRemarks      SynchroType = 13
	SynchroType_FriendBlacklist    SynchroType = 14
	SynchroType_GroupMemberNick    SynchroType = 15
)

var SynchroType_name = map[int32]string{
	0:  "UserHeader",
	1:  "UserNick",
	2:  "UserUuid",
	3:  "UserSex",
	4:  "UserSign",
	5:  "NewMsgNoticeStatus",
	6:  "VoiceStatus",
	7:  "ShockStatus",
	8:  "SessionTop",
	9:  "SessionUnTop",
	10: "SessionDel",
	11: "SessionRead",
	12: "SessionUnread",
	13: "FriendRemarks",
	14: "FriendBlacklist",
	15: "GroupMemberNick",
}

var SynchroType_value = map[string]int32{
	"UserHeader":         0,
	"UserNick":           1,
	"UserUuid":           2,
	"UserSex":            3,
	"UserSign":           4,
	"NewMsgNoticeStatus": 5,
	"VoiceStatus":        6,
	"ShockStatus":        7,
	"SessionTop":         8,
	"SessionUnTop":       9,
	"SessionDel":         10,
	"SessionRead":        11,
	"SessionUnread":      12,
	"FriendRemarks":      13,
	"FriendBlacklist":    14,
	"GroupMemberNick":    15,
}

func (x SynchroType) String() string {
	return proto.EnumName(SynchroType_name, int32(x))
}

func (SynchroType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{4}
}

//性别类型
type SexType int32

const (
	SexType_Secrecy SexType = 0
	SexType_Man     SexType = 1
	SexType_Women   SexType = 2
)

var SexType_name = map[int32]string{
	0: "Secrecy",
	1: "Man",
	2: "Women",
}

var SexType_value = map[string]int32{
	"Secrecy": 0,
	"Man":     1,
	"Women":   2,
}

func (x SexType) String() string {
	return proto.EnumName(SexType_name, int32(x))
}

func (SexType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{5}
}

type IMMessage struct {
	DataType DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=pb.DataType" json:"data_type,omitempty"`
	//oneof表示多个当中有一个被赋值
	//
	// Types that are valid to be assigned to DataBody:
	//	*IMMessage_ChatMessageBody
	//	*IMMessage_ChatMessageAckBody
	//	*IMMessage_ChatMessageToACKBody
	//	*IMMessage_AuthMessageBody
	//	*IMMessage_AuthMessageAckBody
	//	*IMMessage_PingMessageBody
	//	*IMMessage_PongMessageBody
	//	*IMMessage_OffLineMessageBody
	//	*IMMessage_ServerMessageBody
	DataBody             isIMMessage_DataBody `protobuf_oneof:"dataBody"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IMMessage) Reset()         { *m = IMMessage{} }
func (m *IMMessage) String() string { return proto.CompactTextString(m) }
func (*IMMessage) ProtoMessage()    {}
func (*IMMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{0}
}
func (m *IMMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMMessage.Merge(m, src)
}
func (m *IMMessage) XXX_Size() int {
	return m.Size()
}
func (m *IMMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IMMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IMMessage proto.InternalMessageInfo

type isIMMessage_DataBody interface {
	isIMMessage_DataBody()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IMMessage_ChatMessageBody struct {
	ChatMessageBody *IMChatMessage `protobuf:"bytes,2,opt,name=chatMessageBody,proto3,oneof" json:"chatMessageBody,omitempty"`
}
type IMMessage_ChatMessageAckBody struct {
	ChatMessageAckBody *IMChatMessageACK `protobuf:"bytes,3,opt,name=chatMessageAckBody,proto3,oneof" json:"chatMessageAckBody,omitempty"`
}
type IMMessage_ChatMessageToACKBody struct {
	ChatMessageToACKBody *IMChatMessageToACK `protobuf:"bytes,4,opt,name=chatMessageToACKBody,proto3,oneof" json:"chatMessageToACKBody,omitempty"`
}
type IMMessage_AuthMessageBody struct {
	AuthMessageBody *IMAuthMessage `protobuf:"bytes,5,opt,name=authMessageBody,proto3,oneof" json:"authMessageBody,omitempty"`
}
type IMMessage_AuthMessageAckBody struct {
	AuthMessageAckBody *IMAuthMessageACK `protobuf:"bytes,6,opt,name=authMessageAckBody,proto3,oneof" json:"authMessageAckBody,omitempty"`
}
type IMMessage_PingMessageBody struct {
	PingMessageBody *IMPingMessage `protobuf:"bytes,7,opt,name=pingMessageBody,proto3,oneof" json:"pingMessageBody,omitempty"`
}
type IMMessage_PongMessageBody struct {
	PongMessageBody *IMPongMessage `protobuf:"bytes,8,opt,name=pongMessageBody,proto3,oneof" json:"pongMessageBody,omitempty"`
}
type IMMessage_OffLineMessageBody struct {
	OffLineMessageBody *IMOffLineMessage `protobuf:"bytes,9,opt,name=offLineMessageBody,proto3,oneof" json:"offLineMessageBody,omitempty"`
}
type IMMessage_ServerMessageBody struct {
	ServerMessageBody *IMServerMessage `protobuf:"bytes,10,opt,name=serverMessageBody,proto3,oneof" json:"serverMessageBody,omitempty"`
}

func (*IMMessage_ChatMessageBody) isIMMessage_DataBody()      {}
func (*IMMessage_ChatMessageAckBody) isIMMessage_DataBody()   {}
func (*IMMessage_ChatMessageToACKBody) isIMMessage_DataBody() {}
func (*IMMessage_AuthMessageBody) isIMMessage_DataBody()      {}
func (*IMMessage_AuthMessageAckBody) isIMMessage_DataBody()   {}
func (*IMMessage_PingMessageBody) isIMMessage_DataBody()      {}
func (*IMMessage_PongMessageBody) isIMMessage_DataBody()      {}
func (*IMMessage_OffLineMessageBody) isIMMessage_DataBody()   {}
func (*IMMessage_ServerMessageBody) isIMMessage_DataBody()    {}

func (m *IMMessage) GetDataBody() isIMMessage_DataBody {
	if m != nil {
		return m.DataBody
	}
	return nil
}

func (m *IMMessage) GetDataType() DataType {
	if m != nil {
		return m.DataType
	}
	return DataType_IMAuthMessageType
}

func (m *IMMessage) GetChatMessageBody() *IMChatMessage {
	if x, ok := m.GetDataBody().(*IMMessage_ChatMessageBody); ok {
		return x.ChatMessageBody
	}
	return nil
}

func (m *IMMessage) GetChatMessageAckBody() *IMChatMessageACK {
	if x, ok := m.GetDataBody().(*IMMessage_ChatMessageAckBody); ok {
		return x.ChatMessageAckBody
	}
	return nil
}

func (m *IMMessage) GetChatMessageToACKBody() *IMChatMessageToACK {
	if x, ok := m.GetDataBody().(*IMMessage_ChatMessageToACKBody); ok {
		return x.ChatMessageToACKBody
	}
	return nil
}

func (m *IMMessage) GetAuthMessageBody() *IMAuthMessage {
	if x, ok := m.GetDataBody().(*IMMessage_AuthMessageBody); ok {
		return x.AuthMessageBody
	}
	return nil
}

func (m *IMMessage) GetAuthMessageAckBody() *IMAuthMessageACK {
	if x, ok := m.GetDataBody().(*IMMessage_AuthMessageAckBody); ok {
		return x.AuthMessageAckBody
	}
	return nil
}

func (m *IMMessage) GetPingMessageBody() *IMPingMessage {
	if x, ok := m.GetDataBody().(*IMMessage_PingMessageBody); ok {
		return x.PingMessageBody
	}
	return nil
}

func (m *IMMessage) GetPongMessageBody() *IMPongMessage {
	if x, ok := m.GetDataBody().(*IMMessage_PongMessageBody); ok {
		return x.PongMessageBody
	}
	return nil
}

func (m *IMMessage) GetOffLineMessageBody() *IMOffLineMessage {
	if x, ok := m.GetDataBody().(*IMMessage_OffLineMessageBody); ok {
		return x.OffLineMessageBody
	}
	return nil
}

func (m *IMMessage) GetServerMessageBody() *IMServerMessage {
	if x, ok := m.GetDataBody().(*IMMessage_ServerMessageBody); ok {
		return x.ServerMessageBody
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IMMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IMMessage_ChatMessageBody)(nil),
		(*IMMessage_ChatMessageAckBody)(nil),
		(*IMMessage_ChatMessageToACKBody)(nil),
		(*IMMessage_AuthMessageBody)(nil),
		(*IMMessage_AuthMessageAckBody)(nil),
		(*IMMessage_PingMessageBody)(nil),
		(*IMMessage_PongMessageBody)(nil),
		(*IMMessage_OffLineMessageBody)(nil),
		(*IMMessage_ServerMessageBody)(nil),
	}
}

//下线消息
type IMOffLineMessage struct {
	MsgId                string   `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Source               string   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IMOffLineMessage) Reset()         { *m = IMOffLineMessage{} }
func (m *IMOffLineMessage) String() string { return proto.CompactTextString(m) }
func (*IMOffLineMessage) ProtoMessage()    {}
func (*IMOffLineMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{1}
}
func (m *IMOffLineMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMOffLineMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMOffLineMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMOffLineMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMOffLineMessage.Merge(m, src)
}
func (m *IMOffLineMessage) XXX_Size() int {
	return m.Size()
}
func (m *IMOffLineMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IMOffLineMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IMOffLineMessage proto.InternalMessageInfo

func (m *IMOffLineMessage) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *IMOffLineMessage) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *IMOffLineMessage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

//Ping消息
type IMPingMessage struct {
	MsgId                string   `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IMPingMessage) Reset()         { *m = IMPingMessage{} }
func (m *IMPingMessage) String() string { return proto.CompactTextString(m) }
func (*IMPingMessage) ProtoMessage()    {}
func (*IMPingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{2}
}
func (m *IMPingMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMPingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMPingMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMPingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMPingMessage.Merge(m, src)
}
func (m *IMPingMessage) XXX_Size() int {
	return m.Size()
}
func (m *IMPingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IMPingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IMPingMessage proto.InternalMessageInfo

func (m *IMPingMessage) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *IMPingMessage) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

//Pong消息
type IMPongMessage struct {
	MsgId                string   `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IMPongMessage) Reset()         { *m = IMPongMessage{} }
func (m *IMPongMessage) String() string { return proto.CompactTextString(m) }
func (*IMPongMessage) ProtoMessage()    {}
func (*IMPongMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{3}
}
func (m *IMPongMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMPongMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMPongMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMPongMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMPongMessage.Merge(m, src)
}
func (m *IMPongMessage) XXX_Size() int {
	return m.Size()
}
func (m *IMPongMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IMPongMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IMPongMessage proto.InternalMessageInfo

func (m *IMPongMessage) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *IMPongMessage) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

//授权消息
type IMAuthMessage struct {
	MsgId                string   `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Source               string   `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IMAuthMessage) Reset()         { *m = IMAuthMessage{} }
func (m *IMAuthMessage) String() string { return proto.CompactTextString(m) }
func (*IMAuthMessage) ProtoMessage()    {}
func (*IMAuthMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{4}
}
func (m *IMAuthMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMAuthMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMAuthMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMAuthMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMAuthMessage.Merge(m, src)
}
func (m *IMAuthMessage) XXX_Size() int {
	return m.Size()
}
func (m *IMAuthMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IMAuthMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IMAuthMessage proto.InternalMessageInfo

func (m *IMAuthMessage) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *IMAuthMessage) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *IMAuthMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *IMAuthMessage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

//授权消息回执
type IMAuthMessageACK struct {
	MsgId                string   `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code                 int64    `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	AckMsgId             string   `protobuf:"bytes,5,opt,name=ack_msg_id,json=ackMsgId,proto3" json:"ack_msg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IMAuthMessageACK) Reset()         { *m = IMAuthMessageACK{} }
func (m *IMAuthMessageACK) String() string { return proto.CompactTextString(m) }
func (*IMAuthMessageACK) ProtoMessage()    {}
func (*IMAuthMessageACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{5}
}
func (m *IMAuthMessageACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMAuthMessageACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMAuthMessageACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMAuthMessageACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMAuthMessageACK.Merge(m, src)
}
func (m *IMAuthMessageACK) XXX_Size() int {
	return m.Size()
}
func (m *IMAuthMessageACK) XXX_DiscardUnknown() {
	xxx_messageInfo_IMAuthMessageACK.DiscardUnknown(m)
}

var xxx_messageInfo_IMAuthMessageACK proto.InternalMessageInfo

func (m *IMAuthMessageACK) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *IMAuthMessageACK) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *IMAuthMessageACK) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *IMAuthMessageACK) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *IMAuthMessageACK) GetAckMsgId() string {
	if m != nil {
		return m.AckMsgId
	}
	return ""
}

//服务器ACK消息
type IMChatMessageACK struct {
	MsgId                string   `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	AckMsgId             string   `protobuf:"bytes,2,opt,name=ack_msg_id,json=ackMsgId,proto3" json:"ack_msg_id,omitempty"`
	SMsgId               string   `protobuf:"bytes,3,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"`
	CType                ChatType `protobuf:"varint,4,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IMChatMessageACK) Reset()         { *m = IMChatMessageACK{} }
func (m *IMChatMessageACK) String() string { return proto.CompactTextString(m) }
func (*IMChatMessageACK) ProtoMessage()    {}
func (*IMChatMessageACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{6}
}
func (m *IMChatMessageACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMChatMessageACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMChatMessageACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMChatMessageACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMChatMessageACK.Merge(m, src)
}
func (m *IMChatMessageACK) XXX_Size() int {
	return m.Size()
}
func (m *IMChatMessageACK) XXX_DiscardUnknown() {
	xxx_messageInfo_IMChatMessageACK.DiscardUnknown(m)
}

var xxx_messageInfo_IMChatMessageACK proto.InternalMessageInfo

func (m *IMChatMessageACK) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *IMChatMessageACK) GetAckMsgId() string {
	if m != nil {
		return m.AckMsgId
	}
	return ""
}

func (m *IMChatMessageACK) GetSMsgId() string {
	if m != nil {
		return m.SMsgId
	}
	return ""
}

func (m *IMChatMessageACK) GetCType() ChatType {
	if m != nil {
		return m.CType
	}
	return ChatType_SingleChat
}

//聊天消息
type IMChatMessage struct {
	MsgId string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	From  string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Nick  string `protobuf:"bytes,3,opt,name=nick,proto3" json:"nick,omitempty"`
	To    string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	//消息体(前端自定义,除特殊消息外服务端不进行处理)
	//
	// Types that are valid to be assigned to Body:
	//	*IMChatMessage_TextMessage
	//	*IMChatMessage_ImageMessage
	//	*IMChatMessage_VideoMessage
	//	*IMChatMessage_GeoMessage
	//	*IMChatMessage_VoiceMessage
	//	*IMChatMessage_FileMessage
	//	*IMChatMessage_CardMessage
	//	*IMChatMessage_SharkUrl
	//	*IMChatMessage_BackDelMessage
	//	*IMChatMessage_AtMessage
	Body                 isIMChatMessage_Body `protobuf_oneof:"body"`
	CType                ChatType             `protobuf:"varint,16,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"`
	MType                MessageType          `protobuf:"varint,17,opt,name=m_type,json=mType,proto3,enum=pb.MessageType" json:"m_type,omitempty"`
	Icon                 string               `protobuf:"bytes,18,opt,name=icon,proto3" json:"icon,omitempty"`
	IsAck                bool                 `protobuf:"varint,19,opt,name=is_ack,json=isAck,proto3" json:"is_ack,omitempty"`
	IsEncry              bool                 `protobuf:"varint,20,opt,name=is_encry,json=isEncry,proto3" json:"is_encry,omitempty"`
	Snapchat             int64                `protobuf:"varint,21,opt,name=snapchat,proto3" json:"snapchat,omitempty"`
	SendTime             int64                `protobuf:"varint,22,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	SMsgId               string               `protobuf:"bytes,23,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"`
	ToSource             string               `protobuf:"bytes,24,opt,name=to_source,json=toSource,proto3" json:"to_source,omitempty"`
	ToUid                string               `protobuf:"bytes,25,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IMChatMessage) Reset()         { *m = IMChatMessage{} }
func (m *IMChatMessage) String() string { return proto.CompactTextString(m) }
func (*IMChatMessage) ProtoMessage()    {}
func (*IMChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{7}
}
func (m *IMChatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMChatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMChatMessage.Merge(m, src)
}
func (m *IMChatMessage) XXX_Size() int {
	return m.Size()
}
func (m *IMChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IMChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IMChatMessage proto.InternalMessageInfo

type isIMChatMessage_Body interface {
	isIMChatMessage_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IMChatMessage_TextMessage struct {
	TextMessage *TextMessage `protobuf:"bytes,5,opt,name=textMessage,proto3,oneof" json:"textMessage,omitempty"`
}
type IMChatMessage_ImageMessage struct {
	ImageMessage *ImageMessage `protobuf:"bytes,6,opt,name=imageMessage,proto3,oneof" json:"imageMessage,omitempty"`
}
type IMChatMessage_VideoMessage struct {
	VideoMessage *VideoMessage `protobuf:"bytes,7,opt,name=videoMessage,proto3,oneof" json:"videoMessage,omitempty"`
}
type IMChatMessage_GeoMessage struct {
	GeoMessage *GEOMessage `protobuf:"bytes,8,opt,name=geoMessage,proto3,oneof" json:"geoMessage,omitempty"`
}
type IMChatMessage_VoiceMessage struct {
	VoiceMessage *VoiceMessage `protobuf:"bytes,9,opt,name=voiceMessage,proto3,oneof" json:"voiceMessage,omitempty"`
}
type IMChatMessage_FileMessage struct {
	FileMessage *FileMessage `protobuf:"bytes,10,opt,name=fileMessage,proto3,oneof" json:"fileMessage,omitempty"`
}
type IMChatMessage_CardMessage struct {
	CardMessage *CardMessage `protobuf:"bytes,11,opt,name=cardMessage,proto3,oneof" json:"cardMessage,omitempty"`
}
type IMChatMessage_SharkUrl struct {
	SharkUrl *SharkUrl `protobuf:"bytes,12,opt,name=sharkUrl,proto3,oneof" json:"sharkUrl,omitempty"`
}
type IMChatMessage_BackDelMessage struct {
	BackDelMessage *BackDelMessage `protobuf:"bytes,13,opt,name=backDelMessage,proto3,oneof" json:"backDelMessage,omitempty"`
}
type IMChatMessage_AtMessage struct {
	AtMessage *AtMessage `protobuf:"bytes,14,opt,name=atMessage,proto3,oneof" json:"atMessage,omitempty"`
}

func (*IMChatMessage_TextMessage) isIMChatMessage_Body()    {}
func (*IMChatMessage_ImageMessage) isIMChatMessage_Body()   {}
func (*IMChatMessage_VideoMessage) isIMChatMessage_Body()   {}
func (*IMChatMessage_GeoMessage) isIMChatMessage_Body()     {}
func (*IMChatMessage_VoiceMessage) isIMChatMessage_Body()   {}
func (*IMChatMessage_FileMessage) isIMChatMessage_Body()    {}
func (*IMChatMessage_CardMessage) isIMChatMessage_Body()    {}
func (*IMChatMessage_SharkUrl) isIMChatMessage_Body()       {}
func (*IMChatMessage_BackDelMessage) isIMChatMessage_Body() {}
func (*IMChatMessage_AtMessage) isIMChatMessage_Body()      {}

func (m *IMChatMessage) GetBody() isIMChatMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *IMChatMessage) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *IMChatMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *IMChatMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *IMChatMessage) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *IMChatMessage) GetTextMessage() *TextMessage {
	if x, ok := m.GetBody().(*IMChatMessage_TextMessage); ok {
		return x.TextMessage
	}
	return nil
}

func (m *IMChatMessage) GetImageMessage() *ImageMessage {
	if x, ok := m.GetBody().(*IMChatMessage_ImageMessage); ok {
		return x.ImageMessage
	}
	return nil
}

func (m *IMChatMessage) GetVideoMessage() *VideoMessage {
	if x, ok := m.GetBody().(*IMChatMessage_VideoMessage); ok {
		return x.VideoMessage
	}
	return nil
}

func (m *IMChatMessage) GetGeoMessage() *GEOMessage {
	if x, ok := m.GetBody().(*IMChatMessage_GeoMessage); ok {
		return x.GeoMessage
	}
	return nil
}

func (m *IMChatMessage) GetVoiceMessage() *VoiceMessage {
	if x, ok := m.GetBody().(*IMChatMessage_VoiceMessage); ok {
		return x.VoiceMessage
	}
	return nil
}

func (m *IMChatMessage) GetFileMessage() *FileMessage {
	if x, ok := m.GetBody().(*IMChatMessage_FileMessage); ok {
		return x.FileMessage
	}
	return nil
}

func (m *IMChatMessage) GetCardMessage() *CardMessage {
	if x, ok := m.GetBody().(*IMChatMessage_CardMessage); ok {
		return x.CardMessage
	}
	return nil
}

func (m *IMChatMessage) GetSharkUrl() *SharkUrl {
	if x, ok := m.GetBody().(*IMChatMessage_SharkUrl); ok {
		return x.SharkUrl
	}
	return nil
}

func (m *IMChatMessage) GetBackDelMessage() *BackDelMessage {
	if x, ok := m.GetBody().(*IMChatMessage_BackDelMessage); ok {
		return x.BackDelMessage
	}
	return nil
}

func (m *IMChatMessage) GetAtMessage() *AtMessage {
	if x, ok := m.GetBody().(*IMChatMessage_AtMessage); ok {
		return x.AtMessage
	}
	return nil
}

func (m *IMChatMessage) GetCType() ChatType {
	if m != nil {
		return m.CType
	}
	return ChatType_SingleChat
}

func (m *IMChatMessage) GetMType() MessageType {
	if m != nil {
		return m.MType
	}
	return MessageType_TextMessageType
}

func (m *IMChatMessage) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *IMChatMessage) GetIsAck() bool {
	if m != nil {
		return m.IsAck
	}
	return false
}

func (m *IMChatMessage) GetIsEncry() bool {
	if m != nil {
		return m.IsEncry
	}
	return false
}

func (m *IMChatMessage) GetSnapchat() int64 {
	if m != nil {
		return m.Snapchat
	}
	return 0
}

func (m *IMChatMessage) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *IMChatMessage) GetSMsgId() string {
	if m != nil {
		return m.SMsgId
	}
	return ""
}

func (m *IMChatMessage) GetToSource() string {
	if m != nil {
		return m.ToSource
	}
	return ""
}

func (m *IMChatMessage) GetToUid() string {
	if m != nil {
		return m.ToUid
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IMChatMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IMChatMessage_TextMessage)(nil),
		(*IMChatMessage_ImageMessage)(nil),
		(*IMChatMessage_VideoMessage)(nil),
		(*IMChatMessage_GeoMessage)(nil),
		(*IMChatMessage_VoiceMessage)(nil),
		(*IMChatMessage_FileMessage)(nil),
		(*IMChatMessage_CardMessage)(nil),
		(*IMChatMessage_SharkUrl)(nil),
		(*IMChatMessage_BackDelMessage)(nil),
		(*IMChatMessage_AtMessage)(nil),
	}
}

//文本消息
type TextMessage struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Ext                  string   `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextMessage) Reset()         { *m = TextMessage{} }
func (m *TextMessage) String() string { return proto.CompactTextString(m) }
func (*TextMessage) ProtoMessage()    {}
func (*TextMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{8}
}
func (m *TextMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMessage.Merge(m, src)
}
func (m *TextMessage) XXX_Size() int {
	return m.Size()
}
func (m *TextMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TextMessage proto.InternalMessageInfo

func (m *TextMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *TextMessage) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

//图片消息
type ImageMessage struct {
	Height               int32    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	With                 int32    `protobuf:"varint,2,opt,name=with,proto3" json:"with,omitempty"`
	Size_                int64    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Ext                  string   `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageMessage) Reset()         { *m = ImageMessage{} }
func (m *ImageMessage) String() string { return proto.CompactTextString(m) }
func (*ImageMessage) ProtoMessage()    {}
func (*ImageMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{9}
}
func (m *ImageMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageMessage.Merge(m, src)
}
func (m *ImageMessage) XXX_Size() int {
	return m.Size()
}
func (m *ImageMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ImageMessage proto.InternalMessageInfo

func (m *ImageMessage) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ImageMessage) GetWith() int32 {
	if m != nil {
		return m.With
	}
	return 0
}

func (m *ImageMessage) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ImageMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageMessage) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

//视频消息
type VideoMessage struct {
	Length               int64    `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CImg                 string   `protobuf:"bytes,3,opt,name=c_img,json=cImg,proto3" json:"c_img,omitempty"`
	CHeight              int32    `protobuf:"varint,4,opt,name=c_height,json=cHeight,proto3" json:"c_height,omitempty"`
	CWith                int32    `protobuf:"varint,5,opt,name=c_with,json=cWith,proto3" json:"c_with,omitempty"`
	Ext                  string   `protobuf:"bytes,6,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoMessage) Reset()         { *m = VideoMessage{} }
func (m *VideoMessage) String() string { return proto.CompactTextString(m) }
func (*VideoMessage) ProtoMessage()    {}
func (*VideoMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{10}
}
func (m *VideoMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoMessage.Merge(m, src)
}
func (m *VideoMessage) XXX_Size() int {
	return m.Size()
}
func (m *VideoMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VideoMessage proto.InternalMessageInfo

func (m *VideoMessage) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *VideoMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VideoMessage) GetCImg() string {
	if m != nil {
		return m.CImg
	}
	return ""
}

func (m *VideoMessage) GetCHeight() int32 {
	if m != nil {
		return m.CHeight
	}
	return 0
}

func (m *VideoMessage) GetCWith() int32 {
	if m != nil {
		return m.CWith
	}
	return 0
}

func (m *VideoMessage) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

//地理定位
type GEOMessage struct {
	Lng                  string   `protobuf:"bytes,1,opt,name=lng,proto3" json:"lng,omitempty"`
	Lat                  string   `protobuf:"bytes,2,opt,name=lat,proto3" json:"lat,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CImg                 string   `protobuf:"bytes,4,opt,name=c_img,json=cImg,proto3" json:"c_img,omitempty"`
	CHeight              int32    `protobuf:"varint,5,opt,name=c_height,json=cHeight,proto3" json:"c_height,omitempty"`
	CWith                int32    `protobuf:"varint,6,opt,name=c_with,json=cWith,proto3" json:"c_with,omitempty"`
	Ext                  string   `protobuf:"bytes,7,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GEOMessage) Reset()         { *m = GEOMessage{} }
func (m *GEOMessage) String() string { return proto.CompactTextString(m) }
func (*GEOMessage) ProtoMessage()    {}
func (*GEOMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{11}
}
func (m *GEOMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GEOMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GEOMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GEOMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GEOMessage.Merge(m, src)
}
func (m *GEOMessage) XXX_Size() int {
	return m.Size()
}
func (m *GEOMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GEOMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GEOMessage proto.InternalMessageInfo

func (m *GEOMessage) GetLng() string {
	if m != nil {
		return m.Lng
	}
	return ""
}

func (m *GEOMessage) GetLat() string {
	if m != nil {
		return m.Lat
	}
	return ""
}

func (m *GEOMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GEOMessage) GetCImg() string {
	if m != nil {
		return m.CImg
	}
	return ""
}

func (m *GEOMessage) GetCHeight() int32 {
	if m != nil {
		return m.CHeight
	}
	return 0
}

func (m *GEOMessage) GetCWith() int32 {
	if m != nil {
		return m.CWith
	}
	return 0
}

func (m *GEOMessage) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

//音频消息
type VoiceMessage struct {
	Length               int32    `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ext                  string   `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoiceMessage) Reset()         { *m = VoiceMessage{} }
func (m *VoiceMessage) String() string { return proto.CompactTextString(m) }
func (*VoiceMessage) ProtoMessage()    {}
func (*VoiceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{12}
}
func (m *VoiceMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoiceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoiceMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoiceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoiceMessage.Merge(m, src)
}
func (m *VoiceMessage) XXX_Size() int {
	return m.Size()
}
func (m *VoiceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VoiceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VoiceMessage proto.InternalMessageInfo

func (m *VoiceMessage) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *VoiceMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VoiceMessage) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

//文件消息
type FileMessage struct {
	Size_                int64    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ext                  string   `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileMessage) Reset()         { *m = FileMessage{} }
func (m *FileMessage) String() string { return proto.CompactTextString(m) }
func (*FileMessage) ProtoMessage()    {}
func (*FileMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{13}
}
func (m *FileMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileMessage.Merge(m, src)
}
func (m *FileMessage) XXX_Size() int {
	return m.Size()
}
func (m *FileMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FileMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FileMessage proto.InternalMessageInfo

func (m *FileMessage) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *FileMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileMessage) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

//名片消息
type CardMessage struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ext                  string   `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardMessage) Reset()         { *m = CardMessage{} }
func (m *CardMessage) String() string { return proto.CompactTextString(m) }
func (*CardMessage) ProtoMessage()    {}
func (*CardMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{14}
}
func (m *CardMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardMessage.Merge(m, src)
}
func (m *CardMessage) XXX_Size() int {
	return m.Size()
}
func (m *CardMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CardMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CardMessage proto.InternalMessageInfo

func (m *CardMessage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CardMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CardMessage) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

//分享链接
type SharkUrl struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Logo                 string   `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
	Ext                  string   `protobuf:"bytes,4,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SharkUrl) Reset()         { *m = SharkUrl{} }
func (m *SharkUrl) String() string { return proto.CompactTextString(m) }
func (*SharkUrl) ProtoMessage()    {}
func (*SharkUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{15}
}
func (m *SharkUrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SharkUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SharkUrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SharkUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharkUrl.Merge(m, src)
}
func (m *SharkUrl) XXX_Size() int {
	return m.Size()
}
func (m *SharkUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_SharkUrl.DiscardUnknown(m)
}

var xxx_messageInfo_SharkUrl proto.InternalMessageInfo

func (m *SharkUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SharkUrl) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SharkUrl) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *SharkUrl) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

//撤回消息、删除消息
type BackDelMessage struct {
	SMsgId               string   `protobuf:"bytes,1,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"`
	Ext                  string   `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackDelMessage) Reset()         { *m = BackDelMessage{} }
func (m *BackDelMessage) String() string { return proto.CompactTextString(m) }
func (*BackDelMessage) ProtoMessage()    {}
func (*BackDelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{16}
}
func (m *BackDelMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackDelMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackDelMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackDelMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackDelMessage.Merge(m, src)
}
func (m *BackDelMessage) XXX_Size() int {
	return m.Size()
}
func (m *BackDelMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BackDelMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BackDelMessage proto.InternalMessageInfo

func (m *BackDelMessage) GetSMsgId() string {
	if m != nil {
		return m.SMsgId
	}
	return ""
}

func (m *BackDelMessage) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

//@用户消息(该消息为特殊消息，前后端一起定义)
type AtMessage struct {
	Content              string    `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	AtInfo               []*AtInfo `protobuf:"bytes,2,rep,name=at_info,json=atInfo,proto3" json:"at_info,omitempty"`
	Ext                  string    `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AtMessage) Reset()         { *m = AtMessage{} }
func (m *AtMessage) String() string { return proto.CompactTextString(m) }
func (*AtMessage) ProtoMessage()    {}
func (*AtMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{17}
}
func (m *AtMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AtMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AtMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AtMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtMessage.Merge(m, src)
}
func (m *AtMessage) XXX_Size() int {
	return m.Size()
}
func (m *AtMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AtMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AtMessage proto.InternalMessageInfo

func (m *AtMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *AtMessage) GetAtInfo() []*AtInfo {
	if m != nil {
		return m.AtInfo
	}
	return nil
}

func (m *AtMessage) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

type AtInfo struct {
	UId                  string   `protobuf:"bytes,1,opt,name=u_id,json=uId,proto3" json:"u_id,omitempty"`
	UNick                string   `protobuf:"bytes,2,opt,name=u_nick,json=uNick,proto3" json:"u_nick,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AtInfo) Reset()         { *m = AtInfo{} }
func (m *AtInfo) String() string { return proto.CompactTextString(m) }
func (*AtInfo) ProtoMessage()    {}
func (*AtInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{18}
}
func (m *AtInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AtInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AtInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AtInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtInfo.Merge(m, src)
}
func (m *AtInfo) XXX_Size() int {
	return m.Size()
}
func (m *AtInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AtInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AtInfo proto.InternalMessageInfo

func (m *AtInfo) GetUId() string {
	if m != nil {
		return m.UId
	}
	return ""
}

func (m *AtInfo) GetUNick() string {
	if m != nil {
		return m.UNick
	}
	return ""
}

type IMServerMessage struct {
	From     string        `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Nick     string        `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Icon     string        `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	To       string        `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	SMsgType ServerMsgType `protobuf:"varint,5,opt,name=s_msg_type,json=sMsgType,proto3,enum=pb.ServerMsgType" json:"s_msg_type,omitempty"`
	SendTime int64         `protobuf:"varint,6,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	SMsgId   string        `protobuf:"bytes,7,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"`
	// Types that are valid to be assigned to MessageBody:
	//	*IMServerMessage_CreateGroupMessage
	//	*IMServerMessage_JoinReqGroupMessage
	//	*IMServerMessage_JoinConfirmGroupMessage
	//	*IMServerMessage_OutGroupMessage
	//	*IMServerMessage_KickGroupMessage
	//	*IMServerMessage_DelGroupMessage
	//	*IMServerMessage_TransferOwnerMessage
	//	*IMServerMessage_GroupStatusMessage
	//	*IMServerMessage_NoticeGroupMessage
	//	*IMServerMessage_NameGroupMessage
	//	*IMServerMessage_AdminGroupMessage
	//	*IMServerMessage_InviteJoinRepGroupMessage
	//	*IMServerMessage_InviteConfirmGroupMessage
	//	*IMServerMessage_GroupTipChatMessage
	//	*IMServerMessage_FriendInviteMessage
	//	*IMServerMessage_FriendConfirmMessage
	//	*IMServerMessage_FriendDelMessage
	//	*IMServerMessage_FriendSayMessage
	//	*IMServerMessage_NoticeMessage
	//	*IMServerMessage_UserForcedOffline
	//	*IMServerMessage_SynchroMessage
	//	*IMServerMessage_RegisterWelcomeMessage
	//	*IMServerMessage_ServerChatMessage
	MessageBody          isIMServerMessage_MessageBody `protobuf_oneof:"messageBody"`
	ToSource             string                        `protobuf:"bytes,33,opt,name=to_source,json=toSource,proto3" json:"to_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *IMServerMessage) Reset()         { *m = IMServerMessage{} }
func (m *IMServerMessage) String() string { return proto.CompactTextString(m) }
func (*IMServerMessage) ProtoMessage()    {}
func (*IMServerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{19}
}
func (m *IMServerMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMServerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMServerMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMServerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMServerMessage.Merge(m, src)
}
func (m *IMServerMessage) XXX_Size() int {
	return m.Size()
}
func (m *IMServerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IMServerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IMServerMessage proto.InternalMessageInfo

type isIMServerMessage_MessageBody interface {
	isIMServerMessage_MessageBody()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IMServerMessage_CreateGroupMessage struct {
	CreateGroupMessage *CreateGroupMessage `protobuf:"bytes,8,opt,name=createGroupMessage,proto3,oneof" json:"createGroupMessage,omitempty"`
}
type IMServerMessage_JoinReqGroupMessage struct {
	JoinReqGroupMessage *JoinReqGroupMessage `protobuf:"bytes,9,opt,name=joinReqGroupMessage,proto3,oneof" json:"joinReqGroupMessage,omitempty"`
}
type IMServerMessage_JoinConfirmGroupMessage struct {
	JoinConfirmGroupMessage *JoinConfirmGroupMessage `protobuf:"bytes,10,opt,name=joinConfirmGroupMessage,proto3,oneof" json:"joinConfirmGroupMessage,omitempty"`
}
type IMServerMessage_OutGroupMessage struct {
	OutGroupMessage *OutGroupMessage `protobuf:"bytes,11,opt,name=outGroupMessage,proto3,oneof" json:"outGroupMessage,omitempty"`
}
type IMServerMessage_KickGroupMessage struct {
	KickGroupMessage *KickGroupMessage `protobuf:"bytes,12,opt,name=kickGroupMessage,proto3,oneof" json:"kickGroupMessage,omitempty"`
}
type IMServerMessage_DelGroupMessage struct {
	DelGroupMessage *DelGroupMessage `protobuf:"bytes,13,opt,name=delGroupMessage,proto3,oneof" json:"delGroupMessage,omitempty"`
}
type IMServerMessage_TransferOwnerMessage struct {
	TransferOwnerMessage *TransferOwnerMessage `protobuf:"bytes,14,opt,name=transferOwnerMessage,proto3,oneof" json:"transferOwnerMessage,omitempty"`
}
type IMServerMessage_GroupStatusMessage struct {
	GroupStatusMessage *GroupStatusMessage `protobuf:"bytes,15,opt,name=groupStatusMessage,proto3,oneof" json:"groupStatusMessage,omitempty"`
}
type IMServerMessage_NoticeGroupMessage struct {
	NoticeGroupMessage *NoticeGroupMessage `protobuf:"bytes,16,opt,name=noticeGroupMessage,proto3,oneof" json:"noticeGroupMessage,omitempty"`
}
type IMServerMessage_NameGroupMessage struct {
	NameGroupMessage *NameGroupMessage `protobuf:"bytes,17,opt,name=nameGroupMessage,proto3,oneof" json:"nameGroupMessage,omitempty"`
}
type IMServerMessage_AdminGroupMessage struct {
	AdminGroupMessage *AdminGroupMessage `protobuf:"bytes,18,opt,name=adminGroupMessage,proto3,oneof" json:"adminGroupMessage,omitempty"`
}
type IMServerMessage_InviteJoinRepGroupMessage struct {
	InviteJoinRepGroupMessage *InviteJoinRepGroupMessage `protobuf:"bytes,19,opt,name=inviteJoinRepGroupMessage,proto3,oneof" json:"inviteJoinRepGroupMessage,omitempty"`
}
type IMServerMessage_InviteConfirmGroupMessage struct {
	InviteConfirmGroupMessage *InviteConfirmGroupMessage `protobuf:"bytes,20,opt,name=inviteConfirmGroupMessage,proto3,oneof" json:"inviteConfirmGroupMessage,omitempty"`
}
type IMServerMessage_GroupTipChatMessage struct {
	GroupTipChatMessage *GroupTipChatMessage `protobuf:"bytes,21,opt,name=groupTipChatMessage,proto3,oneof" json:"groupTipChatMessage,omitempty"`
}
type IMServerMessage_FriendInviteMessage struct {
	FriendInviteMessage *FriendInviteMessage `protobuf:"bytes,24,opt,name=friendInviteMessage,proto3,oneof" json:"friendInviteMessage,omitempty"`
}
type IMServerMessage_FriendConfirmMessage struct {
	FriendConfirmMessage *FriendConfirmMessage `protobuf:"bytes,25,opt,name=friendConfirmMessage,proto3,oneof" json:"friendConfirmMessage,omitempty"`
}
type IMServerMessage_FriendDelMessage struct {
	FriendDelMessage *FriendDelMessage `protobuf:"bytes,26,opt,name=friendDelMessage,proto3,oneof" json:"friendDelMessage,omitempty"`
}
type IMServerMessage_FriendSayMessage struct {
	FriendSayMessage *FriendSayMessage `protobuf:"bytes,27,opt,name=friendSayMessage,proto3,oneof" json:"friendSayMessage,omitempty"`
}
type IMServerMessage_NoticeMessage struct {
	NoticeMessage *NoticeMessage `protobuf:"bytes,28,opt,name=noticeMessage,proto3,oneof" json:"noticeMessage,omitempty"`
}
type IMServerMessage_UserForcedOffline struct {
	UserForcedOffline *UserForcedOffline `protobuf:"bytes,29,opt,name=userForcedOffline,proto3,oneof" json:"userForcedOffline,omitempty"`
}
type IMServerMessage_SynchroMessage struct {
	SynchroMessage *SynchroMessage `protobuf:"bytes,30,opt,name=synchroMessage,proto3,oneof" json:"synchroMessage,omitempty"`
}
type IMServerMessage_RegisterWelcomeMessage struct {
	RegisterWelcomeMessage *RegisterWelcomeMessage `protobuf:"bytes,31,opt,name=registerWelcomeMessage,proto3,oneof" json:"registerWelcomeMessage,omitempty"`
}
type IMServerMessage_ServerChatMessage struct {
	ServerChatMessage *ServerChatMessage `protobuf:"bytes,32,opt,name=serverChatMessage,proto3,oneof" json:"serverChatMessage,omitempty"`
}

func (*IMServerMessage_CreateGroupMessage) isIMServerMessage_MessageBody()        {}
func (*IMServerMessage_JoinReqGroupMessage) isIMServerMessage_MessageBody()       {}
func (*IMServerMessage_JoinConfirmGroupMessage) isIMServerMessage_MessageBody()   {}
func (*IMServerMessage_OutGroupMessage) isIMServerMessage_MessageBody()           {}
func (*IMServerMessage_KickGroupMessage) isIMServerMessage_MessageBody()          {}
func (*IMServerMessage_DelGroupMessage) isIMServerMessage_MessageBody()           {}
func (*IMServerMessage_TransferOwnerMessage) isIMServerMessage_MessageBody()      {}
func (*IMServerMessage_GroupStatusMessage) isIMServerMessage_MessageBody()        {}
func (*IMServerMessage_NoticeGroupMessage) isIMServerMessage_MessageBody()        {}
func (*IMServerMessage_NameGroupMessage) isIMServerMessage_MessageBody()          {}
func (*IMServerMessage_AdminGroupMessage) isIMServerMessage_MessageBody()         {}
func (*IMServerMessage_InviteJoinRepGroupMessage) isIMServerMessage_MessageBody() {}
func (*IMServerMessage_InviteConfirmGroupMessage) isIMServerMessage_MessageBody() {}
func (*IMServerMessage_GroupTipChatMessage) isIMServerMessage_MessageBody()       {}
func (*IMServerMessage_FriendInviteMessage) isIMServerMessage_MessageBody()       {}
func (*IMServerMessage_FriendConfirmMessage) isIMServerMessage_MessageBody()      {}
func (*IMServerMessage_FriendDelMessage) isIMServerMessage_MessageBody()          {}
func (*IMServerMessage_FriendSayMessage) isIMServerMessage_MessageBody()          {}
func (*IMServerMessage_NoticeMessage) isIMServerMessage_MessageBody()             {}
func (*IMServerMessage_UserForcedOffline) isIMServerMessage_MessageBody()         {}
func (*IMServerMessage_SynchroMessage) isIMServerMessage_MessageBody()            {}
func (*IMServerMessage_RegisterWelcomeMessage) isIMServerMessage_MessageBody()    {}
func (*IMServerMessage_ServerChatMessage) isIMServerMessage_MessageBody()         {}

func (m *IMServerMessage) GetMessageBody() isIMServerMessage_MessageBody {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

func (m *IMServerMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *IMServerMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *IMServerMessage) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *IMServerMessage) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *IMServerMessage) GetSMsgType() ServerMsgType {
	if m != nil {
		return m.SMsgType
	}
	return ServerMsgType_NoticeMessageType
}

func (m *IMServerMessage) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *IMServerMessage) GetSMsgId() string {
	if m != nil {
		return m.SMsgId
	}
	return ""
}

func (m *IMServerMessage) GetCreateGroupMessage() *CreateGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_CreateGroupMessage); ok {
		return x.CreateGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetJoinReqGroupMessage() *JoinReqGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_JoinReqGroupMessage); ok {
		return x.JoinReqGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetJoinConfirmGroupMessage() *JoinConfirmGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_JoinConfirmGroupMessage); ok {
		return x.JoinConfirmGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetOutGroupMessage() *OutGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_OutGroupMessage); ok {
		return x.OutGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetKickGroupMessage() *KickGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_KickGroupMessage); ok {
		return x.KickGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetDelGroupMessage() *DelGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_DelGroupMessage); ok {
		return x.DelGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetTransferOwnerMessage() *TransferOwnerMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_TransferOwnerMessage); ok {
		return x.TransferOwnerMessage
	}
	return nil
}

func (m *IMServerMessage) GetGroupStatusMessage() *GroupStatusMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_GroupStatusMessage); ok {
		return x.GroupStatusMessage
	}
	return nil
}

func (m *IMServerMessage) GetNoticeGroupMessage() *NoticeGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_NoticeGroupMessage); ok {
		return x.NoticeGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetNameGroupMessage() *NameGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_NameGroupMessage); ok {
		return x.NameGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetAdminGroupMessage() *AdminGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_AdminGroupMessage); ok {
		return x.AdminGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetInviteJoinRepGroupMessage() *InviteJoinRepGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_InviteJoinRepGroupMessage); ok {
		return x.InviteJoinRepGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetInviteConfirmGroupMessage() *InviteConfirmGroupMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_InviteConfirmGroupMessage); ok {
		return x.InviteConfirmGroupMessage
	}
	return nil
}

func (m *IMServerMessage) GetGroupTipChatMessage() *GroupTipChatMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_GroupTipChatMessage); ok {
		return x.GroupTipChatMessage
	}
	return nil
}

func (m *IMServerMessage) GetFriendInviteMessage() *FriendInviteMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_FriendInviteMessage); ok {
		return x.FriendInviteMessage
	}
	return nil
}

func (m *IMServerMessage) GetFriendConfirmMessage() *FriendConfirmMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_FriendConfirmMessage); ok {
		return x.FriendConfirmMessage
	}
	return nil
}

func (m *IMServerMessage) GetFriendDelMessage() *FriendDelMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_FriendDelMessage); ok {
		return x.FriendDelMessage
	}
	return nil
}

func (m *IMServerMessage) GetFriendSayMessage() *FriendSayMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_FriendSayMessage); ok {
		return x.FriendSayMessage
	}
	return nil
}

func (m *IMServerMessage) GetNoticeMessage() *NoticeMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_NoticeMessage); ok {
		return x.NoticeMessage
	}
	return nil
}

func (m *IMServerMessage) GetUserForcedOffline() *UserForcedOffline {
	if x, ok := m.GetMessageBody().(*IMServerMessage_UserForcedOffline); ok {
		return x.UserForcedOffline
	}
	return nil
}

func (m *IMServerMessage) GetSynchroMessage() *SynchroMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_SynchroMessage); ok {
		return x.SynchroMessage
	}
	return nil
}

func (m *IMServerMessage) GetRegisterWelcomeMessage() *RegisterWelcomeMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_RegisterWelcomeMessage); ok {
		return x.RegisterWelcomeMessage
	}
	return nil
}

func (m *IMServerMessage) GetServerChatMessage() *ServerChatMessage {
	if x, ok := m.GetMessageBody().(*IMServerMessage_ServerChatMessage); ok {
		return x.ServerChatMessage
	}
	return nil
}

func (m *IMServerMessage) GetToSource() string {
	if m != nil {
		return m.ToSource
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IMServerMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IMServerMessage_CreateGroupMessage)(nil),
		(*IMServerMessage_JoinReqGroupMessage)(nil),
		(*IMServerMessage_JoinConfirmGroupMessage)(nil),
		(*IMServerMessage_OutGroupMessage)(nil),
		(*IMServerMessage_KickGroupMessage)(nil),
		(*IMServerMessage_DelGroupMessage)(nil),
		(*IMServerMessage_TransferOwnerMessage)(nil),
		(*IMServerMessage_GroupStatusMessage)(nil),
		(*IMServerMessage_NoticeGroupMessage)(nil),
		(*IMServerMessage_NameGroupMessage)(nil),
		(*IMServerMessage_AdminGroupMessage)(nil),
		(*IMServerMessage_InviteJoinRepGroupMessage)(nil),
		(*IMServerMessage_InviteConfirmGroupMessage)(nil),
		(*IMServerMessage_GroupTipChatMessage)(nil),
		(*IMServerMessage_FriendInviteMessage)(nil),
		(*IMServerMessage_FriendConfirmMessage)(nil),
		(*IMServerMessage_FriendDelMessage)(nil),
		(*IMServerMessage_FriendSayMessage)(nil),
		(*IMServerMessage_NoticeMessage)(nil),
		(*IMServerMessage_UserForcedOffline)(nil),
		(*IMServerMessage_SynchroMessage)(nil),
		(*IMServerMessage_RegisterWelcomeMessage)(nil),
		(*IMServerMessage_ServerChatMessage)(nil),
	}
}

//客户端ACK消息
type IMChatMessageToACK struct {
	MsgId                string   `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	AckMsgId             string   `protobuf:"bytes,2,opt,name=ack_msg_id,json=ackMsgId,proto3" json:"ack_msg_id,omitempty"`
	SMsgId               string   `protobuf:"bytes,3,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"`
	From                 string   `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To                   string   `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	CType                ChatType `protobuf:"varint,6,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"`
	ToSource             string   `protobuf:"bytes,7,opt,name=to_source,json=toSource,proto3" json:"to_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IMChatMessageToACK) Reset()         { *m = IMChatMessageToACK{} }
func (m *IMChatMessageToACK) String() string { return proto.CompactTextString(m) }
func (*IMChatMessageToACK) ProtoMessage()    {}
func (*IMChatMessageToACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{20}
}
func (m *IMChatMessageToACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IMChatMessageToACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IMChatMessageToACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IMChatMessageToACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMChatMessageToACK.Merge(m, src)
}
func (m *IMChatMessageToACK) XXX_Size() int {
	return m.Size()
}
func (m *IMChatMessageToACK) XXX_DiscardUnknown() {
	xxx_messageInfo_IMChatMessageToACK.DiscardUnknown(m)
}

var xxx_messageInfo_IMChatMessageToACK proto.InternalMessageInfo

func (m *IMChatMessageToACK) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *IMChatMessageToACK) GetAckMsgId() string {
	if m != nil {
		return m.AckMsgId
	}
	return ""
}

func (m *IMChatMessageToACK) GetSMsgId() string {
	if m != nil {
		return m.SMsgId
	}
	return ""
}

func (m *IMChatMessageToACK) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *IMChatMessageToACK) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *IMChatMessageToACK) GetCType() ChatType {
	if m != nil {
		return m.CType
	}
	return ChatType_SingleChat
}

func (m *IMChatMessageToACK) GetToSource() string {
	if m != nil {
		return m.ToSource
	}
	return ""
}

//聊天消息
type ServerChatMessage struct {
	FromUid              string      `protobuf:"bytes,1,opt,name=from_uid,json=fromUid,proto3" json:"from_uid,omitempty"`
	FromNick             string      `protobuf:"bytes,2,opt,name=from_nick,json=fromNick,proto3" json:"from_nick,omitempty"`
	FromIcon             string      `protobuf:"bytes,3,opt,name=from_icon,json=fromIcon,proto3" json:"from_icon,omitempty"`
	ToUid                string      `protobuf:"bytes,4,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`
	Content              string      `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	CType                ChatType    `protobuf:"varint,6,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"`
	M_Type               MessageType `protobuf:"varint,7,opt,name=m_Type,json=mType,proto3,enum=pb.MessageType" json:"m_Type,omitempty"`
	With                 int32       `protobuf:"varint,8,opt,name=with,proto3" json:"with,omitempty"`
	High                 int32       `protobuf:"varint,9,opt,name=high,proto3" json:"high,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ServerChatMessage) Reset()         { *m = ServerChatMessage{} }
func (m *ServerChatMessage) String() string { return proto.CompactTextString(m) }
func (*ServerChatMessage) ProtoMessage()    {}
func (*ServerChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{21}
}
func (m *ServerChatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerChatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerChatMessage.Merge(m, src)
}
func (m *ServerChatMessage) XXX_Size() int {
	return m.Size()
}
func (m *ServerChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ServerChatMessage proto.InternalMessageInfo

func (m *ServerChatMessage) GetFromUid() string {
	if m != nil {
		return m.FromUid
	}
	return ""
}

func (m *ServerChatMessage) GetFromNick() string {
	if m != nil {
		return m.FromNick
	}
	return ""
}

func (m *ServerChatMessage) GetFromIcon() string {
	if m != nil {
		return m.FromIcon
	}
	return ""
}

func (m *ServerChatMessage) GetToUid() string {
	if m != nil {
		return m.ToUid
	}
	return ""
}

func (m *ServerChatMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ServerChatMessage) GetCType() ChatType {
	if m != nil {
		return m.CType
	}
	return ChatType_SingleChat
}

func (m *ServerChatMessage) GetM_Type() MessageType {
	if m != nil {
		return m.M_Type
	}
	return MessageType_TextMessageType
}

func (m *ServerChatMessage) GetWith() int32 {
	if m != nil {
		return m.With
	}
	return 0
}

func (m *ServerChatMessage) GetHigh() int32 {
	if m != nil {
		return m.High
	}
	return 0
}

//创建群组消息
type CreateGroupMessage struct {
	Uid                  string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string      `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Gid                  string      `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	GName                string      `protobuf:"bytes,4,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"`
	GHeader              string      `protobuf:"bytes,5,opt,name=g_header,json=gHeader,proto3" json:"g_header,omitempty"`
	InviteUid            []*UserInfo `protobuf:"bytes,6,rep,name=invite_uid,json=inviteUid,proto3" json:"invite_uid,omitempty"`
	GroupInfo            *GroupInfo  `protobuf:"bytes,7,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateGroupMessage) Reset()         { *m = CreateGroupMessage{} }
func (m *CreateGroupMessage) String() string { return proto.CompactTextString(m) }
func (*CreateGroupMessage) ProtoMessage()    {}
func (*CreateGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{22}
}
func (m *CreateGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGroupMessage.Merge(m, src)
}
func (m *CreateGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *CreateGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGroupMessage proto.InternalMessageInfo

func (m *CreateGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *CreateGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *CreateGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *CreateGroupMessage) GetGName() string {
	if m != nil {
		return m.GName
	}
	return ""
}

func (m *CreateGroupMessage) GetGHeader() string {
	if m != nil {
		return m.GHeader
	}
	return ""
}

func (m *CreateGroupMessage) GetInviteUid() []*UserInfo {
	if m != nil {
		return m.InviteUid
	}
	return nil
}

func (m *CreateGroupMessage) GetGroupInfo() *GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

//进群申请消息
type JoinReqGroupMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Gid                  string   `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	GName                string   `protobuf:"bytes,4,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"`
	Reason               string   `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinReqGroupMessage) Reset()         { *m = JoinReqGroupMessage{} }
func (m *JoinReqGroupMessage) String() string { return proto.CompactTextString(m) }
func (*JoinReqGroupMessage) ProtoMessage()    {}
func (*JoinReqGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{23}
}
func (m *JoinReqGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinReqGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinReqGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinReqGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinReqGroupMessage.Merge(m, src)
}
func (m *JoinReqGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *JoinReqGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinReqGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JoinReqGroupMessage proto.InternalMessageInfo

func (m *JoinReqGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *JoinReqGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *JoinReqGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *JoinReqGroupMessage) GetGName() string {
	if m != nil {
		return m.GName
	}
	return ""
}

func (m *JoinReqGroupMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//进群确认/进群通知
type JoinConfirmGroupMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Gid                  string   `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	GName                string   `protobuf:"bytes,4,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"`
	Status               int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Reason               string   `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinConfirmGroupMessage) Reset()         { *m = JoinConfirmGroupMessage{} }
func (m *JoinConfirmGroupMessage) String() string { return proto.CompactTextString(m) }
func (*JoinConfirmGroupMessage) ProtoMessage()    {}
func (*JoinConfirmGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{24}
}
func (m *JoinConfirmGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinConfirmGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinConfirmGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinConfirmGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinConfirmGroupMessage.Merge(m, src)
}
func (m *JoinConfirmGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *JoinConfirmGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinConfirmGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JoinConfirmGroupMessage proto.InternalMessageInfo

func (m *JoinConfirmGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *JoinConfirmGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *JoinConfirmGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *JoinConfirmGroupMessage) GetGName() string {
	if m != nil {
		return m.GName
	}
	return ""
}

func (m *JoinConfirmGroupMessage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *JoinConfirmGroupMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//退群消息
type OutGroupMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Gid                  string   `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	Reason               string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutGroupMessage) Reset()         { *m = OutGroupMessage{} }
func (m *OutGroupMessage) String() string { return proto.CompactTextString(m) }
func (*OutGroupMessage) ProtoMessage()    {}
func (*OutGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{25}
}
func (m *OutGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutGroupMessage.Merge(m, src)
}
func (m *OutGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *OutGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OutGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OutGroupMessage proto.InternalMessageInfo

func (m *OutGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *OutGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *OutGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *OutGroupMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//踢人消息
type KickGroupMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	OperateUid           string   `protobuf:"bytes,3,opt,name=operate_uid,json=operateUid,proto3" json:"operate_uid,omitempty"`
	OperateNick          string   `protobuf:"bytes,4,opt,name=operate_nick,json=operateNick,proto3" json:"operate_nick,omitempty"`
	Gid                  string   `protobuf:"bytes,5,opt,name=gid,proto3" json:"gid,omitempty"`
	Reason               string   `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KickGroupMessage) Reset()         { *m = KickGroupMessage{} }
func (m *KickGroupMessage) String() string { return proto.CompactTextString(m) }
func (*KickGroupMessage) ProtoMessage()    {}
func (*KickGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{26}
}
func (m *KickGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickGroupMessage.Merge(m, src)
}
func (m *KickGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *KickGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_KickGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_KickGroupMessage proto.InternalMessageInfo

func (m *KickGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *KickGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *KickGroupMessage) GetOperateUid() string {
	if m != nil {
		return m.OperateUid
	}
	return ""
}

func (m *KickGroupMessage) GetOperateNick() string {
	if m != nil {
		return m.OperateNick
	}
	return ""
}

func (m *KickGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *KickGroupMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//解散群组
type DelGroupMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Gid                  string   `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	GName                string   `protobuf:"bytes,4,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"`
	Reason               string   `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelGroupMessage) Reset()         { *m = DelGroupMessage{} }
func (m *DelGroupMessage) String() string { return proto.CompactTextString(m) }
func (*DelGroupMessage) ProtoMessage()    {}
func (*DelGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{27}
}
func (m *DelGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelGroupMessage.Merge(m, src)
}
func (m *DelGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *DelGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DelGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DelGroupMessage proto.InternalMessageInfo

func (m *DelGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *DelGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *DelGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *DelGroupMessage) GetGName() string {
	if m != nil {
		return m.GName
	}
	return ""
}

func (m *DelGroupMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//转让群主
type TransferOwnerMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Gid                  string   `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	Reason               string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferOwnerMessage) Reset()         { *m = TransferOwnerMessage{} }
func (m *TransferOwnerMessage) String() string { return proto.CompactTextString(m) }
func (*TransferOwnerMessage) ProtoMessage()    {}
func (*TransferOwnerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{28}
}
func (m *TransferOwnerMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferOwnerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferOwnerMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferOwnerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferOwnerMessage.Merge(m, src)
}
func (m *TransferOwnerMessage) XXX_Size() int {
	return m.Size()
}
func (m *TransferOwnerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferOwnerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TransferOwnerMessage proto.InternalMessageInfo

func (m *TransferOwnerMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *TransferOwnerMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *TransferOwnerMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *TransferOwnerMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//是否群组禁言/解除禁言、锁定/解锁群组、禁止私聊、进群验证
type GroupStatusMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Gid                  string   `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	Status               int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Reason               string   `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupStatusMessage) Reset()         { *m = GroupStatusMessage{} }
func (m *GroupStatusMessage) String() string { return proto.CompactTextString(m) }
func (*GroupStatusMessage) ProtoMessage()    {}
func (*GroupStatusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{29}
}
func (m *GroupStatusMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupStatusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupStatusMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupStatusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupStatusMessage.Merge(m, src)
}
func (m *GroupStatusMessage) XXX_Size() int {
	return m.Size()
}
func (m *GroupStatusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupStatusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GroupStatusMessage proto.InternalMessageInfo

func (m *GroupStatusMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *GroupStatusMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *GroupStatusMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *GroupStatusMessage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GroupStatusMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//变更群组公告
type NoticeGroupMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Gid                  string   `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	Notice               string   `protobuf:"bytes,4,opt,name=notice,proto3" json:"notice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoticeGroupMessage) Reset()         { *m = NoticeGroupMessage{} }
func (m *NoticeGroupMessage) String() string { return proto.CompactTextString(m) }
func (*NoticeGroupMessage) ProtoMessage()    {}
func (*NoticeGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{30}
}
func (m *NoticeGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoticeGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoticeGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoticeGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeGroupMessage.Merge(m, src)
}
func (m *NoticeGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *NoticeGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeGroupMessage proto.InternalMessageInfo

func (m *NoticeGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *NoticeGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *NoticeGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *NoticeGroupMessage) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

//变更群名称
type NameGroupMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Gid                  string   `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	GName                string   `protobuf:"bytes,4,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameGroupMessage) Reset()         { *m = NameGroupMessage{} }
func (m *NameGroupMessage) String() string { return proto.CompactTextString(m) }
func (*NameGroupMessage) ProtoMessage()    {}
func (*NameGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{31}
}
func (m *NameGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameGroupMessage.Merge(m, src)
}
func (m *NameGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *NameGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NameGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NameGroupMessage proto.InternalMessageInfo

func (m *NameGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *NameGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *NameGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *NameGroupMessage) GetGName() string {
	if m != nil {
		return m.GName
	}
	return ""
}

//变更管理员
type AdminGroupMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	OperateUid           string   `protobuf:"bytes,3,opt,name=operate_uid,json=operateUid,proto3" json:"operate_uid,omitempty"`
	OperateNick          string   `protobuf:"bytes,4,opt,name=operate_nick,json=operateNick,proto3" json:"operate_nick,omitempty"`
	Gid                  string   `protobuf:"bytes,5,opt,name=gid,proto3" json:"gid,omitempty"`
	Type                 int32    `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Reason               string   `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminGroupMessage) Reset()         { *m = AdminGroupMessage{} }
func (m *AdminGroupMessage) String() string { return proto.CompactTextString(m) }
func (*AdminGroupMessage) ProtoMessage()    {}
func (*AdminGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{32}
}
func (m *AdminGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminGroupMessage.Merge(m, src)
}
func (m *AdminGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *AdminGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AdminGroupMessage proto.InternalMessageInfo

func (m *AdminGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *AdminGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *AdminGroupMessage) GetOperateUid() string {
	if m != nil {
		return m.OperateUid
	}
	return ""
}

func (m *AdminGroupMessage) GetOperateNick() string {
	if m != nil {
		return m.OperateNick
	}
	return ""
}

func (m *AdminGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *AdminGroupMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AdminGroupMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//邀请进群申请
type InviteJoinRepGroupMessage struct {
	Uid                  string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string      `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	InviteUid            []*UserInfo `protobuf:"bytes,3,rep,name=invite_uid,json=inviteUid,proto3" json:"invite_uid,omitempty"`
	Gid                  string      `protobuf:"bytes,4,opt,name=gid,proto3" json:"gid,omitempty"`
	GName                string      `protobuf:"bytes,5,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"`
	Reason               string      `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InviteJoinRepGroupMessage) Reset()         { *m = InviteJoinRepGroupMessage{} }
func (m *InviteJoinRepGroupMessage) String() string { return proto.CompactTextString(m) }
func (*InviteJoinRepGroupMessage) ProtoMessage()    {}
func (*InviteJoinRepGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{33}
}
func (m *InviteJoinRepGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteJoinRepGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteJoinRepGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteJoinRepGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteJoinRepGroupMessage.Merge(m, src)
}
func (m *InviteJoinRepGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *InviteJoinRepGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteJoinRepGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InviteJoinRepGroupMessage proto.InternalMessageInfo

func (m *InviteJoinRepGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *InviteJoinRepGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *InviteJoinRepGroupMessage) GetInviteUid() []*UserInfo {
	if m != nil {
		return m.InviteUid
	}
	return nil
}

func (m *InviteJoinRepGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *InviteJoinRepGroupMessage) GetGName() string {
	if m != nil {
		return m.GName
	}
	return ""
}

func (m *InviteJoinRepGroupMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//邀请进群确认/邀请进群通知
type InviteConfirmGroupMessage struct {
	Uid                  string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string      `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	InviteUid            []*UserInfo `protobuf:"bytes,3,rep,name=invite_uid,json=inviteUid,proto3" json:"invite_uid,omitempty"`
	ConfirmUid           string      `protobuf:"bytes,4,opt,name=confirm_uid,json=confirmUid,proto3" json:"confirm_uid,omitempty"`
	ConfirmNick          string      `protobuf:"bytes,5,opt,name=confirm_nick,json=confirmNick,proto3" json:"confirm_nick,omitempty"`
	Gid                  string      `protobuf:"bytes,6,opt,name=gid,proto3" json:"gid,omitempty"`
	GName                string      `protobuf:"bytes,7,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"`
	Reason               string      `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	Status               int32       `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	Type                 int32       `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InviteConfirmGroupMessage) Reset()         { *m = InviteConfirmGroupMessage{} }
func (m *InviteConfirmGroupMessage) String() string { return proto.CompactTextString(m) }
func (*InviteConfirmGroupMessage) ProtoMessage()    {}
func (*InviteConfirmGroupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{34}
}
func (m *InviteConfirmGroupMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteConfirmGroupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteConfirmGroupMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteConfirmGroupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteConfirmGroupMessage.Merge(m, src)
}
func (m *InviteConfirmGroupMessage) XXX_Size() int {
	return m.Size()
}
func (m *InviteConfirmGroupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteConfirmGroupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InviteConfirmGroupMessage proto.InternalMessageInfo

func (m *InviteConfirmGroupMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *InviteConfirmGroupMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *InviteConfirmGroupMessage) GetInviteUid() []*UserInfo {
	if m != nil {
		return m.InviteUid
	}
	return nil
}

func (m *InviteConfirmGroupMessage) GetConfirmUid() string {
	if m != nil {
		return m.ConfirmUid
	}
	return ""
}

func (m *InviteConfirmGroupMessage) GetConfirmNick() string {
	if m != nil {
		return m.ConfirmNick
	}
	return ""
}

func (m *InviteConfirmGroupMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *InviteConfirmGroupMessage) GetGName() string {
	if m != nil {
		return m.GName
	}
	return ""
}

func (m *InviteConfirmGroupMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *InviteConfirmGroupMessage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *InviteConfirmGroupMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

//用户不在群内、群组不存在、群组以开启禁言
type GroupTipChatMessage struct {
	Gid                  string   `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupTipChatMessage) Reset()         { *m = GroupTipChatMessage{} }
func (m *GroupTipChatMessage) String() string { return proto.CompactTextString(m) }
func (*GroupTipChatMessage) ProtoMessage()    {}
func (*GroupTipChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{35}
}
func (m *GroupTipChatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupTipChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupTipChatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupTipChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupTipChatMessage.Merge(m, src)
}
func (m *GroupTipChatMessage) XXX_Size() int {
	return m.Size()
}
func (m *GroupTipChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupTipChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GroupTipChatMessage proto.InternalMessageInfo

func (m *GroupTipChatMessage) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

//好友通知类消息
//邀请好友
type FriendInviteMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FUid                 string   `protobuf:"bytes,2,opt,name=f_uid,json=fUid,proto3" json:"f_uid,omitempty"`
	FNick                string   `protobuf:"bytes,3,opt,name=f_nick,json=fNick,proto3" json:"f_nick,omitempty"`
	FHeader              string   `protobuf:"bytes,4,opt,name=f_header,json=fHeader,proto3" json:"f_header,omitempty"`
	Reason               string   `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendInviteMessage) Reset()         { *m = FriendInviteMessage{} }
func (m *FriendInviteMessage) String() string { return proto.CompactTextString(m) }
func (*FriendInviteMessage) ProtoMessage()    {}
func (*FriendInviteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{36}
}
func (m *FriendInviteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendInviteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendInviteMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendInviteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendInviteMessage.Merge(m, src)
}
func (m *FriendInviteMessage) XXX_Size() int {
	return m.Size()
}
func (m *FriendInviteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendInviteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FriendInviteMessage proto.InternalMessageInfo

func (m *FriendInviteMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *FriendInviteMessage) GetFUid() string {
	if m != nil {
		return m.FUid
	}
	return ""
}

func (m *FriendInviteMessage) GetFNick() string {
	if m != nil {
		return m.FNick
	}
	return ""
}

func (m *FriendInviteMessage) GetFHeader() string {
	if m != nil {
		return m.FHeader
	}
	return ""
}

func (m *FriendInviteMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//好友确认好友确认
type FriendConfirmMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	AvatarFile_Name      string   `protobuf:"bytes,3,opt,name=avatar_file_Name,json=avatarFileName,proto3" json:"avatar_file_Name,omitempty"`
	WhatsUp              string   `protobuf:"bytes,4,opt,name=whatsUp,proto3" json:"whatsUp,omitempty"`
	Type                 string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Main                 string   `protobuf:"bytes,6,opt,name=main,proto3" json:"main,omitempty"`
	Sex                  int32    `protobuf:"varint,7,opt,name=sex,proto3" json:"sex,omitempty"`
	LiveStatus           int32    `protobuf:"varint,8,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`
	Uuid                 string   `protobuf:"bytes,9,opt,name=uuid,proto3" json:"uuid,omitempty"`
	FUid                 string   `protobuf:"bytes,10,opt,name=f_uid,json=fUid,proto3" json:"f_uid,omitempty"`
	Status               int32    `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	Reason               string   `protobuf:"bytes,12,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendConfirmMessage) Reset()         { *m = FriendConfirmMessage{} }
func (m *FriendConfirmMessage) String() string { return proto.CompactTextString(m) }
func (*FriendConfirmMessage) ProtoMessage()    {}
func (*FriendConfirmMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{37}
}
func (m *FriendConfirmMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendConfirmMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendConfirmMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendConfirmMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendConfirmMessage.Merge(m, src)
}
func (m *FriendConfirmMessage) XXX_Size() int {
	return m.Size()
}
func (m *FriendConfirmMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendConfirmMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FriendConfirmMessage proto.InternalMessageInfo

func (m *FriendConfirmMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *FriendConfirmMessage) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *FriendConfirmMessage) GetAvatarFile_Name() string {
	if m != nil {
		return m.AvatarFile_Name
	}
	return ""
}

func (m *FriendConfirmMessage) GetWhatsUp() string {
	if m != nil {
		return m.WhatsUp
	}
	return ""
}

func (m *FriendConfirmMessage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FriendConfirmMessage) GetMain() string {
	if m != nil {
		return m.Main
	}
	return ""
}

func (m *FriendConfirmMessage) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *FriendConfirmMessage) GetLiveStatus() int32 {
	if m != nil {
		return m.LiveStatus
	}
	return 0
}

func (m *FriendConfirmMessage) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *FriendConfirmMessage) GetFUid() string {
	if m != nil {
		return m.FUid
	}
	return ""
}

func (m *FriendConfirmMessage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *FriendConfirmMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//好友打招呼消息
type FriendSayMessage struct {
	UId                  string   `protobuf:"bytes,1,opt,name=u_id,json=uId,proto3" json:"u_id,omitempty"`
	UIcon                string   `protobuf:"bytes,2,opt,name=u_icon,json=uIcon,proto3" json:"u_icon,omitempty"`
	UNick                string   `protobuf:"bytes,3,opt,name=u_nick,json=uNick,proto3" json:"u_nick,omitempty"`
	FId                  string   `protobuf:"bytes,4,opt,name=f_id,json=fId,proto3" json:"f_id,omitempty"`
	FIcon                string   `protobuf:"bytes,5,opt,name=f_icon,json=fIcon,proto3" json:"f_icon,omitempty"`
	FNick                string   `protobuf:"bytes,6,opt,name=f_nick,json=fNick,proto3" json:"f_nick,omitempty"`
	Content              string   `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendSayMessage) Reset()         { *m = FriendSayMessage{} }
func (m *FriendSayMessage) String() string { return proto.CompactTextString(m) }
func (*FriendSayMessage) ProtoMessage()    {}
func (*FriendSayMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{38}
}
func (m *FriendSayMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendSayMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendSayMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendSayMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendSayMessage.Merge(m, src)
}
func (m *FriendSayMessage) XXX_Size() int {
	return m.Size()
}
func (m *FriendSayMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendSayMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FriendSayMessage proto.InternalMessageInfo

func (m *FriendSayMessage) GetUId() string {
	if m != nil {
		return m.UId
	}
	return ""
}

func (m *FriendSayMessage) GetUIcon() string {
	if m != nil {
		return m.UIcon
	}
	return ""
}

func (m *FriendSayMessage) GetUNick() string {
	if m != nil {
		return m.UNick
	}
	return ""
}

func (m *FriendSayMessage) GetFId() string {
	if m != nil {
		return m.FId
	}
	return ""
}

func (m *FriendSayMessage) GetFIcon() string {
	if m != nil {
		return m.FIcon
	}
	return ""
}

func (m *FriendSayMessage) GetFNick() string {
	if m != nil {
		return m.FNick
	}
	return ""
}

func (m *FriendSayMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

//好友删除
type FriendDelMessage struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FUid                 string   `protobuf:"bytes,2,opt,name=f_uid,json=fUid,proto3" json:"f_uid,omitempty"`
	Reason               string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendDelMessage) Reset()         { *m = FriendDelMessage{} }
func (m *FriendDelMessage) String() string { return proto.CompactTextString(m) }
func (*FriendDelMessage) ProtoMessage()    {}
func (*FriendDelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{39}
}
func (m *FriendDelMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendDelMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendDelMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendDelMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendDelMessage.Merge(m, src)
}
func (m *FriendDelMessage) XXX_Size() int {
	return m.Size()
}
func (m *FriendDelMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendDelMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FriendDelMessage proto.InternalMessageInfo

func (m *FriendDelMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *FriendDelMessage) GetFUid() string {
	if m != nil {
		return m.FUid
	}
	return ""
}

func (m *FriendDelMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//系统类消息
//公告消息
type NoticeMessage struct {
	Notice               string   `protobuf:"bytes,1,opt,name=notice,proto3" json:"notice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoticeMessage) Reset()         { *m = NoticeMessage{} }
func (m *NoticeMessage) String() string { return proto.CompactTextString(m) }
func (*NoticeMessage) ProtoMessage()    {}
func (*NoticeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{40}
}
func (m *NoticeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoticeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoticeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoticeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeMessage.Merge(m, src)
}
func (m *NoticeMessage) XXX_Size() int {
	return m.Size()
}
func (m *NoticeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeMessage proto.InternalMessageInfo

func (m *NoticeMessage) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

//强制下线消息
type UserForcedOffline struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserForcedOffline) Reset()         { *m = UserForcedOffline{} }
func (m *UserForcedOffline) String() string { return proto.CompactTextString(m) }
func (*UserForcedOffline) ProtoMessage()    {}
func (*UserForcedOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{41}
}
func (m *UserForcedOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserForcedOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserForcedOffline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserForcedOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserForcedOffline.Merge(m, src)
}
func (m *UserForcedOffline) XXX_Size() int {
	return m.Size()
}
func (m *UserForcedOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_UserForcedOffline.DiscardUnknown(m)
}

var xxx_messageInfo_UserForcedOffline proto.InternalMessageInfo

func (m *UserForcedOffline) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserForcedOffline) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

//注册欢迎语
type RegisterWelcomeMessage struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterWelcomeMessage) Reset()         { *m = RegisterWelcomeMessage{} }
func (m *RegisterWelcomeMessage) String() string { return proto.CompactTextString(m) }
func (*RegisterWelcomeMessage) ProtoMessage()    {}
func (*RegisterWelcomeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{42}
}
func (m *RegisterWelcomeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterWelcomeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterWelcomeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterWelcomeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterWelcomeMessage.Merge(m, src)
}
func (m *RegisterWelcomeMessage) XXX_Size() int {
	return m.Size()
}
func (m *RegisterWelcomeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterWelcomeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterWelcomeMessage proto.InternalMessageInfo

func (m *RegisterWelcomeMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

//同步消息体
type SynchroMessage struct {
	Content              string      `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Status               bool        `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	CType                ChatType    `protobuf:"varint,3,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"`
	SessionId            string      `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Sex                  SexType     `protobuf:"varint,5,opt,name=sex,proto3,enum=pb.SexType" json:"sex,omitempty"`
	SynchroType          SynchroType `protobuf:"varint,6,opt,name=synchro_type,json=synchroType,proto3,enum=pb.SynchroType" json:"synchro_type,omitempty"`
	Ext                  string      `protobuf:"bytes,7,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SynchroMessage) Reset()         { *m = SynchroMessage{} }
func (m *SynchroMessage) String() string { return proto.CompactTextString(m) }
func (*SynchroMessage) ProtoMessage()    {}
func (*SynchroMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{43}
}
func (m *SynchroMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SynchroMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SynchroMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SynchroMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SynchroMessage.Merge(m, src)
}
func (m *SynchroMessage) XXX_Size() int {
	return m.Size()
}
func (m *SynchroMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SynchroMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SynchroMessage proto.InternalMessageInfo

func (m *SynchroMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *SynchroMessage) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *SynchroMessage) GetCType() ChatType {
	if m != nil {
		return m.CType
	}
	return ChatType_SingleChat
}

func (m *SynchroMessage) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SynchroMessage) GetSex() SexType {
	if m != nil {
		return m.Sex
	}
	return SexType_Secrecy
}

func (m *SynchroMessage) GetSynchroType() SynchroType {
	if m != nil {
		return m.SynchroType
	}
	return SynchroType_UserHeader
}

func (m *SynchroMessage) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

//用户基本信息
type UserInfo struct {
	UId                  string   `protobuf:"bytes,1,opt,name=u_id,json=uId,proto3" json:"u_id,omitempty"`
	UNick                string   `protobuf:"bytes,2,opt,name=u_nick,json=uNick,proto3" json:"u_nick,omitempty"`
	UHeader              string   `protobuf:"bytes,3,opt,name=u_header,json=uHeader,proto3" json:"u_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{44}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetUId() string {
	if m != nil {
		return m.UId
	}
	return ""
}

func (m *UserInfo) GetUNick() string {
	if m != nil {
		return m.UNick
	}
	return ""
}

func (m *UserInfo) GetUHeader() string {
	if m != nil {
		return m.UHeader
	}
	return ""
}

//群组基本信息
type GroupInfo struct {
	CreateTime           int64    `protobuf:"varint,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	GId                  string   `protobuf:"bytes,2,opt,name=g_id,json=gId,proto3" json:"g_id,omitempty"`
	GStatus              int32    `protobuf:"varint,3,opt,name=g_status,json=gStatus,proto3" json:"g_status,omitempty"`
	MaxMemberCount       int32    `protobuf:"varint,4,opt,name=max_member_count,json=maxMemberCount,proto3" json:"max_member_count,omitempty"`
	MsgNoPromt           int32    `protobuf:"varint,5,opt,name=msg_no_promt,json=msgNoPromt,proto3" json:"msg_no_promt,omitempty"`
	MsgTop               int32    `protobuf:"varint,6,opt,name=msg_top,json=msgTop,proto3" json:"msg_top,omitempty"`
	IsGroupChat          int32    `protobuf:"varint,7,opt,name=is_group_chat,json=isGroupChat,proto3" json:"is_group_chat,omitempty"`
	IsNeedVerify         int32    `protobuf:"varint,8,opt,name=is_need_verify,json=isNeedVerify,proto3" json:"is_need_verify,omitempty"`
	IsPrivateChat        int32    `protobuf:"varint,9,opt,name=is_private_chat,json=isPrivateChat,proto3" json:"is_private_chat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupInfo) Reset()         { *m = GroupInfo{} }
func (m *GroupInfo) String() string { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()    {}
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_694089e97b0d27db, []int{45}
}
func (m *GroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo.Merge(m, src)
}
func (m *GroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo proto.InternalMessageInfo

func (m *GroupInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *GroupInfo) GetGId() string {
	if m != nil {
		return m.GId
	}
	return ""
}

func (m *GroupInfo) GetGStatus() int32 {
	if m != nil {
		return m.GStatus
	}
	return 0
}

func (m *GroupInfo) GetMaxMemberCount() int32 {
	if m != nil {
		return m.MaxMemberCount
	}
	return 0
}

func (m *GroupInfo) GetMsgNoPromt() int32 {
	if m != nil {
		return m.MsgNoPromt
	}
	return 0
}

func (m *GroupInfo) GetMsgTop() int32 {
	if m != nil {
		return m.MsgTop
	}
	return 0
}

func (m *GroupInfo) GetIsGroupChat() int32 {
	if m != nil {
		return m.IsGroupChat
	}
	return 0
}

func (m *GroupInfo) GetIsNeedVerify() int32 {
	if m != nil {
		return m.IsNeedVerify
	}
	return 0
}

func (m *GroupInfo) GetIsPrivateChat() int32 {
	if m != nil {
		return m.IsPrivateChat
	}
	return 0
}

func init() {
	proto.RegisterEnum("pb.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("pb.ChatType", ChatType_name, ChatType_value)
	proto.RegisterEnum("pb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("pb.ServerMsgType", ServerMsgType_name, ServerMsgType_value)
	proto.RegisterEnum("pb.SynchroType", SynchroType_name, SynchroType_value)
	proto.RegisterEnum("pb.SexType", SexType_name, SexType_value)
	proto.RegisterType((*IMMessage)(nil), "pb.IMMessage")
	proto.RegisterType((*IMOffLineMessage)(nil), "pb.IMOffLineMessage")
	proto.RegisterType((*IMPingMessage)(nil), "pb.IMPingMessage")
	proto.RegisterType((*IMPongMessage)(nil), "pb.IMPongMessage")
	proto.RegisterType((*IMAuthMessage)(nil), "pb.IMAuthMessage")
	proto.RegisterType((*IMAuthMessageACK)(nil), "pb.IMAuthMessageACK")
	proto.RegisterType((*IMChatMessageACK)(nil), "pb.IMChatMessageACK")
	proto.RegisterType((*IMChatMessage)(nil), "pb.IMChatMessage")
	proto.RegisterType((*TextMessage)(nil), "pb.TextMessage")
	proto.RegisterType((*ImageMessage)(nil), "pb.ImageMessage")
	proto.RegisterType((*VideoMessage)(nil), "pb.VideoMessage")
	proto.RegisterType((*GEOMessage)(nil), "pb.GEOMessage")
	proto.RegisterType((*VoiceMessage)(nil), "pb.VoiceMessage")
	proto.RegisterType((*FileMessage)(nil), "pb.FileMessage")
	proto.RegisterType((*CardMessage)(nil), "pb.CardMessage")
	proto.RegisterType((*SharkUrl)(nil), "pb.SharkUrl")
	proto.RegisterType((*BackDelMessage)(nil), "pb.BackDelMessage")
	proto.RegisterType((*AtMessage)(nil), "pb.AtMessage")
	proto.RegisterType((*AtInfo)(nil), "pb.AtInfo")
	proto.RegisterType((*IMServerMessage)(nil), "pb.IMServerMessage")
	proto.RegisterType((*IMChatMessageToACK)(nil), "pb.IMChatMessageToACK")
	proto.RegisterType((*ServerChatMessage)(nil), "pb.ServerChatMessage")
	proto.RegisterType((*CreateGroupMessage)(nil), "pb.CreateGroupMessage")
	proto.RegisterType((*JoinReqGroupMessage)(nil), "pb.JoinReqGroupMessage")
	proto.RegisterType((*JoinConfirmGroupMessage)(nil), "pb.JoinConfirmGroupMessage")
	proto.RegisterType((*OutGroupMessage)(nil), "pb.OutGroupMessage")
	proto.RegisterType((*KickGroupMessage)(nil), "pb.KickGroupMessage")
	proto.RegisterType((*DelGroupMessage)(nil), "pb.DelGroupMessage")
	proto.RegisterType((*TransferOwnerMessage)(nil), "pb.TransferOwnerMessage")
	proto.RegisterType((*GroupStatusMessage)(nil), "pb.GroupStatusMessage")
	proto.RegisterType((*NoticeGroupMessage)(nil), "pb.NoticeGroupMessage")
	proto.RegisterType((*NameGroupMessage)(nil), "pb.NameGroupMessage")
	proto.RegisterType((*AdminGroupMessage)(nil), "pb.AdminGroupMessage")
	proto.RegisterType((*InviteJoinRepGroupMessage)(nil), "pb.InviteJoinRepGroupMessage")
	proto.RegisterType((*InviteConfirmGroupMessage)(nil), "pb.InviteConfirmGroupMessage")
	proto.RegisterType((*GroupTipChatMessage)(nil), "pb.GroupTipChatMessage")
	proto.RegisterType((*FriendInviteMessage)(nil), "pb.FriendInviteMessage")
	proto.RegisterType((*FriendConfirmMessage)(nil), "pb.FriendConfirmMessage")
	proto.RegisterType((*FriendSayMessage)(nil), "pb.FriendSayMessage")
	proto.RegisterType((*FriendDelMessage)(nil), "pb.FriendDelMessage")
	proto.RegisterType((*NoticeMessage)(nil), "pb.NoticeMessage")
	proto.RegisterType((*UserForcedOffline)(nil), "pb.UserForcedOffline")
	proto.RegisterType((*RegisterWelcomeMessage)(nil), "pb.RegisterWelcomeMessage")
	proto.RegisterType((*SynchroMessage)(nil), "pb.SynchroMessage")
	proto.RegisterType((*UserInfo)(nil), "pb.UserInfo")
	proto.RegisterType((*GroupInfo)(nil), "pb.GroupInfo")
}

func init() { proto.RegisterFile("im_message.proto", fileDescriptor_694089e97b0d27db) }

var fileDescriptor_694089e97b0d27db = []byte{
	// 3326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x3a, 0x4b, 0x6f, 0x23, 0xc7,
	0xd1, 0x1c, 0xbe, 0x59, 0xa4, 0xc4, 0x51, 0x4b, 0x2b, 0x71, 0xdf, 0x6b, 0xfa, 0x83, 0xbd, 0x9f,
	0xbe, 0x2f, 0xeb, 0x60, 0x0d, 0x24, 0x30, 0xe0, 0xc0, 0x90, 0xb4, 0x0f, 0x2a, 0xbb, 0xab, 0x75,
	0x28, 0xc9, 0x1b, 0x18, 0x09, 0x88, 0xd9, 0x61, 0x93, 0x9a, 0x90, 0x9c, 0x61, 0x66, 0x86, 0xbb,
	0x52, 0xe0, 0xb3, 0x8f, 0x3e, 0x24, 0x17, 0x5f, 0x82, 0x20, 0x08, 0x10, 0x20, 0x97, 0x04, 0x01,
	0x72, 0x09, 0xf2, 0x07, 0xec, 0x3c, 0x9d, 0x77, 0x9c, 0x53, 0xe0, 0x9c, 0x82, 0x5c, 0x72, 0xc8,
	0x0f, 0x08, 0xaa, 0xba, 0x87, 0xd3, 0x3d, 0x33, 0x5c, 0x68, 0xed, 0x4d, 0x72, 0x62, 0x77, 0xbd,
	0xba, 0xaa, 0xba, 0xba, 0xba, 0x6a, 0x9a, 0x60, 0x3a, 0x93, 0xde, 0x84, 0x07, 0x81, 0x35, 0xe4,
	0xd7, 0xa6, 0xbe, 0x17, 0x7a, 0x2c, 0x3f, 0x7d, 0xd8, 0xfe, 0x5e, 0x09, 0x6a, 0xbb, 0xf7, 0xee,
	0x09, 0x38, 0xfb, 0x5f, 0xa8, 0xf5, 0xad, 0xd0, 0xea, 0x85, 0x27, 0x53, 0xde, 0x32, 0xae, 0x18,
	0x57, 0x97, 0xaf, 0x37, 0xae, 0x4d, 0x1f, 0x5e, 0xbb, 0x61, 0x85, 0xd6, 0xc1, 0xc9, 0x94, 0x77,
	0xab, 0x7d, 0x39, 0x62, 0x9f, 0x83, 0xa6, 0x7d, 0x64, 0x85, 0x92, 0x73, 0xdb, 0xeb, 0x9f, 0xb4,
	0xf2, 0x57, 0x8c, 0xab, 0xf5, 0xeb, 0x2b, 0xc8, 0xb0, 0x7b, 0x6f, 0x27, 0x46, 0x76, 0x72, 0xdd,
	0x24, 0x2d, 0xbb, 0x05, 0x4c, 0x01, 0x6d, 0xd9, 0x23, 0x92, 0x50, 0x20, 0x09, 0x6b, 0x29, 0x09,
	0x5b, 0x3b, 0x77, 0x3a, 0xb9, 0x6e, 0x06, 0x07, 0xbb, 0x0b, 0x6b, 0x0a, 0xf4, 0xc0, 0xdb, 0xda,
	0xb9, 0x43, 0x92, 0x8a, 0x24, 0x69, 0x3d, 0x25, 0x89, 0x28, 0x3a, 0xb9, 0x6e, 0x26, 0x17, 0x1a,
	0x65, 0xcd, 0xc2, 0x23, 0xd5, 0xa8, 0x92, 0x6a, 0xd4, 0x56, 0x8c, 0x44, 0xa3, 0x12, 0xb4, 0x68,
	0x94, 0x02, 0x8a, 0x8c, 0x2a, 0xab, 0x46, 0x29, 0x12, 0xa4, 0x51, 0x69, 0x0e, 0x54, 0x63, 0xea,
	0xb8, 0x43, 0x55, 0x8d, 0x8a, 0xaa, 0xc6, 0xeb, 0x31, 0x12, 0xd5, 0x48, 0xd0, 0x12, 0xbb, 0xa7,
	0xb3, 0x57, 0x35, 0x76, 0x4f, 0x67, 0xd7, 0x69, 0xd1, 0x0a, 0x6f, 0x30, 0xb8, 0xeb, 0xb8, 0x5c,
	0x95, 0x50, 0x53, 0xad, 0xb8, 0xaf, 0xe1, 0xd1, 0x8a, 0x34, 0x07, 0xdb, 0x81, 0x95, 0x80, 0xfb,
	0x8f, 0xb8, 0xaf, 0x8a, 0x01, 0x12, 0xb3, 0x2a, 0xc4, 0xec, 0xab, 0xe8, 0x4e, 0xae, 0x9b, 0xa6,
	0xdf, 0x06, 0xa0, 0x90, 0xc3, 0x71, 0xfb, 0x4d, 0x30, 0x93, 0x4b, 0xb3, 0x33, 0x50, 0x9e, 0x04,
	0xc3, 0x9e, 0xd3, 0xa7, 0x70, 0xad, 0x75, 0x4b, 0x93, 0x60, 0xb8, 0xdb, 0x67, 0x1b, 0x50, 0x99,
	0x05, 0xdc, 0x47, 0x78, 0x9e, 0xe0, 0x65, 0x9c, 0xee, 0xf6, 0xd9, 0x3a, 0x94, 0x03, 0x6f, 0xe6,
	0xdb, 0x9c, 0x62, 0xad, 0xd6, 0x95, 0xb3, 0xf6, 0x6b, 0xb0, 0xa4, 0xf9, 0xf5, 0x69, 0x05, 0x4b,
	0x01, 0xde, 0xc7, 0x17, 0x30, 0x41, 0x01, 0x4a, 0x78, 0x3c, 0xb5, 0x69, 0x6b, 0x50, 0x0a, 0xbd,
	0x11, 0x77, 0xa5, 0x65, 0x62, 0xa2, 0x18, 0x5c, 0xd4, 0x0c, 0x7e, 0xc7, 0x40, 0x6f, 0xea, 0xe1,
	0xf8, 0xd4, 0x4b, 0x32, 0x28, 0xda, 0x5e, 0x5f, 0xf8, 0xb2, 0xd0, 0xa5, 0x31, 0x6b, 0x41, 0x45,
	0xa6, 0x19, 0xb9, 0x62, 0x34, 0x65, 0x17, 0x00, 0x2c, 0x7b, 0xd4, 0x93, 0x2b, 0x94, 0x08, 0x59,
	0xb5, 0xec, 0xd1, 0x3d, 0x5c, 0xa4, 0xfd, 0x36, 0x29, 0xa4, 0x1f, 0xfa, 0x45, 0x0a, 0xe9, 0x92,
	0xf2, 0xba, 0x24, 0xd6, 0x82, 0x6a, 0x10, 0xe1, 0xa2, 0x5d, 0x16, 0x98, 0xe7, 0xa1, 0x6c, 0x8b,
	0xe4, 0x56, 0x8c, 0x93, 0x1b, 0x2e, 0x49, 0xc9, 0xad, 0x64, 0xe3, 0x4f, 0xfb, 0xeb, 0x15, 0xdc,
	0x09, 0x45, 0x91, 0x45, 0x5a, 0x30, 0x28, 0x0e, 0x7c, 0x6f, 0x22, 0xd7, 0xa7, 0x31, 0xc2, 0x5c,
	0xc7, 0x1e, 0xc9, 0x75, 0x69, 0xcc, 0x96, 0x21, 0x1f, 0x7a, 0xd2, 0x19, 0xf9, 0xd0, 0x63, 0x2f,
	0x43, 0x3d, 0xe4, 0xc7, 0x91, 0x74, 0x99, 0x61, 0x9a, 0xa8, 0xca, 0x41, 0x0c, 0xee, 0xe4, 0xba,
	0x2a, 0x15, 0xfb, 0x0c, 0x34, 0x9c, 0x89, 0x35, 0x8c, 0x02, 0x5f, 0x66, 0x15, 0x93, 0x0e, 0x92,
	0x02, 0xef, 0xe4, 0xba, 0x1a, 0x1d, 0xf2, 0x3d, 0x72, 0xfa, 0xdc, 0x8b, 0xf8, 0x2a, 0x31, 0xdf,
	0x1b, 0x0a, 0x1c, 0xf9, 0x54, 0x3a, 0xf6, 0x69, 0x80, 0x61, 0xcc, 0x25, 0xf2, 0xc7, 0x32, 0x72,
	0xdd, 0xbe, 0x79, 0x3f, 0xe6, 0x51, 0x68, 0x68, 0x25, 0xcf, 0xb1, 0xe7, 0x1a, 0xd6, 0x94, 0x95,
	0x14, 0x38, 0xad, 0xa4, 0xcc, 0xd1, 0x1d, 0x03, 0x67, 0x3c, 0x67, 0x83, 0xd8, 0x1d, 0xb7, 0x62,
	0x30, 0xba, 0x43, 0xa1, 0x42, 0x26, 0xdb, 0xf2, 0xfb, 0x11, 0x53, 0x3d, 0x66, 0xda, 0x89, 0xc1,
	0xc8, 0xa4, 0x50, 0xb1, 0x4d, 0xa8, 0x06, 0x47, 0x96, 0x3f, 0x3a, 0xf4, 0xc7, 0xad, 0x06, 0x71,
	0x50, 0x00, 0xec, 0x4b, 0x58, 0x27, 0xd7, 0x9d, 0xe3, 0xd9, 0xab, 0xb0, 0xfc, 0xd0, 0xb2, 0x47,
	0x37, 0xf8, 0x38, 0x5a, 0x63, 0x89, 0x38, 0x18, 0x72, 0x6c, 0x6b, 0x98, 0x4e, 0xae, 0x9b, 0xa0,
	0x65, 0x9f, 0x82, 0xda, 0x3c, 0x7c, 0x5a, 0xcb, 0xc4, 0xb8, 0x84, 0x8c, 0x5b, 0xca, 0xf6, 0xc6,
	0x14, 0x4a, 0x5c, 0x9a, 0x0b, 0xe3, 0x92, 0xbd, 0x00, 0xe5, 0x89, 0x20, 0x5a, 0x21, 0x22, 0xb2,
	0x36, 0xba, 0xc2, 0x88, 0x6e, 0x42, 0x74, 0x0c, 0x8a, 0x8e, 0xed, 0xb9, 0x2d, 0x26, 0x42, 0x10,
	0xc7, 0x18, 0xc1, 0x4e, 0xd0, 0xb3, 0xec, 0x51, 0x6b, 0xf5, 0x8a, 0x71, 0xb5, 0xda, 0x2d, 0x39,
	0xc1, 0x96, 0x3d, 0x62, 0x67, 0xa1, 0xea, 0x04, 0x3d, 0xee, 0xda, 0xfe, 0x49, 0x6b, 0x8d, 0x10,
	0x15, 0x27, 0xb8, 0x89, 0x53, 0x76, 0x0e, 0xaa, 0x81, 0x6b, 0x4d, 0xf1, 0x9a, 0x6c, 0x9d, 0xa1,
	0xe3, 0x3d, 0x9f, 0xb3, 0xf3, 0x50, 0x0b, 0xb8, 0xdb, 0xef, 0x85, 0xce, 0x84, 0xb7, 0xd6, 0x25,
	0x92, 0xbb, 0xfd, 0x03, 0x67, 0xc2, 0xb5, 0xd3, 0xb7, 0xa1, 0x9d, 0xbe, 0xf3, 0x50, 0x0b, 0xbd,
	0x9e, 0xcc, 0x46, 0x2d, 0x71, 0x68, 0x43, 0x6f, 0x9f, 0xe6, 0xa8, 0x61, 0xe8, 0xf5, 0x66, 0x4e,
	0xbf, 0x75, 0x36, 0x4a, 0x5f, 0x87, 0x4e, 0x7f, 0xbb, 0x0c, 0xc5, 0x87, 0x98, 0xfb, 0x5f, 0x81,
	0xba, 0x72, 0x38, 0x30, 0xc9, 0xd8, 0x9e, 0x1b, 0x72, 0x37, 0x94, 0x47, 0x32, 0x9a, 0x32, 0x13,
	0x0a, 0xfc, 0x38, 0x94, 0x67, 0x12, 0x87, 0xed, 0x10, 0x1a, 0xea, 0x09, 0xc1, 0x8c, 0x78, 0xc4,
	0x9d, 0xe1, 0x91, 0x60, 0x2d, 0x75, 0xe5, 0x0c, 0xfd, 0xf6, 0xd8, 0x09, 0x8f, 0x88, 0xb5, 0xd4,
	0xa5, 0x31, 0xc2, 0x02, 0xe7, 0x6b, 0xf3, 0x04, 0x87, 0x63, 0x3a, 0xe2, 0xd6, 0x24, 0xca, 0x6e,
	0x34, 0x8e, 0x56, 0x2d, 0xc5, 0xab, 0x7e, 0xc3, 0x80, 0x86, 0x7a, 0xc0, 0x70, 0xd9, 0x31, 0x77,
	0x87, 0xe1, 0x11, 0x2d, 0x5b, 0xe8, 0xca, 0xd9, 0x5c, 0x5c, 0x5e, 0x11, 0xb7, 0x0a, 0x25, 0xbb,
	0xe7, 0x4c, 0x86, 0x51, 0x1a, 0xb1, 0x77, 0x27, 0x43, 0xdc, 0x2c, 0xbb, 0x27, 0x35, 0x2f, 0x92,
	0x8e, 0x15, 0xbb, 0x23, 0x54, 0x3f, 0x83, 0xf1, 0x43, 0xca, 0x97, 0x08, 0x51, 0xb2, 0x1f, 0xa0,
	0xf6, 0x52, 0xab, 0x72, 0xac, 0xd5, 0x37, 0x0d, 0x80, 0xf8, 0x00, 0x23, 0xc1, 0xd8, 0x1d, 0x4a,
	0x17, 0xe2, 0x90, 0x20, 0xd6, 0xdc, 0x7d, 0x63, 0x2b, 0x9c, 0xeb, 0x57, 0xc8, 0xd2, 0xaf, 0xb8,
	0x40, 0xbf, 0xd2, 0x22, 0xfd, 0xca, 0x19, 0xfa, 0x55, 0x62, 0xfd, 0xee, 0x42, 0x43, 0xcd, 0x15,
	0x09, 0xa7, 0x95, 0x9e, 0xe8, 0x34, 0x29, 0xad, 0x10, 0x4b, 0xbb, 0x0d, 0x75, 0x25, 0x85, 0xcc,
	0x37, 0xd3, 0xc8, 0xd8, 0xcc, 0x27, 0x0b, 0xba, 0x09, 0x75, 0x25, 0xad, 0x20, 0xc1, 0xcc, 0x1f,
	0x47, 0x6e, 0x9b, 0xf9, 0xe3, 0x53, 0x8a, 0xf9, 0x22, 0x54, 0xa3, 0x5c, 0x93, 0x21, 0x03, 0xef,
	0x6f, 0x27, 0x1c, 0x47, 0x42, 0xc4, 0x04, 0x25, 0x8f, 0xbd, 0xa1, 0x17, 0xb9, 0x1f, 0xc7, 0x91,
	0xe4, 0x62, 0x2c, 0xf9, 0x55, 0x58, 0xd6, 0x73, 0x92, 0x76, 0x0c, 0x0d, 0xed, 0x18, 0xa6, 0x4f,
	0xc8, 0x97, 0xa0, 0xb6, 0x75, 0x8a, 0xa3, 0xf5, 0x3c, 0x54, 0xac, 0xb0, 0xe7, 0xb8, 0x03, 0xaf,
	0x95, 0xbf, 0x52, 0xb8, 0x5a, 0xbf, 0x0e, 0x22, 0xa5, 0xed, 0xba, 0x03, 0xaf, 0x5b, 0xb6, 0xe8,
	0x37, 0xc3, 0xea, 0xeb, 0x50, 0x16, 0x34, 0x6c, 0x05, 0x8a, 0xb3, 0x58, 0x9f, 0xc2, 0x6c, 0xb7,
	0x8f, 0x91, 0x31, 0xeb, 0xd1, 0x8d, 0x29, 0xad, 0x9e, 0xed, 0x39, 0xf6, 0xa8, 0xfd, 0x9d, 0x26,
	0x34, 0x13, 0xf5, 0xe1, 0xfc, 0xba, 0x35, 0x32, 0xae, 0xdb, 0xbc, 0x72, 0xdd, 0x46, 0xf9, 0xaf,
	0xa0, 0xe4, 0xbf, 0xe4, 0x15, 0xfc, 0x12, 0x80, 0xf0, 0x0e, 0xe5, 0xd3, 0x12, 0xe5, 0x53, 0xaa,
	0x8e, 0xe5, 0x92, 0xc1, 0x50, 0xb4, 0x3b, 0x81, 0x1c, 0xe9, 0x29, 0xaf, 0xfc, 0x84, 0x94, 0x57,
	0xd1, 0x7c, 0xdd, 0x01, 0x66, 0xfb, 0xdc, 0x0a, 0xf9, 0x6d, 0xdf, 0x9b, 0x4d, 0xf5, 0xdb, 0x94,
	0x9a, 0x93, 0x9d, 0x14, 0x96, 0x1a, 0x9d, 0x14, 0x94, 0xdd, 0x81, 0xd5, 0xaf, 0x78, 0x8e, 0xdb,
	0xe5, 0x5f, 0xd5, 0x44, 0x89, 0x4b, 0x76, 0x03, 0x45, 0x7d, 0x3e, 0x8d, 0xee, 0xe4, 0xba, 0x59,
	0x5c, 0xec, 0x01, 0x6c, 0x20, 0x78, 0xc7, 0x73, 0x07, 0x8e, 0x3f, 0xd1, 0x04, 0x8a, 0xeb, 0xf7,
	0x7c, 0x24, 0x30, 0x83, 0xa4, 0x93, 0xeb, 0x2e, 0xe2, 0x66, 0xaf, 0x41, 0xd3, 0x9b, 0x85, 0x9a,
	0xc0, 0x7a, 0x5c, 0xf1, 0xdf, 0xd7, 0x51, 0xd8, 0x7c, 0x24, 0xa8, 0xd9, 0x36, 0x98, 0x23, 0xc7,
	0x1e, 0x69, 0x12, 0x1a, 0x71, 0xeb, 0x71, 0x27, 0x81, 0xeb, 0xe4, 0xba, 0x29, 0x7a, 0x54, 0xa2,
	0xcf, 0xc7, 0x9a, 0x88, 0xa5, 0x58, 0x89, 0x1b, 0x3a, 0x0a, 0x95, 0x48, 0x50, 0xb3, 0x3d, 0x58,
	0x0b, 0x7d, 0xcb, 0x0d, 0x06, 0xdc, 0xbf, 0xff, 0xd8, 0x9d, 0x47, 0xa0, 0xbc, 0xc8, 0x5b, 0x54,
	0xa9, 0x65, 0xe0, 0xb1, 0xad, 0xcc, 0xe2, 0xc3, 0x28, 0x18, 0xa2, 0xfc, 0xfd, 0xd0, 0x0a, 0x67,
	0x41, 0x24, 0xad, 0x19, 0x47, 0xc1, 0xed, 0x14, 0x16, 0xa3, 0x20, 0xcd, 0x83, 0x92, 0x5c, 0x2f,
	0x74, 0x6c, 0x3d, 0x9e, 0xcc, 0x58, 0xd2, 0x5e, 0x0a, 0x8b, 0x92, 0xd2, 0x3c, 0xe8, 0x68, 0xcc,
	0x52, 0x9a, 0x9c, 0x95, 0xd8, 0xd1, 0x7b, 0x09, 0x1c, 0x3a, 0x3a, 0x49, 0xcf, 0x6e, 0xc2, 0x8a,
	0xd5, 0x9f, 0x38, 0xae, 0x26, 0x84, 0x91, 0x90, 0x33, 0x94, 0x1a, 0x92, 0x48, 0xec, 0xf1, 0x52,
	0x1c, 0xec, 0xcb, 0x70, 0xd6, 0x71, 0x1f, 0x39, 0x21, 0x17, 0x11, 0x3c, 0xd5, 0xc4, 0xad, 0x92,
	0xb8, 0x8b, 0x54, 0xe7, 0x2e, 0x22, 0xea, 0xe4, 0xba, 0x8b, 0x25, 0xc4, 0xe2, 0xb3, 0xc2, 0x7d,
	0x2d, 0x29, 0x3e, 0x3b, 0xe0, 0x17, 0x4b, 0xc0, 0x83, 0x49, 0x1b, 0x75, 0xe0, 0x4c, 0x95, 0x9e,
	0x81, 0x6a, 0x26, 0x79, 0x30, 0x6f, 0xa7, 0xd1, 0x78, 0x30, 0x33, 0xb8, 0x50, 0xd8, 0xc0, 0x77,
	0xb8, 0xdb, 0x17, 0xca, 0x44, 0xc2, 0x5a, 0xb1, 0xb0, 0x5b, 0x69, 0x34, 0x0a, 0xcb, 0xe0, 0xc2,
	0x30, 0x16, 0x60, 0xa9, 0x76, 0x24, 0xed, 0x6c, 0x1c, 0xc6, 0xb7, 0x32, 0xf0, 0x18, 0xc6, 0x59,
	0x7c, 0x18, 0x32, 0x02, 0xae, 0x14, 0xc5, 0xe7, 0xe2, 0x90, 0xb9, 0x95, 0xc0, 0x61, 0xc8, 0x24,
	0xe9, 0x63, 0x19, 0xfb, 0xd6, 0x49, 0x24, 0xe3, 0x7c, 0x52, 0x46, 0x8c, 0x8b, 0x65, 0xc4, 0x30,
	0xf6, 0x0a, 0x2c, 0x89, 0x80, 0x8e, 0x04, 0x5c, 0x88, 0xbf, 0x6e, 0xec, 0xa9, 0x88, 0x4e, 0xae,
	0xab, 0x53, 0x62, 0xc4, 0x62, 0xeb, 0x7a, 0xcb, 0xf3, 0x6d, 0xde, 0xbf, 0x3f, 0x18, 0x8c, 0x1d,
	0x97, 0xb7, 0x2e, 0xc6, 0x11, 0x7b, 0x98, 0x44, 0x62, 0xc4, 0xa6, 0x38, 0xb0, 0x39, 0x08, 0x4e,
	0x5c, 0xfb, 0xc8, 0x9f, 0x37, 0x48, 0x97, 0xe2, 0xe6, 0x60, 0x5f, 0xc3, 0x60, 0x73, 0xa0, 0xd3,
	0xb2, 0x03, 0x58, 0xf7, 0xf9, 0xd0, 0x09, 0x42, 0xee, 0x3f, 0xe0, 0x63, 0xdb, 0x9b, 0xcc, 0x0d,
	0xb9, 0x4c, 0x52, 0xce, 0xa1, 0x94, 0x6e, 0x26, 0x45, 0x27, 0xd7, 0x5d, 0xc0, 0x8b, 0xa6, 0x89,
	0xcf, 0x27, 0x6a, 0x14, 0x5e, 0x89, 0x4d, 0xdb, 0x4f, 0x22, 0xe3, 0x0f, 0x2e, 0x6a, 0x04, 0x6a,
	0x45, 0xfa, 0x73, 0x7a, 0x91, 0xbe, 0xbd, 0x04, 0xf5, 0x49, 0xfc, 0x71, 0xa6, 0xfd, 0xbe, 0x01,
	0x2c, 0xfd, 0x75, 0xed, 0x59, 0x37, 0xed, 0xd1, 0xbd, 0x5f, 0x54, 0xee, 0x7d, 0x71, 0x9f, 0x97,
	0xe6, 0xf7, 0x79, 0xdc, 0x40, 0x95, 0x17, 0x37, 0x50, 0x9a, 0x69, 0x15, 0xdd, 0xb4, 0xf6, 0x3b,
	0x79, 0x58, 0x49, 0xb9, 0x08, 0x6b, 0x5a, 0x5c, 0x8f, 0xfa, 0x12, 0x59, 0x0d, 0xe1, 0xfc, 0xd0,
	0xa1, 0x6e, 0x86, 0x50, 0x4a, 0xfd, 0x41, 0xb4, 0x58, 0xbf, 0xcc, 0x91, 0x4a, 0x21, 0x42, 0xc8,
	0x5d, 0xd9, 0x8c, 0xc9, 0x56, 0xa7, 0xa8, 0xb4, 0x3a, 0x6a, 0xe1, 0x55, 0x4a, 0x16, 0x5e, 0xa7,
	0xb0, 0x8e, 0xda, 0x43, 0x1c, 0x91, 0x69, 0x4f, 0x6c, 0x0f, 0xa9, 0x12, 0xaf, 0xea, 0x6d, 0xce,
	0x91, 0x33, 0x3c, 0xa2, 0x6a, 0xa2, 0xd4, 0xa5, 0x71, 0xfb, 0x43, 0x03, 0x58, 0xba, 0x3a, 0xa1,
	0xba, 0x55, 0x29, 0xe1, 0x9c, 0x7e, 0x66, 0x0d, 0x66, 0x42, 0x61, 0x38, 0xdf, 0x48, 0x1c, 0xa2,
	0xd1, 0xc3, 0x9e, 0xd2, 0x37, 0x95, 0x86, 0x78, 0xc5, 0xa0, 0x83, 0x87, 0xbd, 0x23, 0x6e, 0xf5,
	0xb9, 0x1f, 0x59, 0x3d, 0xec, 0xd0, 0x94, 0xfd, 0x1f, 0x80, 0xc8, 0xba, 0xe4, 0xaa, 0x32, 0x55,
	0x9c, 0x8d, 0xe8, 0x90, 0x52, 0xcd, 0x59, 0x13, 0x78, 0x74, 0xde, 0xff, 0x03, 0x50, 0x3e, 0x15,
	0xe5, 0x69, 0x25, 0xee, 0xb8, 0x49, 0x79, 0x41, 0x3d, 0x8c, 0x86, 0xed, 0xb7, 0x60, 0x35, 0xa3,
	0x5a, 0x7a, 0xd6, 0xb6, 0xad, 0x43, 0xd9, 0xe7, 0x56, 0xe0, 0xb9, 0xd2, 0x32, 0x39, 0x6b, 0xbf,
	0x6b, 0xc0, 0xc6, 0x82, 0xda, 0xea, 0xdf, 0xa0, 0x42, 0x40, 0x05, 0x84, 0xec, 0xc8, 0xe4, 0x4c,
	0x51, 0xad, 0xac, 0xa9, 0x66, 0x41, 0x33, 0x51, 0xa4, 0x7d, 0x6c, 0x8d, 0xe2, 0x25, 0x8a, 0xda,
	0x12, 0xdf, 0x35, 0xc0, 0x4c, 0x96, 0x71, 0xa7, 0x5c, 0xe4, 0x32, 0xd4, 0xbd, 0x29, 0xf7, 0x2d,
	0x19, 0x12, 0x62, 0x31, 0x90, 0x20, 0x8c, 0x82, 0xe7, 0xa0, 0x11, 0x11, 0x10, 0xb3, 0x58, 0x39,
	0x62, 0xda, 0x53, 0x14, 0x2d, 0x65, 0x29, 0xaa, 0xfb, 0xe2, 0x18, 0x9a, 0x89, 0x5a, 0xf1, 0x3f,
	0x15, 0x20, 0x03, 0x58, 0xcb, 0xaa, 0x2f, 0x9f, 0xf9, 0x56, 0xbc, 0x05, 0x2c, 0x5d, 0x79, 0x7e,
	0x92, 0x55, 0x64, 0xac, 0x15, 0x17, 0xc4, 0x9a, 0x6e, 0x65, 0x1f, 0x58, 0xba, 0x5a, 0xfd, 0x24,
	0xab, 0x8b, 0xab, 0x3e, 0xb2, 0x51, 0xcc, 0xda, 0x16, 0x98, 0xc9, 0x5a, 0xf6, 0x19, 0x6f, 0x63,
	0xfb, 0x27, 0x06, 0xac, 0xa4, 0x4a, 0xdd, 0xff, 0x6a, 0x48, 0x33, 0x28, 0xce, 0xaf, 0x8b, 0x52,
	0x97, 0xc6, 0xca, 0x36, 0x54, 0xb4, 0x6d, 0xf8, 0x81, 0x01, 0x67, 0x17, 0x56, 0xd6, 0xa7, 0xb4,
	0x42, 0x4f, 0xd5, 0x85, 0x27, 0xa7, 0x6a, 0xa9, 0x6e, 0x31, 0xcb, 0xaf, 0xa5, 0xec, 0xe3, 0xa1,
	0x1f, 0xcc, 0x6f, 0xe5, 0x23, 0x8d, 0x3f, 0x7e, 0x06, 0x7d, 0x2a, 0x8d, 0x2f, 0x43, 0xdd, 0x16,
	0x2b, 0x29, 0xb7, 0x36, 0x48, 0x90, 0xdc, 0xa4, 0x88, 0x80, 0x56, 0x12, 0x66, 0x44, 0x4c, 0xea,
	0x26, 0x95, 0xb3, 0xac, 0xae, 0x64, 0x5b, 0x5d, 0x55, 0xad, 0x56, 0x8e, 0x57, 0x4d, 0x3b, 0x5e,
	0xd1, 0x5e, 0x43, 0xbc, 0xd7, 0xed, 0x17, 0x61, 0x35, 0xa3, 0xe9, 0x88, 0x74, 0x30, 0xe6, 0x3a,
	0xb4, 0xdf, 0x36, 0x60, 0x35, 0xa3, 0xa3, 0xc8, 0x70, 0xe2, 0x2a, 0x94, 0x06, 0x64, 0x7d, 0xf4,
	0xda, 0x71, 0x28, 0x4c, 0x18, 0xf4, 0x94, 0xf7, 0x8e, 0xd2, 0x80, 0x6c, 0xc5, 0xaa, 0x29, 0xba,
	0xd4, 0xe5, 0x1b, 0xd0, 0x40, 0x5e, 0xea, 0x8b, 0x92, 0xc1, 0x8f, 0xf2, 0xb0, 0x96, 0xd5, 0x8c,
	0x9c, 0x72, 0x3b, 0xaf, 0x82, 0x69, 0x3d, 0xb2, 0x42, 0xcb, 0xef, 0x0d, 0x9c, 0x31, 0xef, 0xed,
	0xc5, 0x1f, 0x2c, 0x97, 0x05, 0xfc, 0x96, 0x33, 0xe6, 0xe4, 0xde, 0x16, 0x54, 0x1e, 0x1f, 0x59,
	0x61, 0x70, 0x38, 0x8d, 0x54, 0x93, 0xd3, 0xb9, 0x23, 0x85, 0x62, 0xe2, 0xd0, 0x30, 0x28, 0x4e,
	0x2c, 0x27, 0x0a, 0x40, 0x1a, 0xa3, 0x46, 0x01, 0x3f, 0xa6, 0x4d, 0x2b, 0x75, 0x71, 0x88, 0xf1,
	0x31, 0x76, 0x1e, 0xf1, 0x9e, 0xdc, 0x1f, 0x51, 0x59, 0x01, 0x82, 0xf6, 0xe7, 0x7b, 0x34, 0x43,
	0x2b, 0x6a, 0x42, 0xcc, 0x4c, 0x73, 0x28, 0x28, 0x0e, 0x8d, 0x37, 0xb9, 0xbe, 0x20, 0x87, 0x36,
	0x34, 0xb7, 0x7d, 0xdf, 0x00, 0x33, 0xd9, 0x33, 0x2d, 0xfc, 0xcc, 0x46, 0xc5, 0x68, 0xf4, 0x99,
	0x2d, 0xaa, 0x44, 0x67, 0xda, 0xfe, 0xd1, 0xd7, 0x37, 0x14, 0x30, 0xe8, 0xc5, 0x47, 0x74, 0xb0,
	0x2b, 0x77, 0x9a, 0x04, 0xc8, 0x23, 0x3a, 0x88, 0x04, 0xc8, 0x00, 0x28, 0xab, 0x01, 0xa0, 0x94,
	0xb2, 0x15, 0xad, 0x94, 0x6d, 0x7f, 0x21, 0xd2, 0x57, 0xe9, 0x09, 0x4f, 0x19, 0x6c, 0xb1, 0x0f,
	0x0a, 0x9a, 0x0f, 0x5e, 0x84, 0x25, 0xad, 0xeb, 0x53, 0xae, 0x02, 0x43, 0xbb, 0x0a, 0x5e, 0x81,
	0x95, 0x54, 0x7f, 0x97, 0x1d, 0x5f, 0x14, 0x07, 0x79, 0xe5, 0x40, 0x5d, 0x87, 0xf5, 0xec, 0x86,
	0x6c, 0xf1, 0xe7, 0xd2, 0xf6, 0xdf, 0x0d, 0x58, 0xd6, 0x7b, 0xc1, 0x27, 0x7c, 0x5b, 0x8d, 0x37,
	0x3e, 0x4f, 0xef, 0x30, 0xd1, 0xc6, 0xc7, 0xa5, 0x7f, 0x61, 0x71, 0xe9, 0x7f, 0x11, 0x20, 0xe0,
	0x41, 0xe0, 0x78, 0x6e, 0xbc, 0x6b, 0x35, 0x09, 0xd9, 0xed, 0xb3, 0x8b, 0x22, 0x60, 0xc5, 0x57,
	0xce, 0xba, 0xe8, 0x05, 0x8f, 0x89, 0x9f, 0xa2, 0xf7, 0x3a, 0x34, 0x64, 0x83, 0xaa, 0xf6, 0x18,
	0x4d, 0xa5, 0x95, 0x25, 0xda, 0x7a, 0x10, 0x4f, 0x32, 0xbe, 0xdc, 0xdf, 0x87, 0x6a, 0x94, 0x3a,
	0x4f, 0xff, 0x9d, 0x17, 0x33, 0xc5, 0x2c, 0xca, 0x14, 0x62, 0x57, 0x2b, 0x33, 0x91, 0x29, 0xda,
	0x3f, 0xcc, 0x43, 0x6d, 0x5e, 0xbc, 0x53, 0x0a, 0xa6, 0x66, 0x44, 0x7c, 0x81, 0x15, 0x9f, 0xf0,
	0x41, 0x80, 0xe8, 0x1b, 0xec, 0x0a, 0x14, 0x95, 0xbe, 0xb2, 0x80, 0x8d, 0x23, 0xf5, 0x16, 0xd2,
	0xab, 0x05, 0xf1, 0x20, 0x31, 0x94, 0x07, 0xf2, 0x2a, 0x98, 0x13, 0xeb, 0xb8, 0x37, 0xe1, 0x93,
	0x87, 0xdc, 0xef, 0xd9, 0xde, 0xcc, 0x8d, 0xde, 0x54, 0x96, 0x27, 0xd6, 0xf1, 0x3d, 0x02, 0xef,
	0x20, 0x94, 0x5d, 0x81, 0x06, 0x76, 0xa5, 0xae, 0xd7, 0x9b, 0xfa, 0xde, 0x24, 0x7a, 0xd9, 0x80,
	0x49, 0x30, 0xdc, 0xf3, 0x5e, 0x47, 0x08, 0xdb, 0x80, 0x0a, 0x7d, 0x49, 0xf6, 0xa6, 0xf2, 0xbe,
	0xc5, 0xee, 0xf7, 0xc0, 0x9b, 0xb2, 0x36, 0x2c, 0x39, 0x41, 0x4f, 0xb4, 0x25, 0xf4, 0x8e, 0x26,
	0x52, 0x46, 0xdd, 0x09, 0xc8, 0x2e, 0xdc, 0x45, 0xf6, 0x3f, 0xb0, 0xec, 0x04, 0x3d, 0x97, 0xf3,
	0x7e, 0xef, 0x11, 0xf7, 0x9d, 0xc1, 0x89, 0xcc, 0x1e, 0x0d, 0x27, 0xd8, 0xe3, 0xbc, 0xff, 0x06,
	0xc1, 0xd8, 0x0b, 0xd0, 0x74, 0x82, 0xde, 0xd4, 0x77, 0x1e, 0xa1, 0x07, 0x48, 0x96, 0xb8, 0x04,
	0x96, 0x9c, 0xe0, 0x75, 0x01, 0x45, 0x69, 0x9b, 0x7f, 0x33, 0xa0, 0x1a, 0xfd, 0x57, 0x87, 0x9d,
	0x81, 0x15, 0xed, 0x81, 0x1f, 0x81, 0x66, 0x8e, 0xb5, 0x60, 0x4d, 0x7f, 0xf7, 0xb7, 0x47, 0x84,
	0x31, 0x04, 0x83, 0xda, 0xcd, 0x23, 0x38, 0x2f, 0x18, 0xf4, 0x77, 0x79, 0xc2, 0x14, 0xd8, 0x39,
	0x58, 0x4f, 0xb7, 0xff, 0x84, 0x2b, 0x0a, 0x61, 0xca, 0x1f, 0x2a, 0x08, 0x5c, 0x92, 0x60, 0x4f,
	0x07, 0x97, 0xc5, 0x1a, 0xfa, 0x5f, 0x3b, 0x08, 0x53, 0x61, 0x1b, 0xb0, 0x9a, 0x78, 0x08, 0x20,
	0x44, 0x75, 0xf3, 0xb3, 0x50, 0x8d, 0xce, 0x01, 0x5b, 0x06, 0xd8, 0x77, 0xdc, 0xe1, 0x98, 0xbc,
	0x60, 0xe6, 0xd8, 0x92, 0x0c, 0x1d, 0x9a, 0x1a, 0xac, 0x01, 0xd5, 0xfb, 0x53, 0xee, 0xd2, 0x2c,
	0xbf, 0xf9, 0x0f, 0x03, 0xea, 0x8a, 0x28, 0xb6, 0x0a, 0x4d, 0xe5, 0x69, 0x51, 0x7a, 0x69, 0x0d,
	0x4c, 0xf5, 0xd1, 0x50, 0x7a, 0x68, 0x0d, 0x4c, 0xf5, 0x4d, 0x4f, 0x3a, 0x88, 0xc1, 0x72, 0xfc,
	0xa6, 0x26, 0x5d, 0x83, 0x94, 0xca, 0x43, 0x96, 0x74, 0xca, 0x2a, 0x34, 0x95, 0x07, 0x29, 0xe9,
	0x92, 0x55, 0x68, 0x2a, 0x8f, 0x4b, 0xd2, 0x21, 0x26, 0x34, 0xa2, 0xa7, 0x22, 0xe9, 0x88, 0x55,
	0x68, 0x6e, 0x5b, 0xf6, 0x48, 0x73, 0x02, 0x2e, 0x1d, 0x27, 0x52, 0x82, 0xd5, 0xd8, 0x0a, 0x2c,
	0x6d, 0x69, 0xd6, 0xc0, 0xe6, 0x8f, 0xcb, 0xb0, 0xa4, 0xbd, 0x6c, 0xe0, 0x3e, 0x68, 0x49, 0x53,
	0x9a, 0x7d, 0x09, 0xce, 0x65, 0xe7, 0x39, 0xe9, 0x80, 0x75, 0x60, 0x7a, 0x4a, 0x93, 0x2e, 0x40,
	0x1b, 0x12, 0x81, 0x53, 0x60, 0xe7, 0x61, 0x23, 0xa3, 0xb6, 0x20, 0x24, 0x67, 0x17, 0xa0, 0x95,
	0x75, 0xdf, 0x13, 0x76, 0x80, 0xf1, 0x90, 0xbc, 0x26, 0x08, 0x33, 0x8c, 0x31, 0xf1, 0x85, 0x47,
	0x98, 0x23, 0x76, 0x1e, 0xd6, 0xd3, 0xdf, 0x2b, 0x08, 0xf7, 0x9e, 0xc1, 0x2e, 0x88, 0x96, 0x3b,
	0xd1, 0xf1, 0x13, 0xf6, 0x7d, 0x83, 0x5d, 0x81, 0xf3, 0x0b, 0x1a, 0x72, 0xa2, 0xf8, 0xa9, 0xc1,
	0x5a, 0xb0, 0x9a, 0x68, 0x8c, 0x09, 0xf3, 0x33, 0x83, 0x9d, 0x85, 0xb5, 0x64, 0x3b, 0x4b, 0xa8,
	0x9f, 0x13, 0x53, 0xa2, 0x83, 0x24, 0xcc, 0x2f, 0x0c, 0x76, 0x11, 0x5a, 0x59, 0x1d, 0x1e, 0xa1,
	0x7f, 0x49, 0xe8, 0x9b, 0x41, 0xe8, 0x4d, 0xa7, 0x19, 0xdc, 0xbf, 0x32, 0xd0, 0xd2, 0x74, 0xe7,
	0x44, 0xc8, 0x0f, 0x0c, 0x76, 0x09, 0xce, 0xde, 0xf5, 0xec, 0xd1, 0x96, 0xdb, 0xdf, 0xf3, 0x52,
	0xf8, 0x5f, 0x93, 0xbe, 0xc9, 0x86, 0x88, 0x50, 0xbf, 0x31, 0xd8, 0x39, 0x38, 0x93, 0xea, 0x63,
	0x08, 0xf7, 0x5b, 0xb9, 0x26, 0xee, 0x71, 0x0a, 0xf9, 0x3b, 0x83, 0x5d, 0x86, 0x73, 0xe8, 0x3f,
	0x91, 0xad, 0x52, 0x04, 0xbf, 0x37, 0x58, 0x1b, 0x2e, 0x2e, 0xec, 0x31, 0x88, 0xe6, 0x0f, 0x0a,
	0xcd, 0xa2, 0x6d, 0xf8, 0x23, 0x39, 0x46, 0x24, 0xe7, 0x0c, 0xdb, 0xfe, 0x24, 0x6c, 0x9b, 0x8d,
	0xd3, 0x3e, 0xfb, 0x90, 0xf4, 0x27, 0xb0, 0x30, 0x42, 0x45, 0xfe, 0x99, 0x0c, 0x4f, 0x55, 0x06,
	0x84, 0xfb, 0x67, 0x61, 0xf3, 0xdb, 0x79, 0xa8, 0x2b, 0xf7, 0x20, 0xe6, 0x1a, 0xa4, 0x15, 0xb7,
	0x94, 0x99, 0xc3, 0xe4, 0x82, 0x73, 0xbc, 0xce, 0x44, 0xaa, 0xc1, 0xd9, 0xe1, 0xcc, 0xe9, 0x9b,
	0x79, 0x56, 0x87, 0x0a, 0xce, 0xf6, 0xf9, 0xb1, 0x59, 0x88, 0x50, 0xfb, 0xce, 0xd0, 0x35, 0x8b,
	0x78, 0x92, 0xf6, 0xf8, 0xe3, 0x7b, 0x78, 0x8d, 0xe0, 0x4e, 0x8a, 0x7b, 0xc9, 0x2c, 0xb1, 0x26,
	0xd4, 0x29, 0x71, 0x48, 0x40, 0x19, 0x01, 0xfb, 0x47, 0x9e, 0x3d, 0x92, 0x80, 0x0a, 0x25, 0x3b,
	0x71, 0xb7, 0x1f, 0x78, 0x53, 0xb3, 0x4a, 0xa9, 0x42, 0xcc, 0x0f, 0x09, 0x52, 0x53, 0x28, 0x6e,
	0xf0, 0xb1, 0x09, 0x24, 0x42, 0xcc, 0xbb, 0xdc, 0xea, 0x9b, 0x75, 0x4c, 0x11, 0x73, 0x16, 0x1f,
	0x41, 0x0d, 0x04, 0x89, 0x73, 0xd5, 0xe5, 0x13, 0xcb, 0x1f, 0x05, 0xe6, 0x12, 0x65, 0x2b, 0x02,
	0x6d, 0x8f, 0x2d, 0x7b, 0x34, 0x76, 0x82, 0xd0, 0x5c, 0x46, 0xa0, 0x74, 0x2f, 0x6d, 0x03, 0x5a,
	0xdd, 0xdc, 0xdc, 0x84, 0x8a, 0x2c, 0x29, 0xd0, 0xe4, 0x7d, 0x6e, 0xfb, 0xdc, 0x3e, 0x31, 0x73,
	0xac, 0x02, 0x85, 0x7b, 0x96, 0x6b, 0x1a, 0xac, 0x06, 0xa5, 0x07, 0xde, 0x84, 0xbb, 0x66, 0x7e,
	0x7b, 0xfd, 0xbd, 0x8f, 0x2e, 0x19, 0x1f, 0x7c, 0x74, 0xc9, 0xf8, 0xcb, 0x47, 0x97, 0x8c, 0x77,
	0xff, 0x7a, 0x29, 0xf7, 0x66, 0xf1, 0xda, 0x4b, 0xd3, 0x87, 0x0f, 0xcb, 0xf4, 0xa7, 0xd4, 0x97,
	0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0x62, 0x66, 0xdd, 0x2f, 0xa8, 0x2a, 0x00, 0x00,
}

func (m *IMMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DataBody != nil {
		{
			size := m.DataBody.Size()
			i -= size
			if _, err := m.DataBody.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DataType != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IMMessage_ChatMessageBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMMessage_ChatMessageBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChatMessageBody != nil {
		{
			size, err := m.ChatMessageBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *IMMessage_ChatMessageAckBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMMessage_ChatMessageAckBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChatMessageAckBody != nil {
		{
			size, err := m.ChatMessageAckBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *IMMessage_ChatMessageToACKBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMMessage_ChatMessageToACKBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChatMessageToACKBody != nil {
		{
			size, err := m.ChatMessageToACKBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *IMMessage_AuthMessageBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMMessage_AuthMessageBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthMessageBody != nil {
		{
			size, err := m.AuthMessageBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *IMMessage_AuthMessageAckBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMMessage_AuthMessageAckBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthMessageAckBody != nil {
		{
			size, err := m.AuthMessageAckBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *IMMessage_PingMessageBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMMessage_PingMessageBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PingMessageBody != nil {
		{
			size, err := m.PingMessageBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *IMMessage_PongMessageBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMMessage_PongMessageBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PongMessageBody != nil {
		{
			size, err := m.PongMessageBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *IMMessage_OffLineMessageBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMMessage_OffLineMessageBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OffLineMessageBody != nil {
		{
			size, err := m.OffLineMessageBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *IMMessage_ServerMessageBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMMessage_ServerMessageBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServerMessageBody != nil {
		{
			size, err := m.ServerMessageBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *IMOffLineMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMOffLineMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMOffLineMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IMPingMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMPingMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMPingMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IMPongMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMPongMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMPongMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IMAuthMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMAuthMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMAuthMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IMAuthMessageACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMAuthMessageACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMAuthMessageACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AckMsgId) > 0 {
		i -= len(m.AckMsgId)
		copy(dAtA[i:], m.AckMsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.AckMsgId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Code != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IMChatMessageACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMChatMessageACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessageACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CType != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.CType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SMsgId) > 0 {
		i -= len(m.SMsgId)
		copy(dAtA[i:], m.SMsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.SMsgId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AckMsgId) > 0 {
		i -= len(m.AckMsgId)
		copy(dAtA[i:], m.AckMsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.AckMsgId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IMChatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMChatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToUid) > 0 {
		i -= len(m.ToUid)
		copy(dAtA[i:], m.ToUid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.ToUid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.ToSource) > 0 {
		i -= len(m.ToSource)
		copy(dAtA[i:], m.ToSource)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.ToSource)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.SMsgId) > 0 {
		i -= len(m.SMsgId)
		copy(dAtA[i:], m.SMsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.SMsgId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.SendTime != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Snapchat != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Snapchat))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.IsEncry {
		i--
		if m.IsEncry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.IsAck {
		i--
		if m.IsAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.MType != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.MType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CType != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.CType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IMChatMessage_TextMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage_TextMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TextMessage != nil {
		{
			size, err := m.TextMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *IMChatMessage_ImageMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage_ImageMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ImageMessage != nil {
		{
			size, err := m.ImageMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *IMChatMessage_VideoMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage_VideoMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VideoMessage != nil {
		{
			size, err := m.VideoMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *IMChatMessage_GeoMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage_GeoMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GeoMessage != nil {
		{
			size, err := m.GeoMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *IMChatMessage_VoiceMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage_VoiceMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VoiceMessage != nil {
		{
			size, err := m.VoiceMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *IMChatMessage_FileMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage_FileMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FileMessage != nil {
		{
			size, err := m.FileMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *IMChatMessage_CardMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage_CardMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardMessage != nil {
		{
			size, err := m.CardMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *IMChatMessage_SharkUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage_SharkUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SharkUrl != nil {
		{
			size, err := m.SharkUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *IMChatMessage_BackDelMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage_BackDelMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BackDelMessage != nil {
		{
			size, err := m.BackDelMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *IMChatMessage_AtMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessage_AtMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AtMessage != nil {
		{
			size, err := m.AtMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *TextMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Size_ != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if m.With != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.With))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x32
	}
	if m.CWith != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.CWith))
		i--
		dAtA[i] = 0x28
	}
	if m.CHeight != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.CHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CImg) > 0 {
		i -= len(m.CImg)
		copy(dAtA[i:], m.CImg)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.CImg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Length != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GEOMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GEOMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GEOMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CWith != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.CWith))
		i--
		dAtA[i] = 0x30
	}
	if m.CHeight != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.CHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CImg) > 0 {
		i -= len(m.CImg)
		copy(dAtA[i:], m.CImg)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.CImg)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Lat) > 0 {
		i -= len(m.Lat)
		copy(dAtA[i:], m.Lat)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Lat)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Lng) > 0 {
		i -= len(m.Lng)
		copy(dAtA[i:], m.Lng)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Lng)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoiceMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoiceMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoiceMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Length != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Size_ != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SharkUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SharkUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SharkUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackDelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackDelMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackDelMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SMsgId) > 0 {
		i -= len(m.SMsgId)
		copy(dAtA[i:], m.SMsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.SMsgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AtMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AtMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AtInfo) > 0 {
		for iNdEx := len(m.AtInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AtInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AtInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AtInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UNick) > 0 {
		i -= len(m.UNick)
		copy(dAtA[i:], m.UNick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UNick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UId) > 0 {
		i -= len(m.UId)
		copy(dAtA[i:], m.UId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IMServerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMServerMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToSource) > 0 {
		i -= len(m.ToSource)
		copy(dAtA[i:], m.ToSource)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.ToSource)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.MessageBody != nil {
		{
			size := m.MessageBody.Size()
			i -= size
			if _, err := m.MessageBody.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.SMsgId) > 0 {
		i -= len(m.SMsgId)
		copy(dAtA[i:], m.SMsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.SMsgId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SendTime != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x30
	}
	if m.SMsgType != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.SMsgType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IMServerMessage_CreateGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_CreateGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateGroupMessage != nil {
		{
			size, err := m.CreateGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_JoinReqGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_JoinReqGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinReqGroupMessage != nil {
		{
			size, err := m.JoinReqGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_JoinConfirmGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_JoinConfirmGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinConfirmGroupMessage != nil {
		{
			size, err := m.JoinConfirmGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_OutGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_OutGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutGroupMessage != nil {
		{
			size, err := m.OutGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_KickGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_KickGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KickGroupMessage != nil {
		{
			size, err := m.KickGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_DelGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_DelGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DelGroupMessage != nil {
		{
			size, err := m.DelGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_TransferOwnerMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_TransferOwnerMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TransferOwnerMessage != nil {
		{
			size, err := m.TransferOwnerMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_GroupStatusMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_GroupStatusMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GroupStatusMessage != nil {
		{
			size, err := m.GroupStatusMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_NoticeGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_NoticeGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoticeGroupMessage != nil {
		{
			size, err := m.NoticeGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_NameGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_NameGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NameGroupMessage != nil {
		{
			size, err := m.NameGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_AdminGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_AdminGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdminGroupMessage != nil {
		{
			size, err := m.AdminGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_InviteJoinRepGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_InviteJoinRepGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InviteJoinRepGroupMessage != nil {
		{
			size, err := m.InviteJoinRepGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_InviteConfirmGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_InviteConfirmGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InviteConfirmGroupMessage != nil {
		{
			size, err := m.InviteConfirmGroupMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_GroupTipChatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_GroupTipChatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GroupTipChatMessage != nil {
		{
			size, err := m.GroupTipChatMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_FriendInviteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_FriendInviteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FriendInviteMessage != nil {
		{
			size, err := m.FriendInviteMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_FriendConfirmMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_FriendConfirmMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FriendConfirmMessage != nil {
		{
			size, err := m.FriendConfirmMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_FriendDelMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_FriendDelMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FriendDelMessage != nil {
		{
			size, err := m.FriendDelMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_FriendSayMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_FriendSayMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FriendSayMessage != nil {
		{
			size, err := m.FriendSayMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_NoticeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_NoticeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoticeMessage != nil {
		{
			size, err := m.NoticeMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_UserForcedOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_UserForcedOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserForcedOffline != nil {
		{
			size, err := m.UserForcedOffline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_SynchroMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_SynchroMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SynchroMessage != nil {
		{
			size, err := m.SynchroMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_RegisterWelcomeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_RegisterWelcomeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegisterWelcomeMessage != nil {
		{
			size, err := m.RegisterWelcomeMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *IMServerMessage_ServerChatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMServerMessage_ServerChatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServerChatMessage != nil {
		{
			size, err := m.ServerChatMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *IMChatMessageToACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IMChatMessageToACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IMChatMessageToACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToSource) > 0 {
		i -= len(m.ToSource)
		copy(dAtA[i:], m.ToSource)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.ToSource)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CType != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.CType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SMsgId) > 0 {
		i -= len(m.SMsgId)
		copy(dAtA[i:], m.SMsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.SMsgId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AckMsgId) > 0 {
		i -= len(m.AckMsgId)
		copy(dAtA[i:], m.AckMsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.AckMsgId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerChatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerChatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerChatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.High != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.High))
		i--
		dAtA[i] = 0x48
	}
	if m.With != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.With))
		i--
		dAtA[i] = 0x40
	}
	if m.M_Type != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.M_Type))
		i--
		dAtA[i] = 0x38
	}
	if m.CType != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.CType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ToUid) > 0 {
		i -= len(m.ToUid)
		copy(dAtA[i:], m.ToUid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.ToUid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromIcon) > 0 {
		i -= len(m.FromIcon)
		copy(dAtA[i:], m.FromIcon)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FromIcon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromNick) > 0 {
		i -= len(m.FromNick)
		copy(dAtA[i:], m.FromNick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FromNick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromUid) > 0 {
		i -= len(m.FromUid)
		copy(dAtA[i:], m.FromUid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FromUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupInfo != nil {
		{
			size, err := m.GroupInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InviteUid) > 0 {
		for iNdEx := len(m.InviteUid) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InviteUid[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.GHeader) > 0 {
		i -= len(m.GHeader)
		copy(dAtA[i:], m.GHeader)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.GHeader)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GName) > 0 {
		i -= len(m.GName)
		copy(dAtA[i:], m.GName)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.GName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinReqGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinReqGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinReqGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GName) > 0 {
		i -= len(m.GName)
		copy(dAtA[i:], m.GName)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.GName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinConfirmGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinConfirmGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinConfirmGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.GName) > 0 {
		i -= len(m.GName)
		copy(dAtA[i:], m.GName)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.GName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KickGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OperateNick) > 0 {
		i -= len(m.OperateNick)
		copy(dAtA[i:], m.OperateNick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.OperateNick)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperateUid) > 0 {
		i -= len(m.OperateUid)
		copy(dAtA[i:], m.OperateUid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.OperateUid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GName) > 0 {
		i -= len(m.GName)
		copy(dAtA[i:], m.GName)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.GName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferOwnerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferOwnerMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferOwnerMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupStatusMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupStatusMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupStatusMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoticeGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoticeGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notice) > 0 {
		i -= len(m.Notice)
		copy(dAtA[i:], m.Notice)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Notice)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GName) > 0 {
		i -= len(m.GName)
		copy(dAtA[i:], m.GName)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.GName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Type != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OperateNick) > 0 {
		i -= len(m.OperateNick)
		copy(dAtA[i:], m.OperateNick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.OperateNick)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperateUid) > 0 {
		i -= len(m.OperateUid)
		copy(dAtA[i:], m.OperateUid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.OperateUid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InviteJoinRepGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteJoinRepGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteJoinRepGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GName) > 0 {
		i -= len(m.GName)
		copy(dAtA[i:], m.GName)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.GName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InviteUid) > 0 {
		for iNdEx := len(m.InviteUid) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InviteUid[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InviteConfirmGroupMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteConfirmGroupMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteConfirmGroupMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GName) > 0 {
		i -= len(m.GName)
		copy(dAtA[i:], m.GName)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.GName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConfirmNick) > 0 {
		i -= len(m.ConfirmNick)
		copy(dAtA[i:], m.ConfirmNick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.ConfirmNick)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConfirmUid) > 0 {
		i -= len(m.ConfirmUid)
		copy(dAtA[i:], m.ConfirmUid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.ConfirmUid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InviteUid) > 0 {
		for iNdEx := len(m.InviteUid) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InviteUid[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupTipChatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupTipChatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupTipChatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendInviteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendInviteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendInviteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FHeader) > 0 {
		i -= len(m.FHeader)
		copy(dAtA[i:], m.FHeader)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FHeader)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FNick) > 0 {
		i -= len(m.FNick)
		copy(dAtA[i:], m.FNick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FNick)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FUid) > 0 {
		i -= len(m.FUid)
		copy(dAtA[i:], m.FUid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FUid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendConfirmMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendConfirmMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendConfirmMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x62
	}
	if m.Status != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x58
	}
	if len(m.FUid) > 0 {
		i -= len(m.FUid)
		copy(dAtA[i:], m.FUid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FUid)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x4a
	}
	if m.LiveStatus != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.LiveStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.Sex != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Main) > 0 {
		i -= len(m.Main)
		copy(dAtA[i:], m.Main)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Main)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WhatsUp) > 0 {
		i -= len(m.WhatsUp)
		copy(dAtA[i:], m.WhatsUp)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.WhatsUp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AvatarFile_Name) > 0 {
		i -= len(m.AvatarFile_Name)
		copy(dAtA[i:], m.AvatarFile_Name)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.AvatarFile_Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendSayMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendSayMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendSayMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FNick) > 0 {
		i -= len(m.FNick)
		copy(dAtA[i:], m.FNick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FNick)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FIcon) > 0 {
		i -= len(m.FIcon)
		copy(dAtA[i:], m.FIcon)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FIcon)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FId) > 0 {
		i -= len(m.FId)
		copy(dAtA[i:], m.FId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UNick) > 0 {
		i -= len(m.UNick)
		copy(dAtA[i:], m.UNick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UNick)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UIcon) > 0 {
		i -= len(m.UIcon)
		copy(dAtA[i:], m.UIcon)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UIcon)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UId) > 0 {
		i -= len(m.UId)
		copy(dAtA[i:], m.UId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendDelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendDelMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendDelMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FUid) > 0 {
		i -= len(m.FUid)
		copy(dAtA[i:], m.FUid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.FUid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoticeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoticeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notice) > 0 {
		i -= len(m.Notice)
		copy(dAtA[i:], m.Notice)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Notice)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserForcedOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserForcedOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserForcedOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterWelcomeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterWelcomeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterWelcomeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SynchroMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SynchroMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SynchroMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SynchroType != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.SynchroType))
		i--
		dAtA[i] = 0x30
	}
	if m.Sex != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x22
	}
	if m.CType != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.CType))
		i--
		dAtA[i] = 0x18
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UHeader) > 0 {
		i -= len(m.UHeader)
		copy(dAtA[i:], m.UHeader)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UHeader)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UNick) > 0 {
		i -= len(m.UNick)
		copy(dAtA[i:], m.UNick)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UNick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UId) > 0 {
		i -= len(m.UId)
		copy(dAtA[i:], m.UId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.UId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsPrivateChat != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.IsPrivateChat))
		i--
		dAtA[i] = 0x48
	}
	if m.IsNeedVerify != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.IsNeedVerify))
		i--
		dAtA[i] = 0x40
	}
	if m.IsGroupChat != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.IsGroupChat))
		i--
		dAtA[i] = 0x38
	}
	if m.MsgTop != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.MsgTop))
		i--
		dAtA[i] = 0x30
	}
	if m.MsgNoPromt != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.MsgNoPromt))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxMemberCount != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.MaxMemberCount))
		i--
		dAtA[i] = 0x20
	}
	if m.GStatus != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.GStatus))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GId) > 0 {
		i -= len(m.GId)
		copy(dAtA[i:], m.GId)
		i = encodeVarintImMessage(dAtA, i, uint64(len(m.GId)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreateTime != 0 {
		i = encodeVarintImMessage(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintImMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovImMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IMMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != 0 {
		n += 1 + sovImMessage(uint64(m.DataType))
	}
	if m.DataBody != nil {
		n += m.DataBody.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMMessage_ChatMessageBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatMessageBody != nil {
		l = m.ChatMessageBody.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMMessage_ChatMessageAckBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatMessageAckBody != nil {
		l = m.ChatMessageAckBody.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMMessage_ChatMessageToACKBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatMessageToACKBody != nil {
		l = m.ChatMessageToACKBody.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMMessage_AuthMessageBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthMessageBody != nil {
		l = m.AuthMessageBody.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMMessage_AuthMessageAckBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthMessageAckBody != nil {
		l = m.AuthMessageAckBody.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMMessage_PingMessageBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingMessageBody != nil {
		l = m.PingMessageBody.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMMessage_PongMessageBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PongMessageBody != nil {
		l = m.PongMessageBody.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMMessage_OffLineMessageBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OffLineMessageBody != nil {
		l = m.OffLineMessageBody.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMMessage_ServerMessageBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerMessageBody != nil {
		l = m.ServerMessageBody.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMOffLineMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMPingMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMPongMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMAuthMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMAuthMessageACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovImMessage(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.AckMsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMChatMessageACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.AckMsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.SMsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.CType != 0 {
		n += 1 + sovImMessage(uint64(m.CType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMChatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Body != nil {
		n += m.Body.Size()
	}
	if m.CType != 0 {
		n += 2 + sovImMessage(uint64(m.CType))
	}
	if m.MType != 0 {
		n += 2 + sovImMessage(uint64(m.MType))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 2 + l + sovImMessage(uint64(l))
	}
	if m.IsAck {
		n += 3
	}
	if m.IsEncry {
		n += 3
	}
	if m.Snapchat != 0 {
		n += 2 + sovImMessage(uint64(m.Snapchat))
	}
	if m.SendTime != 0 {
		n += 2 + sovImMessage(uint64(m.SendTime))
	}
	l = len(m.SMsgId)
	if l > 0 {
		n += 2 + l + sovImMessage(uint64(l))
	}
	l = len(m.ToSource)
	if l > 0 {
		n += 2 + l + sovImMessage(uint64(l))
	}
	l = len(m.ToUid)
	if l > 0 {
		n += 2 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMChatMessage_TextMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TextMessage != nil {
		l = m.TextMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMChatMessage_ImageMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImageMessage != nil {
		l = m.ImageMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMChatMessage_VideoMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VideoMessage != nil {
		l = m.VideoMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMChatMessage_GeoMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GeoMessage != nil {
		l = m.GeoMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMChatMessage_VoiceMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoiceMessage != nil {
		l = m.VoiceMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMChatMessage_FileMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileMessage != nil {
		l = m.FileMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMChatMessage_CardMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardMessage != nil {
		l = m.CardMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMChatMessage_SharkUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SharkUrl != nil {
		l = m.SharkUrl.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMChatMessage_BackDelMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BackDelMessage != nil {
		l = m.BackDelMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMChatMessage_AtMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AtMessage != nil {
		l = m.AtMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *TextMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovImMessage(uint64(m.Height))
	}
	if m.With != 0 {
		n += 1 + sovImMessage(uint64(m.With))
	}
	if m.Size_ != 0 {
		n += 1 + sovImMessage(uint64(m.Size_))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovImMessage(uint64(m.Length))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.CImg)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.CHeight != 0 {
		n += 1 + sovImMessage(uint64(m.CHeight))
	}
	if m.CWith != 0 {
		n += 1 + sovImMessage(uint64(m.CWith))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GEOMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Lng)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Lat)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.CImg)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.CHeight != 0 {
		n += 1 + sovImMessage(uint64(m.CHeight))
	}
	if m.CWith != 0 {
		n += 1 + sovImMessage(uint64(m.CWith))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoiceMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovImMessage(uint64(m.Length))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovImMessage(uint64(m.Size_))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SharkUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackDelMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SMsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AtMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if len(m.AtInfo) > 0 {
		for _, e := range m.AtInfo {
			l = e.Size()
			n += 1 + l + sovImMessage(uint64(l))
		}
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AtInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.UNick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMServerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.SMsgType != 0 {
		n += 1 + sovImMessage(uint64(m.SMsgType))
	}
	if m.SendTime != 0 {
		n += 1 + sovImMessage(uint64(m.SendTime))
	}
	l = len(m.SMsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.MessageBody != nil {
		n += m.MessageBody.Size()
	}
	l = len(m.ToSource)
	if l > 0 {
		n += 2 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IMServerMessage_CreateGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateGroupMessage != nil {
		l = m.CreateGroupMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_JoinReqGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinReqGroupMessage != nil {
		l = m.JoinReqGroupMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_JoinConfirmGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinConfirmGroupMessage != nil {
		l = m.JoinConfirmGroupMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_OutGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutGroupMessage != nil {
		l = m.OutGroupMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_KickGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KickGroupMessage != nil {
		l = m.KickGroupMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_DelGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelGroupMessage != nil {
		l = m.DelGroupMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_TransferOwnerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransferOwnerMessage != nil {
		l = m.TransferOwnerMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_GroupStatusMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupStatusMessage != nil {
		l = m.GroupStatusMessage.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_NoticeGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoticeGroupMessage != nil {
		l = m.NoticeGroupMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_NameGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NameGroupMessage != nil {
		l = m.NameGroupMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_AdminGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdminGroupMessage != nil {
		l = m.AdminGroupMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_InviteJoinRepGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InviteJoinRepGroupMessage != nil {
		l = m.InviteJoinRepGroupMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_InviteConfirmGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InviteConfirmGroupMessage != nil {
		l = m.InviteConfirmGroupMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_GroupTipChatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupTipChatMessage != nil {
		l = m.GroupTipChatMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_FriendInviteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendInviteMessage != nil {
		l = m.FriendInviteMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_FriendConfirmMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendConfirmMessage != nil {
		l = m.FriendConfirmMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_FriendDelMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendDelMessage != nil {
		l = m.FriendDelMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_FriendSayMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendSayMessage != nil {
		l = m.FriendSayMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_NoticeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoticeMessage != nil {
		l = m.NoticeMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_UserForcedOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserForcedOffline != nil {
		l = m.UserForcedOffline.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_SynchroMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SynchroMessage != nil {
		l = m.SynchroMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_RegisterWelcomeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterWelcomeMessage != nil {
		l = m.RegisterWelcomeMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMServerMessage_ServerChatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerChatMessage != nil {
		l = m.ServerChatMessage.Size()
		n += 2 + l + sovImMessage(uint64(l))
	}
	return n
}
func (m *IMChatMessageToACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.AckMsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.SMsgId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.CType != 0 {
		n += 1 + sovImMessage(uint64(m.CType))
	}
	l = len(m.ToSource)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerChatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromUid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.FromNick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.FromIcon)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.ToUid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.CType != 0 {
		n += 1 + sovImMessage(uint64(m.CType))
	}
	if m.M_Type != 0 {
		n += 1 + sovImMessage(uint64(m.M_Type))
	}
	if m.With != 0 {
		n += 1 + sovImMessage(uint64(m.With))
	}
	if m.High != 0 {
		n += 1 + sovImMessage(uint64(m.High))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.GName)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.GHeader)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if len(m.InviteUid) > 0 {
		for _, e := range m.InviteUid {
			l = e.Size()
			n += 1 + l + sovImMessage(uint64(l))
		}
	}
	if m.GroupInfo != nil {
		l = m.GroupInfo.Size()
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JoinReqGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.GName)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JoinConfirmGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.GName)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovImMessage(uint64(m.Status))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OutGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KickGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.OperateUid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.OperateNick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.GName)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransferOwnerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupStatusMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovImMessage(uint64(m.Status))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoticeGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NameGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.GName)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.OperateUid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.OperateNick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovImMessage(uint64(m.Type))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InviteJoinRepGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if len(m.InviteUid) > 0 {
		for _, e := range m.InviteUid {
			l = e.Size()
			n += 1 + l + sovImMessage(uint64(l))
		}
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.GName)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InviteConfirmGroupMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if len(m.InviteUid) > 0 {
		for _, e := range m.InviteUid {
			l = e.Size()
			n += 1 + l + sovImMessage(uint64(l))
		}
	}
	l = len(m.ConfirmUid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.ConfirmNick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.GName)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovImMessage(uint64(m.Status))
	}
	if m.Type != 0 {
		n += 1 + sovImMessage(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupTipChatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendInviteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.FUid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.FNick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.FHeader)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendConfirmMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.AvatarFile_Name)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.WhatsUp)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Main)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovImMessage(uint64(m.Sex))
	}
	if m.LiveStatus != 0 {
		n += 1 + sovImMessage(uint64(m.LiveStatus))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.FUid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovImMessage(uint64(m.Status))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendSayMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.UIcon)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.UNick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.FId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.FIcon)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.FNick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendDelMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.FUid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoticeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserForcedOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovImMessage(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterWelcomeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SynchroMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Status {
		n += 2
	}
	if m.CType != 0 {
		n += 1 + sovImMessage(uint64(m.CType))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovImMessage(uint64(m.Sex))
	}
	if m.SynchroType != 0 {
		n += 1 + sovImMessage(uint64(m.SynchroType))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.UNick)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	l = len(m.UHeader)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateTime != 0 {
		n += 1 + sovImMessage(uint64(m.CreateTime))
	}
	l = len(m.GId)
	if l > 0 {
		n += 1 + l + sovImMessage(uint64(l))
	}
	if m.GStatus != 0 {
		n += 1 + sovImMessage(uint64(m.GStatus))
	}
	if m.MaxMemberCount != 0 {
		n += 1 + sovImMessage(uint64(m.MaxMemberCount))
	}
	if m.MsgNoPromt != 0 {
		n += 1 + sovImMessage(uint64(m.MsgNoPromt))
	}
	if m.MsgTop != 0 {
		n += 1 + sovImMessage(uint64(m.MsgTop))
	}
	if m.IsGroupChat != 0 {
		n += 1 + sovImMessage(uint64(m.IsGroupChat))
	}
	if m.IsNeedVerify != 0 {
		n += 1 + sovImMessage(uint64(m.IsNeedVerify))
	}
	if m.IsPrivateChat != 0 {
		n += 1 + sovImMessage(uint64(m.IsPrivateChat))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImMessage(x uint64) (n int) {
	return sovImMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IMMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMessageBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IMChatMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DataBody = &IMMessage_ChatMessageBody{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMessageAckBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IMChatMessageACK{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DataBody = &IMMessage_ChatMessageAckBody{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMessageToACKBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IMChatMessageToACK{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DataBody = &IMMessage_ChatMessageToACKBody{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthMessageBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IMAuthMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DataBody = &IMMessage_AuthMessageBody{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthMessageAckBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IMAuthMessageACK{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DataBody = &IMMessage_AuthMessageAckBody{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingMessageBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IMPingMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DataBody = &IMMessage_PingMessageBody{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PongMessageBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IMPongMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DataBody = &IMMessage_PongMessageBody{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffLineMessageBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IMOffLineMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DataBody = &IMMessage_OffLineMessageBody{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMessageBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IMServerMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DataBody = &IMMessage_ServerMessageBody{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMOffLineMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMOffLineMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMOffLineMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMPingMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMPingMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMPingMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMPongMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMPongMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMPongMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMAuthMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMAuthMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMAuthMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMAuthMessageACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMAuthMessageACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMAuthMessageACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckMsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckMsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMChatMessageACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMChatMessageACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMChatMessageACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckMsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckMsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SMsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CType", wireType)
			}
			m.CType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMChatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMChatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMChatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TextMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &IMChatMessage_TextMessage{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImageMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &IMChatMessage_ImageMessage{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VideoMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &IMChatMessage_VideoMessage{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GEOMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &IMChatMessage_GeoMessage{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoiceMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VoiceMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &IMChatMessage_VoiceMessage{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FileMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &IMChatMessage_FileMessage{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &IMChatMessage_CardMessage{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharkUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SharkUrl{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &IMChatMessage_SharkUrl{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackDelMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BackDelMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &IMChatMessage_BackDelMessage{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AtMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &IMChatMessage_AtMessage{v}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CType", wireType)
			}
			m.CType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAck = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEncry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEncry = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapchat", wireType)
			}
			m.Snapchat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Snapchat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SMsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field With", wireType)
			}
			m.With = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.With |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CHeight", wireType)
			}
			m.CHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CWith", wireType)
			}
			m.CWith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CWith |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GEOMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GEOMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GEOMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CHeight", wireType)
			}
			m.CHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CWith", wireType)
			}
			m.CWith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CWith |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoiceMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoiceMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoiceMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SharkUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SharkUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SharkUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackDelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackDelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackDelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SMsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AtInfo = append(m.AtInfo, &AtInfo{})
			if err := m.AtInfo[len(m.AtInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMServerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMServerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMServerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMsgType", wireType)
			}
			m.SMsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SMsgType |= ServerMsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SMsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_CreateGroupMessage{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinReqGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinReqGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_JoinReqGroupMessage{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinConfirmGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinConfirmGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_JoinConfirmGroupMessage{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OutGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_OutGroupMessage{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KickGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_KickGroupMessage{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DelGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_DelGroupMessage{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferOwnerMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransferOwnerMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_TransferOwnerMessage{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupStatusMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GroupStatusMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_GroupStatusMessage{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoticeGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_NoticeGroupMessage{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NameGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_NameGroupMessage{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AdminGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_AdminGroupMessage{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteJoinRepGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InviteJoinRepGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_InviteJoinRepGroupMessage{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteConfirmGroupMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InviteConfirmGroupMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_InviteConfirmGroupMessage{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupTipChatMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GroupTipChatMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_GroupTipChatMessage{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendInviteMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FriendInviteMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_FriendInviteMessage{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendConfirmMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FriendConfirmMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_FriendConfirmMessage{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendDelMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FriendDelMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_FriendDelMessage{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendSayMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FriendSayMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_FriendSayMessage{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoticeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_NoticeMessage{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserForcedOffline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserForcedOffline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_UserForcedOffline{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynchroMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SynchroMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_SynchroMessage{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterWelcomeMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterWelcomeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_RegisterWelcomeMessage{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerChatMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServerChatMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageBody = &IMServerMessage_ServerChatMessage{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IMChatMessageToACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IMChatMessageToACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IMChatMessageToACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckMsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckMsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SMsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CType", wireType)
			}
			m.CType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerChatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerChatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerChatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CType", wireType)
			}
			m.CType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field M_Type", wireType)
			}
			m.M_Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.M_Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field With", wireType)
			}
			m.With = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.With |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GHeader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GHeader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteUid = append(m.InviteUid, &UserInfo{})
			if err := m.InviteUid[len(m.InviteUid)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupInfo == nil {
				m.GroupInfo = &GroupInfo{}
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinReqGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinReqGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinReqGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinConfirmGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinConfirmGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinConfirmGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperateUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperateNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferOwnerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferOwnerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferOwnerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupStatusMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupStatusMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupStatusMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperateUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperateNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteJoinRepGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteJoinRepGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteJoinRepGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteUid = append(m.InviteUid, &UserInfo{})
			if err := m.InviteUid[len(m.InviteUid)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteConfirmGroupMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteConfirmGroupMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteConfirmGroupMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteUid = append(m.InviteUid, &UserInfo{})
			if err := m.InviteUid[len(m.InviteUid)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupTipChatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupTipChatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupTipChatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendInviteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendInviteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendInviteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FHeader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FHeader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendConfirmMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendConfirmMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendConfirmMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFile_Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarFile_Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhatsUp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhatsUp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Main = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendSayMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendSayMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendSayMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendDelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendDelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendDelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserForcedOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserForcedOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserForcedOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterWelcomeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterWelcomeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterWelcomeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SynchroMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SynchroMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SynchroMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CType", wireType)
			}
			m.CType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= SexType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynchroType", wireType)
			}
			m.SynchroType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SynchroType |= SynchroType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UHeader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UHeader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GStatus", wireType)
			}
			m.GStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemberCount", wireType)
			}
			m.MaxMemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMemberCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgNoPromt", wireType)
			}
			m.MsgNoPromt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgNoPromt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTop", wireType)
			}
			m.MsgTop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgTop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGroupChat", wireType)
			}
			m.IsGroupChat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsGroupChat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNeedVerify", wireType)
			}
			m.IsNeedVerify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsNeedVerify |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivateChat", wireType)
			}
			m.IsPrivateChat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPrivateChat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImMessage = fmt.Errorf("proto: unexpected end of group")
)
