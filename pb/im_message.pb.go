// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.9.1
// source: protobuf/im_message.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DataType int32

const (
	DataType_IMAuthMessageType      DataType = 0 //认证消息
	DataType_IMAuthMessageAckType   DataType = 1 //认证回执消息
	DataType_IMChatMessageType      DataType = 2 //聊天消息
	DataType_IMChatMessageACKType   DataType = 3 //聊天服务器回执消息
	DataType_IMChatMessageToACKType DataType = 4 //聊天客户端回执消息
	DataType_IMPingMessageType      DataType = 5 //Ping消息
	DataType_IMPongMessageType      DataType = 6 //Pong消息
	DataType_IMOffLineMessageType   DataType = 7 //下线消息
	DataType_IMServerMessageType    DataType = 8 //系统通知消息
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "IMAuthMessageType",
		1: "IMAuthMessageAckType",
		2: "IMChatMessageType",
		3: "IMChatMessageACKType",
		4: "IMChatMessageToACKType",
		5: "IMPingMessageType",
		6: "IMPongMessageType",
		7: "IMOffLineMessageType",
		8: "IMServerMessageType",
	}
	DataType_value = map[string]int32{
		"IMAuthMessageType":      0,
		"IMAuthMessageAckType":   1,
		"IMChatMessageType":      2,
		"IMChatMessageACKType":   3,
		"IMChatMessageToACKType": 4,
		"IMPingMessageType":      5,
		"IMPongMessageType":      6,
		"IMOffLineMessageType":   7,
		"IMServerMessageType":    8,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_im_message_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_protobuf_im_message_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{0}
}

//用户聊天类型
type ChatType int32

const (
	ChatType_SingleChat ChatType = 0 //单聊消息
	ChatType_GroupChat  ChatType = 1 //群聊消息
	ChatType_OpenChat   ChatType = 2 //开放消息
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "SingleChat",
		1: "GroupChat",
		2: "OpenChat",
	}
	ChatType_value = map[string]int32{
		"SingleChat": 0,
		"GroupChat":  1,
		"OpenChat":   2,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_im_message_proto_enumTypes[1].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_protobuf_im_message_proto_enumTypes[1]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{1}
}

//消息内容类型
type MessageType int32

const (
	//基础聊天类消息
	MessageType_TextMessageType     MessageType = 0  //文本消息
	MessageType_ImageMessageType    MessageType = 1  //图片消息
	MessageType_VideoMessageType    MessageType = 2  //视频消息
	MessageType_GEOMessageType      MessageType = 3  //地理定位
	MessageType_VoiceMessageType    MessageType = 4  //音频消息
	MessageType_FileMessageType     MessageType = 5  //文件消息
	MessageType_CardMessageType     MessageType = 6  //名片消息
	MessageType_SharkUrlType        MessageType = 7  //分享链接
	MessageType_BackMessageType     MessageType = 8  //撤回消息
	MessageType_DelMessageType      MessageType = 9  //删除消息
	MessageType_AtMessageType       MessageType = 10 //@用户消息(该消息为特殊消息，前后端一起定义)
	MessageType_CustomMessageType   MessageType = 11 //自定义消息(该消息内容传输为JSON,消息接收使用文本类型对象解析即可)
	MessageType_StickersMessageType MessageType = 12 //表情消息
	MessageType_HaveReadMessageType MessageType = 13 //已读消息
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "TextMessageType",
		1:  "ImageMessageType",
		2:  "VideoMessageType",
		3:  "GEOMessageType",
		4:  "VoiceMessageType",
		5:  "FileMessageType",
		6:  "CardMessageType",
		7:  "SharkUrlType",
		8:  "BackMessageType",
		9:  "DelMessageType",
		10: "AtMessageType",
		11: "CustomMessageType",
		12: "StickersMessageType",
		13: "HaveReadMessageType",
	}
	MessageType_value = map[string]int32{
		"TextMessageType":     0,
		"ImageMessageType":    1,
		"VideoMessageType":    2,
		"GEOMessageType":      3,
		"VoiceMessageType":    4,
		"FileMessageType":     5,
		"CardMessageType":     6,
		"SharkUrlType":        7,
		"BackMessageType":     8,
		"DelMessageType":      9,
		"AtMessageType":       10,
		"CustomMessageType":   11,
		"StickersMessageType": 12,
		"HaveReadMessageType": 13,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_im_message_proto_enumTypes[2].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_protobuf_im_message_proto_enumTypes[2]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{2}
}

type ServerMsgType int32

const (
	//系统通知类消息
	ServerMsgType_NoticeMessageType          ServerMsgType = 0 //公告消息  该消息只转发给平台所有用户
	ServerMsgType_RegisterWelcomeMessageType ServerMsgType = 1 //注册欢迎语 转发给刚注册的某一个人
	ServerMsgType_SynchroMessageType         ServerMsgType = 2 //同步类消息
	ServerMsgType_ChatMessageType            ServerMsgType = 3 //服务端代发聊天消息
	ServerMsgType_DelMsgMessageType          ServerMsgType = 4 //删除消息记录
	//好友通知类消息
	ServerMsgType_FriendInviteMessageType  ServerMsgType = 101 //邀请好友  该消息只转发给接收申请的用户
	ServerMsgType_FriendConfirmMessageType ServerMsgType = 102 //好友确认  该消息只转发给发起申请的用户
	ServerMsgType_FriendDelMessageType     ServerMsgType = 103 //好友删除  该消息只转发给被删除的好友用户
	ServerMsgType_FriendSayMessageType     ServerMsgType = 104 //好友打招呼消息  该消息转发给好友双方
	ServerMsgType_NullFriendMessageType    ServerMsgType = 105 //好友不存在 该消息转发给发送消息的用户
	//群组通知类消息
	ServerMsgType_CreateGroupMessageType        ServerMsgType = 200 //创建群组  该消息只转发给群主和所有邀请的群成员
	ServerMsgType_JoinReqGroupMessageType       ServerMsgType = 201 //进群申请  该消息体只转发给群主及群管理员
	ServerMsgType_JoinConfirmGroupMessageType   ServerMsgType = 202 //进群确认/进群通知  该消息体如果拒绝状态只转发给发送申请加入群聊的用户，如果同意该消息会转发给所有在线的群成员
	ServerMsgType_OutGroupMessageType           ServerMsgType = 203 //退群消息  该消息只转发给在线的所有群成员
	ServerMsgType_KickGroupMessageType          ServerMsgType = 204 //踢人消息  该消息只转发给在线的所有群成员
	ServerMsgType_DelGroupMessageType           ServerMsgType = 205 //解散群组  该消息只转发给在线的所有群成员
	ServerMsgType_TransferOwnerMessageType      ServerMsgType = 206 //转让群主  该消息只转发给在线的所有群成员
	ServerMsgType_EstoppelGroupMessageType      ServerMsgType = 207 //群组禁言/解除禁言  该消息只转发给在线的所有群成员,该消息在群组禁言如果发送此消息会转发给某一个人
	ServerMsgType_NoticeGroupMessageType        ServerMsgType = 208 //变更群组公告  该消息只转发给在线的所有群成员
	ServerMsgType_LockAndNoGroupMessageType     ServerMsgType = 209 //锁定/解锁群组  该消息只转发给在线的所有群成员
	ServerMsgType_NameGroupMessageType          ServerMsgType = 210 //变更群名称  该消息只转发给在线的所有群成员
	ServerMsgType_AdminGroupMessageType         ServerMsgType = 211 //变更管理员 该消息只转发给在线的所有群成员
	ServerMsgType_NoChatGroupMessageType        ServerMsgType = 212 //是否禁止私聊  该消息只转发给在线的所有群成员
	ServerMsgType_JoinVerifyGroupMessageType    ServerMsgType = 213 //是否进群验证  该消息只转发给在线的所有群成员
	ServerMsgType_InviteJoinRepGroupMessageType ServerMsgType = 214 //邀请进群申请  该消息发送给群管理员
	ServerMsgType_InviteConfirmGroupMessageType ServerMsgType = 215 //邀请进群确认/邀请进群通知  该消息只转发给在线的所有群成员
	ServerMsgType_MemberNoGroupMessageType      ServerMsgType = 216 //用户不在群内 该消息转发给发送消息的用户
	ServerMsgType_NullGroupMessageType          ServerMsgType = 217 //群组不存在 该消息转发给发送消息的用户
	ServerMsgType_GroupNoChatMessageType        ServerMsgType = 218 //群内以开启禁言 该消息转发给发送消息的用户
	ServerMsgType_DelGroupNoticeType            ServerMsgType = 219 //删除群公告 该消息转发给在线所有成员
	ServerMsgType_SnapchatMessageType           ServerMsgType = 220 //阅后即焚 该消息转发给好友双方
	ServerMsgType_GroupSingleForbidMessageType  ServerMsgType = 221 //群组单个成员禁言 该消息转发给禁言的用户、管理员以及群主
	ServerMsgType_MemberGroupForbidMessageType  ServerMsgType = 222 //该成员在群内已被禁言 该消息转发给发送消息用户
	//系统单人命令消息
	ServerMsgType_UserForcedOfflineType ServerMsgType = 500 //强制下线消息  发送给某个用户
	ServerMsgType_UserPcLineStatusType  ServerMsgType = 501 //PC端上线/下线消息 发送给某个用户
	ServerMsgType_FriendLineStatusType  ServerMsgType = 502 //好友上线/下线消息    发送给所有在线的好友
)

// Enum value maps for ServerMsgType.
var (
	ServerMsgType_name = map[int32]string{
		0:   "NoticeMessageType",
		1:   "RegisterWelcomeMessageType",
		2:   "SynchroMessageType",
		3:   "ChatMessageType",
		4:   "DelMsgMessageType",
		101: "FriendInviteMessageType",
		102: "FriendConfirmMessageType",
		103: "FriendDelMessageType",
		104: "FriendSayMessageType",
		105: "NullFriendMessageType",
		200: "CreateGroupMessageType",
		201: "JoinReqGroupMessageType",
		202: "JoinConfirmGroupMessageType",
		203: "OutGroupMessageType",
		204: "KickGroupMessageType",
		205: "DelGroupMessageType",
		206: "TransferOwnerMessageType",
		207: "EstoppelGroupMessageType",
		208: "NoticeGroupMessageType",
		209: "LockAndNoGroupMessageType",
		210: "NameGroupMessageType",
		211: "AdminGroupMessageType",
		212: "NoChatGroupMessageType",
		213: "JoinVerifyGroupMessageType",
		214: "InviteJoinRepGroupMessageType",
		215: "InviteConfirmGroupMessageType",
		216: "MemberNoGroupMessageType",
		217: "NullGroupMessageType",
		218: "GroupNoChatMessageType",
		219: "DelGroupNoticeType",
		220: "SnapchatMessageType",
		221: "GroupSingleForbidMessageType",
		222: "MemberGroupForbidMessageType",
		500: "UserForcedOfflineType",
		501: "UserPcLineStatusType",
		502: "FriendLineStatusType",
	}
	ServerMsgType_value = map[string]int32{
		"NoticeMessageType":             0,
		"RegisterWelcomeMessageType":    1,
		"SynchroMessageType":            2,
		"ChatMessageType":               3,
		"DelMsgMessageType":             4,
		"FriendInviteMessageType":       101,
		"FriendConfirmMessageType":      102,
		"FriendDelMessageType":          103,
		"FriendSayMessageType":          104,
		"NullFriendMessageType":         105,
		"CreateGroupMessageType":        200,
		"JoinReqGroupMessageType":       201,
		"JoinConfirmGroupMessageType":   202,
		"OutGroupMessageType":           203,
		"KickGroupMessageType":          204,
		"DelGroupMessageType":           205,
		"TransferOwnerMessageType":      206,
		"EstoppelGroupMessageType":      207,
		"NoticeGroupMessageType":        208,
		"LockAndNoGroupMessageType":     209,
		"NameGroupMessageType":          210,
		"AdminGroupMessageType":         211,
		"NoChatGroupMessageType":        212,
		"JoinVerifyGroupMessageType":    213,
		"InviteJoinRepGroupMessageType": 214,
		"InviteConfirmGroupMessageType": 215,
		"MemberNoGroupMessageType":      216,
		"NullGroupMessageType":          217,
		"GroupNoChatMessageType":        218,
		"DelGroupNoticeType":            219,
		"SnapchatMessageType":           220,
		"GroupSingleForbidMessageType":  221,
		"MemberGroupForbidMessageType":  222,
		"UserForcedOfflineType":         500,
		"UserPcLineStatusType":          501,
		"FriendLineStatusType":          502,
	}
)

func (x ServerMsgType) Enum() *ServerMsgType {
	p := new(ServerMsgType)
	*p = x
	return p
}

func (x ServerMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_im_message_proto_enumTypes[3].Descriptor()
}

func (ServerMsgType) Type() protoreflect.EnumType {
	return &file_protobuf_im_message_proto_enumTypes[3]
}

func (x ServerMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerMsgType.Descriptor instead.
func (ServerMsgType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{3}
}

//同步类型
type SynchroType int32

const (
	SynchroType_UserHeaderType         SynchroType = 0  //更新头像
	SynchroType_UserNickType           SynchroType = 1  //更新昵称
	SynchroType_UserUuidType           SynchroType = 2  //更新ID
	SynchroType_UserSexType            SynchroType = 3  //更新性别
	SynchroType_UserSignType           SynchroType = 4  //更新签名
	SynchroType_NewMsgNoticeStatusType SynchroType = 5  //全局新消息通知
	SynchroType_VoiceStatusType        SynchroType = 6  //全局声音提示
	SynchroType_ShockStatusType        SynchroType = 7  //全局震动
	SynchroType_SessionTopType         SynchroType = 8  //会话列表置顶
	SynchroType_SessionUnTopType       SynchroType = 9  //会话列表取消置顶
	SynchroType_SessionDelType         SynchroType = 10 //会话列表删除
	SynchroType_SessionReadType        SynchroType = 11 //会话列表标记为已读
	SynchroType_SessionUnreadType      SynchroType = 12 //会话列表标记为未读
	SynchroType_FriendRemarksType      SynchroType = 13 //更新好友备注
	SynchroType_FriendBlacklistType    SynchroType = 14 //好友加入黑名单
	SynchroType_GroupMemberNickType    SynchroType = 15 //群内昵称修改
	SynchroType_ChatMessageFreeType    SynchroType = 16 //消息免打扰
	SynchroType_StickersUpdateType     SynchroType = 17 //表情包改变
)

// Enum value maps for SynchroType.
var (
	SynchroType_name = map[int32]string{
		0:  "UserHeaderType",
		1:  "UserNickType",
		2:  "UserUuidType",
		3:  "UserSexType",
		4:  "UserSignType",
		5:  "NewMsgNoticeStatusType",
		6:  "VoiceStatusType",
		7:  "ShockStatusType",
		8:  "SessionTopType",
		9:  "SessionUnTopType",
		10: "SessionDelType",
		11: "SessionReadType",
		12: "SessionUnreadType",
		13: "FriendRemarksType",
		14: "FriendBlacklistType",
		15: "GroupMemberNickType",
		16: "ChatMessageFreeType",
		17: "StickersUpdateType",
	}
	SynchroType_value = map[string]int32{
		"UserHeaderType":         0,
		"UserNickType":           1,
		"UserUuidType":           2,
		"UserSexType":            3,
		"UserSignType":           4,
		"NewMsgNoticeStatusType": 5,
		"VoiceStatusType":        6,
		"ShockStatusType":        7,
		"SessionTopType":         8,
		"SessionUnTopType":       9,
		"SessionDelType":         10,
		"SessionReadType":        11,
		"SessionUnreadType":      12,
		"FriendRemarksType":      13,
		"FriendBlacklistType":    14,
		"GroupMemberNickType":    15,
		"ChatMessageFreeType":    16,
		"StickersUpdateType":     17,
	}
)

func (x SynchroType) Enum() *SynchroType {
	p := new(SynchroType)
	*p = x
	return p
}

func (x SynchroType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SynchroType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_im_message_proto_enumTypes[4].Descriptor()
}

func (SynchroType) Type() protoreflect.EnumType {
	return &file_protobuf_im_message_proto_enumTypes[4]
}

func (x SynchroType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SynchroType.Descriptor instead.
func (SynchroType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{4}
}

//性别类型
type SexType int32

const (
	SexType_Secrecy SexType = 0 //保密
	SexType_Man     SexType = 1 //男
	SexType_Women   SexType = 2 //女
)

// Enum value maps for SexType.
var (
	SexType_name = map[int32]string{
		0: "Secrecy",
		1: "Man",
		2: "Women",
	}
	SexType_value = map[string]int32{
		"Secrecy": 0,
		"Man":     1,
		"Women":   2,
	}
)

func (x SexType) Enum() *SexType {
	p := new(SexType)
	*p = x
	return p
}

func (x SexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SexType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_im_message_proto_enumTypes[5].Descriptor()
}

func (SexType) Type() protoreflect.EnumType {
	return &file_protobuf_im_message_proto_enumTypes[5]
}

func (x SexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SexType.Descriptor instead.
func (SexType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{5}
}

type ServerChatMessage_MessageType int32

const (
	//基础聊天类消息
	ServerChatMessage_TextMessage  ServerChatMessage_MessageType = 0 //文本消息
	ServerChatMessage_ImageMessage ServerChatMessage_MessageType = 1 //图片消息
)

// Enum value maps for ServerChatMessage_MessageType.
var (
	ServerChatMessage_MessageType_name = map[int32]string{
		0: "TextMessage",
		1: "ImageMessage",
	}
	ServerChatMessage_MessageType_value = map[string]int32{
		"TextMessage":  0,
		"ImageMessage": 1,
	}
)

func (x ServerChatMessage_MessageType) Enum() *ServerChatMessage_MessageType {
	p := new(ServerChatMessage_MessageType)
	*p = x
	return p
}

func (x ServerChatMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerChatMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_im_message_proto_enumTypes[6].Descriptor()
}

func (ServerChatMessage_MessageType) Type() protoreflect.EnumType {
	return &file_protobuf_im_message_proto_enumTypes[6]
}

func (x ServerChatMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerChatMessage_MessageType.Descriptor instead.
func (ServerChatMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{29, 0}
}

type IMMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=pb.DataType" json:"data_type,omitempty"` //消息类型
	//oneof表示多个当中有一个被赋值
	//
	// Types that are assignable to DataBody:
	//	*IMMessage_ChatMessageBody
	//	*IMMessage_ChatMessageAckBody
	//	*IMMessage_ChatMessageToACKBody
	//	*IMMessage_AuthMessageBody
	//	*IMMessage_AuthMessageAckBody
	//	*IMMessage_PingMessageBody
	//	*IMMessage_PongMessageBody
	//	*IMMessage_OffLineMessageBody
	//	*IMMessage_ServerMessageBody
	DataBody isIMMessage_DataBody `protobuf_oneof:"dataBody"`
}

func (x *IMMessage) Reset() {
	*x = IMMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMessage) ProtoMessage() {}

func (x *IMMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMessage.ProtoReflect.Descriptor instead.
func (*IMMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{0}
}

func (x *IMMessage) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_IMAuthMessageType
}

func (m *IMMessage) GetDataBody() isIMMessage_DataBody {
	if m != nil {
		return m.DataBody
	}
	return nil
}

func (x *IMMessage) GetChatMessageBody() *IMChatMessage {
	if x, ok := x.GetDataBody().(*IMMessage_ChatMessageBody); ok {
		return x.ChatMessageBody
	}
	return nil
}

func (x *IMMessage) GetChatMessageAckBody() *IMChatMessageACK {
	if x, ok := x.GetDataBody().(*IMMessage_ChatMessageAckBody); ok {
		return x.ChatMessageAckBody
	}
	return nil
}

func (x *IMMessage) GetChatMessageToACKBody() *IMChatMessageToACK {
	if x, ok := x.GetDataBody().(*IMMessage_ChatMessageToACKBody); ok {
		return x.ChatMessageToACKBody
	}
	return nil
}

func (x *IMMessage) GetAuthMessageBody() *IMAuthMessage {
	if x, ok := x.GetDataBody().(*IMMessage_AuthMessageBody); ok {
		return x.AuthMessageBody
	}
	return nil
}

func (x *IMMessage) GetAuthMessageAckBody() *IMAuthMessageACK {
	if x, ok := x.GetDataBody().(*IMMessage_AuthMessageAckBody); ok {
		return x.AuthMessageAckBody
	}
	return nil
}

func (x *IMMessage) GetPingMessageBody() *IMPingMessage {
	if x, ok := x.GetDataBody().(*IMMessage_PingMessageBody); ok {
		return x.PingMessageBody
	}
	return nil
}

func (x *IMMessage) GetPongMessageBody() *IMPongMessage {
	if x, ok := x.GetDataBody().(*IMMessage_PongMessageBody); ok {
		return x.PongMessageBody
	}
	return nil
}

func (x *IMMessage) GetOffLineMessageBody() *IMOffLineMessage {
	if x, ok := x.GetDataBody().(*IMMessage_OffLineMessageBody); ok {
		return x.OffLineMessageBody
	}
	return nil
}

func (x *IMMessage) GetServerMessageBody() *IMServerMessage {
	if x, ok := x.GetDataBody().(*IMMessage_ServerMessageBody); ok {
		return x.ServerMessageBody
	}
	return nil
}

type isIMMessage_DataBody interface {
	isIMMessage_DataBody()
}

type IMMessage_ChatMessageBody struct {
	//下面三个类型同一时刻只能出现一个
	ChatMessageBody *IMChatMessage `protobuf:"bytes,2,opt,name=chatMessageBody,proto3,oneof"`
}

type IMMessage_ChatMessageAckBody struct {
	ChatMessageAckBody *IMChatMessageACK `protobuf:"bytes,3,opt,name=chatMessageAckBody,proto3,oneof"`
}

type IMMessage_ChatMessageToACKBody struct {
	ChatMessageToACKBody *IMChatMessageToACK `protobuf:"bytes,4,opt,name=chatMessageToACKBody,proto3,oneof"`
}

type IMMessage_AuthMessageBody struct {
	AuthMessageBody *IMAuthMessage `protobuf:"bytes,5,opt,name=authMessageBody,proto3,oneof"`
}

type IMMessage_AuthMessageAckBody struct {
	AuthMessageAckBody *IMAuthMessageACK `protobuf:"bytes,6,opt,name=authMessageAckBody,proto3,oneof"`
}

type IMMessage_PingMessageBody struct {
	PingMessageBody *IMPingMessage `protobuf:"bytes,7,opt,name=pingMessageBody,proto3,oneof"`
}

type IMMessage_PongMessageBody struct {
	PongMessageBody *IMPongMessage `protobuf:"bytes,8,opt,name=pongMessageBody,proto3,oneof"`
}

type IMMessage_OffLineMessageBody struct {
	OffLineMessageBody *IMOffLineMessage `protobuf:"bytes,9,opt,name=offLineMessageBody,proto3,oneof"`
}

type IMMessage_ServerMessageBody struct {
	ServerMessageBody *IMServerMessage `protobuf:"bytes,10,opt,name=serverMessageBody,proto3,oneof"`
}

func (*IMMessage_ChatMessageBody) isIMMessage_DataBody() {}

func (*IMMessage_ChatMessageAckBody) isIMMessage_DataBody() {}

func (*IMMessage_ChatMessageToACKBody) isIMMessage_DataBody() {}

func (*IMMessage_AuthMessageBody) isIMMessage_DataBody() {}

func (*IMMessage_AuthMessageAckBody) isIMMessage_DataBody() {}

func (*IMMessage_PingMessageBody) isIMMessage_DataBody() {}

func (*IMMessage_PongMessageBody) isIMMessage_DataBody() {}

func (*IMMessage_OffLineMessageBody) isIMMessage_DataBody() {}

func (*IMMessage_ServerMessageBody) isIMMessage_DataBody() {}

//多条消息
type IMChatMessageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IMChatMessage []*IMChatMessage `protobuf:"bytes,1,rep,name=iMChatMessage,proto3" json:"iMChatMessage,omitempty"`          //消息集合
	ToMessage     []*ToMessage     `protobuf:"bytes,2,rep,name=to_message,json=toMessage,proto3" json:"to_message,omitempty"` //消息详情
	Source        string           `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`                        //来源信息(ANDROID/IOS/WEB/IOT/PC)
}

func (x *IMChatMessageList) Reset() {
	*x = IMChatMessageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMChatMessageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMChatMessageList) ProtoMessage() {}

func (x *IMChatMessageList) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMChatMessageList.ProtoReflect.Descriptor instead.
func (*IMChatMessageList) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{1}
}

func (x *IMChatMessageList) GetIMChatMessage() []*IMChatMessage {
	if x != nil {
		return x.IMChatMessage
	}
	return nil
}

func (x *IMChatMessageList) GetToMessage() []*ToMessage {
	if x != nil {
		return x.ToMessage
	}
	return nil
}

func (x *IMChatMessageList) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

//转发消息详情
type ToMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType ChatType `protobuf:"varint,1,opt,name=chat_type,json=chatType,proto3,enum=pb.ChatType" json:"chat_type,omitempty"` //消息类型 0：单聊消息 1：群聊消息
	To       string   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`                                               //接收者的ID，当消息类型为单聊消息是，该字段表示用户UID，当消息类型为群聊消息是，该字段表示群ID
	MsgId    []string `protobuf:"bytes,3,rep,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                            //消息ID，由客户端生成
}

func (x *ToMessage) Reset() {
	*x = ToMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToMessage) ProtoMessage() {}

func (x *ToMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToMessage.ProtoReflect.Descriptor instead.
func (*ToMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{2}
}

func (x *ToMessage) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_SingleChat
}

func (x *ToMessage) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ToMessage) GetMsgId() []string {
	if x != nil {
		return x.MsgId
	}
	return nil
}

//下线消息
type IMOffLineMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId  string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`    //消息ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`               //来源信息(ANDROID/IOS/WEB/IOT/PC)
}

func (x *IMOffLineMessage) Reset() {
	*x = IMOffLineMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMOffLineMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMOffLineMessage) ProtoMessage() {}

func (x *IMOffLineMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMOffLineMessage.ProtoReflect.Descriptor instead.
func (*IMOffLineMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{3}
}

func (x *IMOffLineMessage) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *IMOffLineMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IMOffLineMessage) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

//Ping消息
type IMPingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId  string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`    //消息ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
}

func (x *IMPingMessage) Reset() {
	*x = IMPingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMPingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMPingMessage) ProtoMessage() {}

func (x *IMPingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMPingMessage.ProtoReflect.Descriptor instead.
func (*IMPingMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{4}
}

func (x *IMPingMessage) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *IMPingMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

//Pong消息
type IMPongMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId  string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`    //消息ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
}

func (x *IMPongMessage) Reset() {
	*x = IMPongMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMPongMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMPongMessage) ProtoMessage() {}

func (x *IMPongMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMPongMessage.ProtoReflect.Descriptor instead.
func (*IMPongMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{5}
}

func (x *IMPongMessage) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *IMPongMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

//授权消息
type IMAuthMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId  string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`    //消息ID(前端消息ID)
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户ID
	Token  string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`                 //登录Token
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`               //来源信息(ANDROID/IOS/WEB/IOT/PC)
}

func (x *IMAuthMessage) Reset() {
	*x = IMAuthMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMAuthMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMAuthMessage) ProtoMessage() {}

func (x *IMAuthMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMAuthMessage.ProtoReflect.Descriptor instead.
func (*IMAuthMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{6}
}

func (x *IMAuthMessage) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *IMAuthMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IMAuthMessage) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *IMAuthMessage) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

//授权消息回执
type IMAuthMessageACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`            //回执消息ID
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`         //用户ID
	Code     int64  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`                          //状态码
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                     //消息提示
	AckMsgId string `protobuf:"bytes,5,opt,name=ack_msg_id,json=ackMsgId,proto3" json:"ack_msg_id,omitempty"` //消息ID(前端消息ID)
}

func (x *IMAuthMessageACK) Reset() {
	*x = IMAuthMessageACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMAuthMessageACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMAuthMessageACK) ProtoMessage() {}

func (x *IMAuthMessageACK) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMAuthMessageACK.ProtoReflect.Descriptor instead.
func (*IMAuthMessageACK) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{7}
}

func (x *IMAuthMessageACK) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *IMAuthMessageACK) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IMAuthMessageACK) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *IMAuthMessageACK) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IMAuthMessageACK) GetAckMsgId() string {
	if x != nil {
		return x.AckMsgId
	}
	return ""
}

//服务器ACK消息
type IMChatMessageACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    string   `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                   //回执消息ID
	AckMsgId string   `protobuf:"bytes,2,opt,name=ack_msg_id,json=ackMsgId,proto3" json:"ack_msg_id,omitempty"`        //消息ID(前端消息ID)
	SMsgId   string   `protobuf:"bytes,3,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"`              //消息ID(服务消息ID)
	CType    ChatType `protobuf:"varint,4,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"` //聊天类型
}

func (x *IMChatMessageACK) Reset() {
	*x = IMChatMessageACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMChatMessageACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMChatMessageACK) ProtoMessage() {}

func (x *IMChatMessageACK) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMChatMessageACK.ProtoReflect.Descriptor instead.
func (*IMChatMessageACK) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{8}
}

func (x *IMChatMessageACK) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *IMChatMessageACK) GetAckMsgId() string {
	if x != nil {
		return x.AckMsgId
	}
	return ""
}

func (x *IMChatMessageACK) GetSMsgId() string {
	if x != nil {
		return x.SMsgId
	}
	return ""
}

func (x *IMChatMessageACK) GetCType() ChatType {
	if x != nil {
		return x.CType
	}
	return ChatType_SingleChat
}

//聊天消息
type IMChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"` //消息ID(前端消息ID)
	From  string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                //发送者(用户ID)
	Nick  string `protobuf:"bytes,3,opt,name=nick,proto3" json:"nick,omitempty"`                //发送者昵称
	To    string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`                    //接受者(用户ID/群组ID)
	//消息体(前端自定义,除特殊消息外服务端不进行处理)
	//
	// Types that are assignable to Body:
	//	*IMChatMessage_TextMessage
	//	*IMChatMessage_ImageMessage
	//	*IMChatMessage_VideoMessage
	//	*IMChatMessage_GeoMessage
	//	*IMChatMessage_VoiceMessage
	//	*IMChatMessage_FileMessage
	//	*IMChatMessage_CardMessage
	//	*IMChatMessage_SharkUrl
	//	*IMChatMessage_BackDelMessage
	//	*IMChatMessage_AtMessage
	//	*IMChatMessage_CustomMessage
	//	*IMChatMessage_StickersMessage
	//	*IMChatMessage_HaveReadMessage
	Body     isIMChatMessage_Body `protobuf_oneof:"body"`
	CType    ChatType             `protobuf:"varint,16,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"`    //聊天类型
	MType    MessageType          `protobuf:"varint,17,opt,name=m_type,json=mType,proto3,enum=pb.MessageType" json:"m_type,omitempty"` //消息类型
	Icon     string               `protobuf:"bytes,18,opt,name=icon,proto3" json:"icon,omitempty"`                                     //发送者头像
	IsAck    bool                 `protobuf:"varint,19,opt,name=is_ack,json=isAck,proto3" json:"is_ack,omitempty"`                     //是否需要回执(true/false,该值必传)
	IsEncry  bool                 `protobuf:"varint,20,opt,name=is_encry,json=isEncry,proto3" json:"is_encry,omitempty"`               //是否加密(true/false,默认false)
	Snapchat int64                `protobuf:"varint,21,opt,name=snapchat,proto3" json:"snapchat,omitempty"`                            //阅后即焚时间戳(默认0)
	SendTime int64                `protobuf:"varint,22,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`            //发送时间
	SMsgId   string               `protobuf:"bytes,23,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"`                 //消息ID(服务消息ID)
	ToSource string               `protobuf:"bytes,24,opt,name=to_source,json=toSource,proto3" json:"to_source,omitempty"`             //发送的设备(服务端使用，前端不用传递和使用)
	ToUid    string               `protobuf:"bytes,25,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`                      //发送的用户(服务端使用，前端不用传递和使用)
}

func (x *IMChatMessage) Reset() {
	*x = IMChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMChatMessage) ProtoMessage() {}

func (x *IMChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMChatMessage.ProtoReflect.Descriptor instead.
func (*IMChatMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{9}
}

func (x *IMChatMessage) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *IMChatMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *IMChatMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *IMChatMessage) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (m *IMChatMessage) GetBody() isIMChatMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *IMChatMessage) GetTextMessage() *TextMessage {
	if x, ok := x.GetBody().(*IMChatMessage_TextMessage); ok {
		return x.TextMessage
	}
	return nil
}

func (x *IMChatMessage) GetImageMessage() *ImageMessage {
	if x, ok := x.GetBody().(*IMChatMessage_ImageMessage); ok {
		return x.ImageMessage
	}
	return nil
}

func (x *IMChatMessage) GetVideoMessage() *VideoMessage {
	if x, ok := x.GetBody().(*IMChatMessage_VideoMessage); ok {
		return x.VideoMessage
	}
	return nil
}

func (x *IMChatMessage) GetGeoMessage() *GEOMessage {
	if x, ok := x.GetBody().(*IMChatMessage_GeoMessage); ok {
		return x.GeoMessage
	}
	return nil
}

func (x *IMChatMessage) GetVoiceMessage() *VoiceMessage {
	if x, ok := x.GetBody().(*IMChatMessage_VoiceMessage); ok {
		return x.VoiceMessage
	}
	return nil
}

func (x *IMChatMessage) GetFileMessage() *FileMessage {
	if x, ok := x.GetBody().(*IMChatMessage_FileMessage); ok {
		return x.FileMessage
	}
	return nil
}

func (x *IMChatMessage) GetCardMessage() *CardMessage {
	if x, ok := x.GetBody().(*IMChatMessage_CardMessage); ok {
		return x.CardMessage
	}
	return nil
}

func (x *IMChatMessage) GetSharkUrl() *SharkUrl {
	if x, ok := x.GetBody().(*IMChatMessage_SharkUrl); ok {
		return x.SharkUrl
	}
	return nil
}

func (x *IMChatMessage) GetBackDelMessage() *BackDelMessage {
	if x, ok := x.GetBody().(*IMChatMessage_BackDelMessage); ok {
		return x.BackDelMessage
	}
	return nil
}

func (x *IMChatMessage) GetAtMessage() *AtMessage {
	if x, ok := x.GetBody().(*IMChatMessage_AtMessage); ok {
		return x.AtMessage
	}
	return nil
}

func (x *IMChatMessage) GetCustomMessage() *CustomMessage {
	if x, ok := x.GetBody().(*IMChatMessage_CustomMessage); ok {
		return x.CustomMessage
	}
	return nil
}

func (x *IMChatMessage) GetStickersMessage() *StickersMessage {
	if x, ok := x.GetBody().(*IMChatMessage_StickersMessage); ok {
		return x.StickersMessage
	}
	return nil
}

func (x *IMChatMessage) GetHaveReadMessage() *HaveReadMessage {
	if x, ok := x.GetBody().(*IMChatMessage_HaveReadMessage); ok {
		return x.HaveReadMessage
	}
	return nil
}

func (x *IMChatMessage) GetCType() ChatType {
	if x != nil {
		return x.CType
	}
	return ChatType_SingleChat
}

func (x *IMChatMessage) GetMType() MessageType {
	if x != nil {
		return x.MType
	}
	return MessageType_TextMessageType
}

func (x *IMChatMessage) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *IMChatMessage) GetIsAck() bool {
	if x != nil {
		return x.IsAck
	}
	return false
}

func (x *IMChatMessage) GetIsEncry() bool {
	if x != nil {
		return x.IsEncry
	}
	return false
}

func (x *IMChatMessage) GetSnapchat() int64 {
	if x != nil {
		return x.Snapchat
	}
	return 0
}

func (x *IMChatMessage) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *IMChatMessage) GetSMsgId() string {
	if x != nil {
		return x.SMsgId
	}
	return ""
}

func (x *IMChatMessage) GetToSource() string {
	if x != nil {
		return x.ToSource
	}
	return ""
}

func (x *IMChatMessage) GetToUid() string {
	if x != nil {
		return x.ToUid
	}
	return ""
}

type isIMChatMessage_Body interface {
	isIMChatMessage_Body()
}

type IMChatMessage_TextMessage struct {
	TextMessage *TextMessage `protobuf:"bytes,5,opt,name=textMessage,proto3,oneof"`
}

type IMChatMessage_ImageMessage struct {
	ImageMessage *ImageMessage `protobuf:"bytes,6,opt,name=imageMessage,proto3,oneof"`
}

type IMChatMessage_VideoMessage struct {
	VideoMessage *VideoMessage `protobuf:"bytes,7,opt,name=videoMessage,proto3,oneof"`
}

type IMChatMessage_GeoMessage struct {
	GeoMessage *GEOMessage `protobuf:"bytes,8,opt,name=geoMessage,proto3,oneof"`
}

type IMChatMessage_VoiceMessage struct {
	VoiceMessage *VoiceMessage `protobuf:"bytes,9,opt,name=voiceMessage,proto3,oneof"`
}

type IMChatMessage_FileMessage struct {
	FileMessage *FileMessage `protobuf:"bytes,10,opt,name=fileMessage,proto3,oneof"`
}

type IMChatMessage_CardMessage struct {
	CardMessage *CardMessage `protobuf:"bytes,11,opt,name=cardMessage,proto3,oneof"`
}

type IMChatMessage_SharkUrl struct {
	SharkUrl *SharkUrl `protobuf:"bytes,12,opt,name=sharkUrl,proto3,oneof"`
}

type IMChatMessage_BackDelMessage struct {
	BackDelMessage *BackDelMessage `protobuf:"bytes,13,opt,name=backDelMessage,proto3,oneof"`
}

type IMChatMessage_AtMessage struct {
	AtMessage *AtMessage `protobuf:"bytes,14,opt,name=atMessage,proto3,oneof"`
}

type IMChatMessage_CustomMessage struct {
	CustomMessage *CustomMessage `protobuf:"bytes,15,opt,name=customMessage,proto3,oneof"`
}

type IMChatMessage_StickersMessage struct {
	StickersMessage *StickersMessage `protobuf:"bytes,26,opt,name=stickersMessage,proto3,oneof"`
}

type IMChatMessage_HaveReadMessage struct {
	HaveReadMessage *HaveReadMessage `protobuf:"bytes,27,opt,name=haveReadMessage,proto3,oneof"`
}

func (*IMChatMessage_TextMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_ImageMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_VideoMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_GeoMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_VoiceMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_FileMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_CardMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_SharkUrl) isIMChatMessage_Body() {}

func (*IMChatMessage_BackDelMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_AtMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_CustomMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_StickersMessage) isIMChatMessage_Body() {}

func (*IMChatMessage_HaveReadMessage) isIMChatMessage_Body() {}

//已读消息
type HaveReadMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SMsgId []string `protobuf:"bytes,1,rep,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"` //已读的消息服务端ID集合
	Ext    string   `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`                       //扩展字段
}

func (x *HaveReadMessage) Reset() {
	*x = HaveReadMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HaveReadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HaveReadMessage) ProtoMessage() {}

func (x *HaveReadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HaveReadMessage.ProtoReflect.Descriptor instead.
func (*HaveReadMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{10}
}

func (x *HaveReadMessage) GetSMsgId() []string {
	if x != nil {
		return x.SMsgId
	}
	return nil
}

func (x *HaveReadMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//自定义消息
type CustomMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"` //文本内容
	Type    int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`      //类型 1:群公告消息
	Ext     string `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`         //扩展字段
}

func (x *CustomMessage) Reset() {
	*x = CustomMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomMessage) ProtoMessage() {}

func (x *CustomMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomMessage.ProtoReflect.Descriptor instead.
func (*CustomMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{11}
}

func (x *CustomMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CustomMessage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CustomMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//表情消息
type StickersMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"` //图片高度
	With   int32  `protobuf:"varint,2,opt,name=with,proto3" json:"with,omitempty"`     //图片宽度
	Size   int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`     //图片大小
	Name   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`      //文件名字
	Ext    string `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`        //扩展字段
}

func (x *StickersMessage) Reset() {
	*x = StickersMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickersMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickersMessage) ProtoMessage() {}

func (x *StickersMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickersMessage.ProtoReflect.Descriptor instead.
func (*StickersMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{12}
}

func (x *StickersMessage) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *StickersMessage) GetWith() int32 {
	if x != nil {
		return x.With
	}
	return 0
}

func (x *StickersMessage) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StickersMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StickersMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//文本消息
type TextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"` //文本内容
	Ext     string `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`         //扩展字段
}

func (x *TextMessage) Reset() {
	*x = TextMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessage) ProtoMessage() {}

func (x *TextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessage.ProtoReflect.Descriptor instead.
func (*TextMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{13}
}

func (x *TextMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TextMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//图片消息
type ImageMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"` //图片高度
	With   int32  `protobuf:"varint,2,opt,name=with,proto3" json:"with,omitempty"`     //图片宽度
	Size   int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`     //图片大小
	Name   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`      //文件名字
	Ext    string `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`        //扩展字段
}

func (x *ImageMessage) Reset() {
	*x = ImageMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMessage) ProtoMessage() {}

func (x *ImageMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMessage.ProtoReflect.Descriptor instead.
func (*ImageMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{14}
}

func (x *ImageMessage) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageMessage) GetWith() int32 {
	if x != nil {
		return x.With
	}
	return 0
}

func (x *ImageMessage) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ImageMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//视频消息
type VideoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length  int64  `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`                  //视频长度
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                       //视频名称
	CImg    string `protobuf:"bytes,3,opt,name=c_img,json=cImg,proto3" json:"c_img,omitempty"`           //视频封面图
	CHeight int32  `protobuf:"varint,4,opt,name=c_height,json=cHeight,proto3" json:"c_height,omitempty"` //视频封面图高度
	CWith   int32  `protobuf:"varint,5,opt,name=c_with,json=cWith,proto3" json:"c_with,omitempty"`       //视频封面图宽度
	Ext     string `protobuf:"bytes,6,opt,name=ext,proto3" json:"ext,omitempty"`                         //扩展字段
}

func (x *VideoMessage) Reset() {
	*x = VideoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMessage) ProtoMessage() {}

func (x *VideoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMessage.ProtoReflect.Descriptor instead.
func (*VideoMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{15}
}

func (x *VideoMessage) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *VideoMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VideoMessage) GetCImg() string {
	if x != nil {
		return x.CImg
	}
	return ""
}

func (x *VideoMessage) GetCHeight() int32 {
	if x != nil {
		return x.CHeight
	}
	return 0
}

func (x *VideoMessage) GetCWith() int32 {
	if x != nil {
		return x.CWith
	}
	return 0
}

func (x *VideoMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//地理定位
type GEOMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lng     string `protobuf:"bytes,1,opt,name=lng,proto3" json:"lng,omitempty"`                         //维度
	Lat     string `protobuf:"bytes,2,opt,name=lat,proto3" json:"lat,omitempty"`                         //精度
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                       //地理名称
	CImg    string `protobuf:"bytes,4,opt,name=c_img,json=cImg,proto3" json:"c_img,omitempty"`           //地理封面图
	CHeight int32  `protobuf:"varint,5,opt,name=c_height,json=cHeight,proto3" json:"c_height,omitempty"` //地理封面图高度
	CWith   int32  `protobuf:"varint,6,opt,name=c_with,json=cWith,proto3" json:"c_with,omitempty"`       //地理封面图宽度
	Ext     string `protobuf:"bytes,7,opt,name=ext,proto3" json:"ext,omitempty"`                         //扩展字段
}

func (x *GEOMessage) Reset() {
	*x = GEOMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GEOMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GEOMessage) ProtoMessage() {}

func (x *GEOMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GEOMessage.ProtoReflect.Descriptor instead.
func (*GEOMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{16}
}

func (x *GEOMessage) GetLng() string {
	if x != nil {
		return x.Lng
	}
	return ""
}

func (x *GEOMessage) GetLat() string {
	if x != nil {
		return x.Lat
	}
	return ""
}

func (x *GEOMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GEOMessage) GetCImg() string {
	if x != nil {
		return x.CImg
	}
	return ""
}

func (x *GEOMessage) GetCHeight() int32 {
	if x != nil {
		return x.CHeight
	}
	return 0
}

func (x *GEOMessage) GetCWith() int32 {
	if x != nil {
		return x.CWith
	}
	return 0
}

func (x *GEOMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//音频消息
type VoiceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length int32  `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"` //音频长度
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`      //音频名称
	Ext    string `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`        //扩展字段
}

func (x *VoiceMessage) Reset() {
	*x = VoiceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceMessage) ProtoMessage() {}

func (x *VoiceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceMessage.ProtoReflect.Descriptor instead.
func (*VoiceMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{17}
}

func (x *VoiceMessage) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *VoiceMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VoiceMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//文件消息
type FileMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"` //文件大小
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`  //文件名称
	Ext  string `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`    //扩展字段
}

func (x *FileMessage) Reset() {
	*x = FileMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMessage) ProtoMessage() {}

func (x *FileMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMessage.ProtoReflect.Descriptor instead.
func (*FileMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{18}
}

func (x *FileMessage) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//名片消息
type CardMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`   //名片访问地址
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` //名片名称
	Ext  string `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`   //扩展字段
}

func (x *CardMessage) Reset() {
	*x = CardMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardMessage) ProtoMessage() {}

func (x *CardMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardMessage.ProtoReflect.Descriptor instead.
func (*CardMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{19}
}

func (x *CardMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CardMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//分享链接
type SharkUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url   string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`     //访问地址
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"` //标题
	Logo  string `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`   //地址logo
	Ext   string `protobuf:"bytes,4,opt,name=ext,proto3" json:"ext,omitempty"`     //扩展字段
}

func (x *SharkUrl) Reset() {
	*x = SharkUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharkUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharkUrl) ProtoMessage() {}

func (x *SharkUrl) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharkUrl.ProtoReflect.Descriptor instead.
func (*SharkUrl) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{20}
}

func (x *SharkUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SharkUrl) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SharkUrl) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *SharkUrl) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//撤回消息、删除消息
type BackDelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SMsgId string `protobuf:"bytes,1,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"` //撤回的消息服务端ID
	Ext    string `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`                       //扩展字段
}

func (x *BackDelMessage) Reset() {
	*x = BackDelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackDelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackDelMessage) ProtoMessage() {}

func (x *BackDelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackDelMessage.ProtoReflect.Descriptor instead.
func (*BackDelMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{21}
}

func (x *BackDelMessage) GetSMsgId() string {
	if x != nil {
		return x.SMsgId
	}
	return ""
}

func (x *BackDelMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//@用户消息(该消息为特殊消息，前后端一起定义)
type AtMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string    `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`             //内容
	AtInfo  []*AtInfo `protobuf:"bytes,2,rep,name=at_info,json=atInfo,proto3" json:"at_info,omitempty"` //@人信息
	Ext     string    `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`                     //扩展字段
}

func (x *AtMessage) Reset() {
	*x = AtMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtMessage) ProtoMessage() {}

func (x *AtMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtMessage.ProtoReflect.Descriptor instead.
func (*AtMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{22}
}

func (x *AtMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AtMessage) GetAtInfo() []*AtInfo {
	if x != nil {
		return x.AtInfo
	}
	return nil
}

func (x *AtMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

type AtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UId   string `protobuf:"bytes,1,opt,name=u_id,json=uId,proto3" json:"u_id,omitempty"`       //用户ID
	UNick string `protobuf:"bytes,2,opt,name=u_nick,json=uNick,proto3" json:"u_nick,omitempty"` //用户昵称
}

func (x *AtInfo) Reset() {
	*x = AtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtInfo) ProtoMessage() {}

func (x *AtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtInfo.ProtoReflect.Descriptor instead.
func (*AtInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{23}
}

func (x *AtInfo) GetUId() string {
	if x != nil {
		return x.UId
	}
	return ""
}

func (x *AtInfo) GetUNick() string {
	if x != nil {
		return x.UNick
	}
	return ""
}

type IMServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From     string        `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`                                                  //发送者(用户ID)
	Nick     string        `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                                                  //发送者昵称
	Icon     string        `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                                  //发送者头像
	To       string        `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`                                                      //接受者用户ID
	SMsgType ServerMsgType `protobuf:"varint,5,opt,name=s_msg_type,json=sMsgType,proto3,enum=pb.ServerMsgType" json:"s_msg_type,omitempty"` //消息类型
	SendTime int64         `protobuf:"varint,6,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`                         //发送时间
	SMsgId   string        `protobuf:"bytes,7,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"`                              //消息ID(服务消息ID)
	// Types that are assignable to MessageBody:
	//	*IMServerMessage_CreateGroupMessage
	//	*IMServerMessage_JoinReqGroupMessage
	//	*IMServerMessage_JoinConfirmGroupMessage
	//	*IMServerMessage_OutGroupMessage
	//	*IMServerMessage_KickGroupMessage
	//	*IMServerMessage_DelGroupMessage
	//	*IMServerMessage_TransferOwnerMessage
	//	*IMServerMessage_GroupStatusMessage
	//	*IMServerMessage_NoticeGroupMessage
	//	*IMServerMessage_NameGroupMessage
	//	*IMServerMessage_AdminGroupMessage
	//	*IMServerMessage_InviteJoinRepGroupMessage
	//	*IMServerMessage_InviteConfirmGroupMessage
	//	*IMServerMessage_GroupTipChatMessage
	//	*IMServerMessage_FriendInviteMessage
	//	*IMServerMessage_FriendConfirmMessage
	//	*IMServerMessage_FriendDelMessage
	//	*IMServerMessage_FriendSayMessage
	//	*IMServerMessage_NoticeMessage
	//	*IMServerMessage_UserForcedOffline
	//	*IMServerMessage_SynchroMessage
	//	*IMServerMessage_RegisterWelcomeMessage
	//	*IMServerMessage_ServerChatMessage
	//	*IMServerMessage_DelGroupNotice
	//	*IMServerMessage_UserPcLineStatus
	//	*IMServerMessage_DelMsgMessage
	//	*IMServerMessage_SnapchatMessage
	//	*IMServerMessage_GroupSingleForbidMessage
	//	*IMServerMessage_FriendMessage
	//	*IMServerMessage_FriendLineStatus
	MessageBody isIMServerMessage_MessageBody `protobuf_oneof:"messageBody"`
	ToSource    string                        `protobuf:"bytes,33,opt,name=to_source,json=toSource,proto3" json:"to_source,omitempty"` //接受者用户设备
}

func (x *IMServerMessage) Reset() {
	*x = IMServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMServerMessage) ProtoMessage() {}

func (x *IMServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMServerMessage.ProtoReflect.Descriptor instead.
func (*IMServerMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{24}
}

func (x *IMServerMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *IMServerMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *IMServerMessage) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *IMServerMessage) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *IMServerMessage) GetSMsgType() ServerMsgType {
	if x != nil {
		return x.SMsgType
	}
	return ServerMsgType_NoticeMessageType
}

func (x *IMServerMessage) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *IMServerMessage) GetSMsgId() string {
	if x != nil {
		return x.SMsgId
	}
	return ""
}

func (m *IMServerMessage) GetMessageBody() isIMServerMessage_MessageBody {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

func (x *IMServerMessage) GetCreateGroupMessage() *CreateGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_CreateGroupMessage); ok {
		return x.CreateGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetJoinReqGroupMessage() *JoinReqGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_JoinReqGroupMessage); ok {
		return x.JoinReqGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetJoinConfirmGroupMessage() *JoinConfirmGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_JoinConfirmGroupMessage); ok {
		return x.JoinConfirmGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetOutGroupMessage() *OutGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_OutGroupMessage); ok {
		return x.OutGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetKickGroupMessage() *KickGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_KickGroupMessage); ok {
		return x.KickGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetDelGroupMessage() *DelGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_DelGroupMessage); ok {
		return x.DelGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetTransferOwnerMessage() *TransferOwnerMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_TransferOwnerMessage); ok {
		return x.TransferOwnerMessage
	}
	return nil
}

func (x *IMServerMessage) GetGroupStatusMessage() *GroupStatusMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_GroupStatusMessage); ok {
		return x.GroupStatusMessage
	}
	return nil
}

func (x *IMServerMessage) GetNoticeGroupMessage() *NoticeGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_NoticeGroupMessage); ok {
		return x.NoticeGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetNameGroupMessage() *NameGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_NameGroupMessage); ok {
		return x.NameGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetAdminGroupMessage() *AdminGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_AdminGroupMessage); ok {
		return x.AdminGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetInviteJoinRepGroupMessage() *InviteJoinRepGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_InviteJoinRepGroupMessage); ok {
		return x.InviteJoinRepGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetInviteConfirmGroupMessage() *InviteConfirmGroupMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_InviteConfirmGroupMessage); ok {
		return x.InviteConfirmGroupMessage
	}
	return nil
}

func (x *IMServerMessage) GetGroupTipChatMessage() *GroupTipChatMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_GroupTipChatMessage); ok {
		return x.GroupTipChatMessage
	}
	return nil
}

func (x *IMServerMessage) GetFriendInviteMessage() *FriendInviteMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_FriendInviteMessage); ok {
		return x.FriendInviteMessage
	}
	return nil
}

func (x *IMServerMessage) GetFriendConfirmMessage() *FriendConfirmMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_FriendConfirmMessage); ok {
		return x.FriendConfirmMessage
	}
	return nil
}

func (x *IMServerMessage) GetFriendDelMessage() *FriendDelMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_FriendDelMessage); ok {
		return x.FriendDelMessage
	}
	return nil
}

func (x *IMServerMessage) GetFriendSayMessage() *FriendSayMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_FriendSayMessage); ok {
		return x.FriendSayMessage
	}
	return nil
}

func (x *IMServerMessage) GetNoticeMessage() *NoticeMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_NoticeMessage); ok {
		return x.NoticeMessage
	}
	return nil
}

func (x *IMServerMessage) GetUserForcedOffline() *UserForcedOffline {
	if x, ok := x.GetMessageBody().(*IMServerMessage_UserForcedOffline); ok {
		return x.UserForcedOffline
	}
	return nil
}

func (x *IMServerMessage) GetSynchroMessage() *SynchroMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_SynchroMessage); ok {
		return x.SynchroMessage
	}
	return nil
}

func (x *IMServerMessage) GetRegisterWelcomeMessage() *RegisterWelcomeMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_RegisterWelcomeMessage); ok {
		return x.RegisterWelcomeMessage
	}
	return nil
}

func (x *IMServerMessage) GetServerChatMessage() *ServerChatMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_ServerChatMessage); ok {
		return x.ServerChatMessage
	}
	return nil
}

func (x *IMServerMessage) GetDelGroupNotice() *DelGroupNotice {
	if x, ok := x.GetMessageBody().(*IMServerMessage_DelGroupNotice); ok {
		return x.DelGroupNotice
	}
	return nil
}

func (x *IMServerMessage) GetUserPcLineStatus() *UserPcLineStatus {
	if x, ok := x.GetMessageBody().(*IMServerMessage_UserPcLineStatus); ok {
		return x.UserPcLineStatus
	}
	return nil
}

func (x *IMServerMessage) GetDelMsgMessage() *DelMsgMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_DelMsgMessage); ok {
		return x.DelMsgMessage
	}
	return nil
}

func (x *IMServerMessage) GetSnapchatMessage() *SnapchatMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_SnapchatMessage); ok {
		return x.SnapchatMessage
	}
	return nil
}

func (x *IMServerMessage) GetGroupSingleForbidMessage() *GroupSingleForbidMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_GroupSingleForbidMessage); ok {
		return x.GroupSingleForbidMessage
	}
	return nil
}

func (x *IMServerMessage) GetFriendMessage() *FriendMessage {
	if x, ok := x.GetMessageBody().(*IMServerMessage_FriendMessage); ok {
		return x.FriendMessage
	}
	return nil
}

func (x *IMServerMessage) GetFriendLineStatus() *FriendLineStatus {
	if x, ok := x.GetMessageBody().(*IMServerMessage_FriendLineStatus); ok {
		return x.FriendLineStatus
	}
	return nil
}

func (x *IMServerMessage) GetToSource() string {
	if x != nil {
		return x.ToSource
	}
	return ""
}

type isIMServerMessage_MessageBody interface {
	isIMServerMessage_MessageBody()
}

type IMServerMessage_CreateGroupMessage struct {
	//群组通知类消息
	CreateGroupMessage *CreateGroupMessage `protobuf:"bytes,8,opt,name=createGroupMessage,proto3,oneof"` //创建群组  该消息只转发给群主和所有邀请的群成员
}

type IMServerMessage_JoinReqGroupMessage struct {
	JoinReqGroupMessage *JoinReqGroupMessage `protobuf:"bytes,9,opt,name=joinReqGroupMessage,proto3,oneof"` //进群申请  该消息体只转发给群主及群管理员
}

type IMServerMessage_JoinConfirmGroupMessage struct {
	JoinConfirmGroupMessage *JoinConfirmGroupMessage `protobuf:"bytes,10,opt,name=joinConfirmGroupMessage,proto3,oneof"` //进群确认/进群通知  该消息体如果拒绝状态只转发给发送申请加入群聊的用户，如果同意该消息会转发给所有在线的群成员
}

type IMServerMessage_OutGroupMessage struct {
	OutGroupMessage *OutGroupMessage `protobuf:"bytes,11,opt,name=outGroupMessage,proto3,oneof"` //退群消息  该消息只转发给在线的所有群成员
}

type IMServerMessage_KickGroupMessage struct {
	KickGroupMessage *KickGroupMessage `protobuf:"bytes,12,opt,name=kickGroupMessage,proto3,oneof"` //踢人消息  该消息只转发给在线的所有群成员
}

type IMServerMessage_DelGroupMessage struct {
	DelGroupMessage *DelGroupMessage `protobuf:"bytes,13,opt,name=delGroupMessage,proto3,oneof"` //解散群组  该消息只转发给在线的所有群成员
}

type IMServerMessage_TransferOwnerMessage struct {
	TransferOwnerMessage *TransferOwnerMessage `protobuf:"bytes,14,opt,name=transferOwnerMessage,proto3,oneof"` //转让群主  该消息只转发给在线的所有群成员
}

type IMServerMessage_GroupStatusMessage struct {
	GroupStatusMessage *GroupStatusMessage `protobuf:"bytes,15,opt,name=groupStatusMessage,proto3,oneof"` //是否群组禁言/解除禁言、锁定/解锁群组、禁止私聊、进群验证  该消息只转发给在线的所有群成员,该消息在群组禁言如果发送此消息会转发给某一个人
}

type IMServerMessage_NoticeGroupMessage struct {
	NoticeGroupMessage *NoticeGroupMessage `protobuf:"bytes,16,opt,name=noticeGroupMessage,proto3,oneof"` //变更群组公告  该消息只转发给在线的所有群成员
}

type IMServerMessage_NameGroupMessage struct {
	NameGroupMessage *NameGroupMessage `protobuf:"bytes,17,opt,name=nameGroupMessage,proto3,oneof"` //变更群名称  该消息只转发给在线的所有群成员
}

type IMServerMessage_AdminGroupMessage struct {
	AdminGroupMessage *AdminGroupMessage `protobuf:"bytes,18,opt,name=adminGroupMessage,proto3,oneof"` //变更管理员 该消息只转发给在线的所有群成员
}

type IMServerMessage_InviteJoinRepGroupMessage struct {
	InviteJoinRepGroupMessage *InviteJoinRepGroupMessage `protobuf:"bytes,19,opt,name=inviteJoinRepGroupMessage,proto3,oneof"` //邀请进群申请  该消息发送给群管理员
}

type IMServerMessage_InviteConfirmGroupMessage struct {
	InviteConfirmGroupMessage *InviteConfirmGroupMessage `protobuf:"bytes,20,opt,name=inviteConfirmGroupMessage,proto3,oneof"` //邀请进群确认/邀请进群通知  该消息只转发给在线的所有群成员
}

type IMServerMessage_GroupTipChatMessage struct {
	GroupTipChatMessage *GroupTipChatMessage `protobuf:"bytes,21,opt,name=groupTipChatMessage,proto3,oneof"` //用户不在群内、群组不存在、群组以开启禁言、用户在群组内被禁言 该消息转发给发送消息的用户
}

type IMServerMessage_FriendInviteMessage struct {
	//好友通知类消息
	FriendInviteMessage *FriendInviteMessage `protobuf:"bytes,24,opt,name=friendInviteMessage,proto3,oneof"` //邀请好友  该消息只转发给接收申请的用户
}

type IMServerMessage_FriendConfirmMessage struct {
	FriendConfirmMessage *FriendConfirmMessage `protobuf:"bytes,25,opt,name=friendConfirmMessage,proto3,oneof"` //好友确认  该消息只转发给发起申请的用户
}

type IMServerMessage_FriendDelMessage struct {
	FriendDelMessage *FriendDelMessage `protobuf:"bytes,26,opt,name=friendDelMessage,proto3,oneof"` //好友删除  该消息只转发给被删除的好友用户
}

type IMServerMessage_FriendSayMessage struct {
	FriendSayMessage *FriendSayMessage `protobuf:"bytes,27,opt,name=friendSayMessage,proto3,oneof"` //好友打招呼消息  该消息转发给好友双方
}

type IMServerMessage_NoticeMessage struct {
	//系统类消息
	NoticeMessage *NoticeMessage `protobuf:"bytes,28,opt,name=noticeMessage,proto3,oneof"` //公告消息  该消息只转发给平台所有用户
}

type IMServerMessage_UserForcedOffline struct {
	UserForcedOffline *UserForcedOffline `protobuf:"bytes,29,opt,name=userForcedOffline,proto3,oneof"` //强制下线消息  发送给某个用户
}

type IMServerMessage_SynchroMessage struct {
	SynchroMessage *SynchroMessage `protobuf:"bytes,30,opt,name=synchroMessage,proto3,oneof"` //同步类操作 发送给某个用户
}

type IMServerMessage_RegisterWelcomeMessage struct {
	RegisterWelcomeMessage *RegisterWelcomeMessage `protobuf:"bytes,31,opt,name=registerWelcomeMessage,proto3,oneof"` //注册欢迎语
}

type IMServerMessage_ServerChatMessage struct {
	ServerChatMessage *ServerChatMessage `protobuf:"bytes,32,opt,name=serverChatMessage,proto3,oneof"` //系统代发聊天消息
}

type IMServerMessage_DelGroupNotice struct {
	//后续增加的消息
	DelGroupNotice *DelGroupNotice `protobuf:"bytes,34,opt,name=delGroupNotice,proto3,oneof"` //删除群公告
}

type IMServerMessage_UserPcLineStatus struct {
	UserPcLineStatus *UserPcLineStatus `protobuf:"bytes,35,opt,name=userPcLineStatus,proto3,oneof"` //PC端上线/下线消息
}

type IMServerMessage_DelMsgMessage struct {
	DelMsgMessage *DelMsgMessage `protobuf:"bytes,36,opt,name=delMsgMessage,proto3,oneof"` //系统删除聊天消息
}

type IMServerMessage_SnapchatMessage struct {
	SnapchatMessage *SnapchatMessage `protobuf:"bytes,37,opt,name=snapchatMessage,proto3,oneof"` //阅后即焚 该消息转发给好友双方
}

type IMServerMessage_GroupSingleForbidMessage struct {
	GroupSingleForbidMessage *GroupSingleForbidMessage `protobuf:"bytes,38,opt,name=groupSingleForbidMessage,proto3,oneof"` //群组单个成员禁言 	该消息转发给禁言的用户
}

type IMServerMessage_FriendMessage struct {
	FriendMessage *FriendMessage `protobuf:"bytes,39,opt,name=friendMessage,proto3,oneof"` //好友不存在
}

type IMServerMessage_FriendLineStatus struct {
	FriendLineStatus *FriendLineStatus `protobuf:"bytes,40,opt,name=friendLineStatus,proto3,oneof"` //好友在线状态消息
}

func (*IMServerMessage_CreateGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_JoinReqGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_JoinConfirmGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_OutGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_KickGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_DelGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_TransferOwnerMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_GroupStatusMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_NoticeGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_NameGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_AdminGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_InviteJoinRepGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_InviteConfirmGroupMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_GroupTipChatMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_FriendInviteMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_FriendConfirmMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_FriendDelMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_FriendSayMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_NoticeMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_UserForcedOffline) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_SynchroMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_RegisterWelcomeMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_ServerChatMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_DelGroupNotice) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_UserPcLineStatus) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_DelMsgMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_SnapchatMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_GroupSingleForbidMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_FriendMessage) isIMServerMessage_MessageBody() {}

func (*IMServerMessage_FriendLineStatus) isIMServerMessage_MessageBody() {}

//客户端ACK消息
type IMChatMessageToACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    string   `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                   //回执消息ID
	AckMsgId string   `protobuf:"bytes,2,opt,name=ack_msg_id,json=ackMsgId,proto3" json:"ack_msg_id,omitempty"`        //消息ID(前端消息ID)
	SMsgId   string   `protobuf:"bytes,3,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"`              //消息ID(服务消息ID)
	From     string   `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`                                  //发送者(转发消息：源消息接受者用户ID)
	To       string   `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`                                      //接受者(转发消息：源消息发送者用户ID)
	CType    ChatType `protobuf:"varint,6,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"` //聊天类型
	ToSource string   `protobuf:"bytes,7,opt,name=to_source,json=toSource,proto3" json:"to_source,omitempty"`          //接受者用户设备
}

func (x *IMChatMessageToACK) Reset() {
	*x = IMChatMessageToACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMChatMessageToACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMChatMessageToACK) ProtoMessage() {}

func (x *IMChatMessageToACK) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMChatMessageToACK.ProtoReflect.Descriptor instead.
func (*IMChatMessageToACK) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{25}
}

func (x *IMChatMessageToACK) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *IMChatMessageToACK) GetAckMsgId() string {
	if x != nil {
		return x.AckMsgId
	}
	return ""
}

func (x *IMChatMessageToACK) GetSMsgId() string {
	if x != nil {
		return x.SMsgId
	}
	return ""
}

func (x *IMChatMessageToACK) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *IMChatMessageToACK) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *IMChatMessageToACK) GetCType() ChatType {
	if x != nil {
		return x.CType
	}
	return ChatType_SingleChat
}

func (x *IMChatMessageToACK) GetToSource() string {
	if x != nil {
		return x.ToSource
	}
	return ""
}

//群内单个成员禁言
type GroupSingleForbidMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUid    string `protobuf:"bytes,1,opt,name=from_uid,json=fromUid,proto3" json:"from_uid,omitempty"`           //发送者ID
	FromNick   string `protobuf:"bytes,2,opt,name=from_nick,json=fromNick,proto3" json:"from_nick,omitempty"`        //发送者昵称
	ToUid      string `protobuf:"bytes,3,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`                 //被禁言的用户UID
	ToNick     string `protobuf:"bytes,4,opt,name=to_nick,json=toNick,proto3" json:"to_nick,omitempty"`              //被禁言的用户昵称
	Gid        string `protobuf:"bytes,5,opt,name=gid,proto3" json:"gid,omitempty"`                                  //群聊ID
	Status     int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                           //是否开启禁言 0：关闭禁言 1：开启禁言
	ExpireTime int64  `protobuf:"varint,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"` //开启禁言的时间（精度为 毫秒）
}

func (x *GroupSingleForbidMessage) Reset() {
	*x = GroupSingleForbidMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSingleForbidMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSingleForbidMessage) ProtoMessage() {}

func (x *GroupSingleForbidMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSingleForbidMessage.ProtoReflect.Descriptor instead.
func (*GroupSingleForbidMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{26}
}

func (x *GroupSingleForbidMessage) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *GroupSingleForbidMessage) GetFromNick() string {
	if x != nil {
		return x.FromNick
	}
	return ""
}

func (x *GroupSingleForbidMessage) GetToUid() string {
	if x != nil {
		return x.ToUid
	}
	return ""
}

func (x *GroupSingleForbidMessage) GetToNick() string {
	if x != nil {
		return x.ToNick
	}
	return ""
}

func (x *GroupSingleForbidMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GroupSingleForbidMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GroupSingleForbidMessage) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

//阅后即焚消息
type SnapchatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UId        string `protobuf:"bytes,1,opt,name=u_id,json=uId,proto3" json:"u_id,omitempty"`                       //用户ID
	UNick      string `protobuf:"bytes,2,opt,name=u_nick,json=uNick,proto3" json:"u_nick,omitempty"`                 //用户昵称
	FId        string `protobuf:"bytes,3,opt,name=f_id,json=fId,proto3" json:"f_id,omitempty"`                       //好友用户ID
	FNick      string `protobuf:"bytes,4,opt,name=f_nick,json=fNick,proto3" json:"f_nick,omitempty"`                 //好友用户昵称
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //是否开启阅后即焚 0：关闭阅后即焚 1：开启阅后即焚
	ExpireTime int64  `protobuf:"varint,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"` //开启阅后即焚时的时间（精度为 毫秒）
}

func (x *SnapchatMessage) Reset() {
	*x = SnapchatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapchatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapchatMessage) ProtoMessage() {}

func (x *SnapchatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapchatMessage.ProtoReflect.Descriptor instead.
func (*SnapchatMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{27}
}

func (x *SnapchatMessage) GetUId() string {
	if x != nil {
		return x.UId
	}
	return ""
}

func (x *SnapchatMessage) GetUNick() string {
	if x != nil {
		return x.UNick
	}
	return ""
}

func (x *SnapchatMessage) GetFId() string {
	if x != nil {
		return x.FId
	}
	return ""
}

func (x *SnapchatMessage) GetFNick() string {
	if x != nil {
		return x.FNick
	}
	return ""
}

func (x *SnapchatMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SnapchatMessage) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

//系统删除聊天消息
type DelMsgMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUid string   `protobuf:"bytes,1,opt,name=from_uid,json=fromUid,proto3" json:"from_uid,omitempty"`             //发送者ID
	ToUid   string   `protobuf:"bytes,2,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`                   //接受者ID
	CType   ChatType `protobuf:"varint,3,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"` //聊天类型
	SMsgId  string   `protobuf:"bytes,4,opt,name=s_msg_id,json=sMsgId,proto3" json:"s_msg_id,omitempty"`              //消息ID
	Ext     string   `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`                                    //扩展字段
}

func (x *DelMsgMessage) Reset() {
	*x = DelMsgMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelMsgMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelMsgMessage) ProtoMessage() {}

func (x *DelMsgMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelMsgMessage.ProtoReflect.Descriptor instead.
func (*DelMsgMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{28}
}

func (x *DelMsgMessage) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *DelMsgMessage) GetToUid() string {
	if x != nil {
		return x.ToUid
	}
	return ""
}

func (x *DelMsgMessage) GetCType() ChatType {
	if x != nil {
		return x.CType
	}
	return ChatType_SingleChat
}

func (x *DelMsgMessage) GetSMsgId() string {
	if x != nil {
		return x.SMsgId
	}
	return ""
}

func (x *DelMsgMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//聊天消息
type ServerChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUid  string                        `protobuf:"bytes,1,opt,name=from_uid,json=fromUid,proto3" json:"from_uid,omitempty"`                                  //发送者ID
	FromNick string                        `protobuf:"bytes,2,opt,name=from_nick,json=fromNick,proto3" json:"from_nick,omitempty"`                               //发送者昵称
	FromIcon string                        `protobuf:"bytes,3,opt,name=from_icon,json=fromIcon,proto3" json:"from_icon,omitempty"`                               //发送者头像
	ToUid    string                        `protobuf:"bytes,4,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`                                        //接受者ID
	Content  string                        `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                                 //发送内容
	CType    ChatType                      `protobuf:"varint,6,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"`                      //聊天类型
	M_Type   ServerChatMessage_MessageType `protobuf:"varint,7,opt,name=m_Type,json=mType,proto3,enum=pb.ServerChatMessage_MessageType" json:"m_Type,omitempty"` //消息类型
	With     int32                         `protobuf:"varint,8,opt,name=with,proto3" json:"with,omitempty"`                                                      //图片宽
	High     int32                         `protobuf:"varint,9,opt,name=high,proto3" json:"high,omitempty"`                                                      //图片高
}

func (x *ServerChatMessage) Reset() {
	*x = ServerChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerChatMessage) ProtoMessage() {}

func (x *ServerChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerChatMessage.ProtoReflect.Descriptor instead.
func (*ServerChatMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{29}
}

func (x *ServerChatMessage) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *ServerChatMessage) GetFromNick() string {
	if x != nil {
		return x.FromNick
	}
	return ""
}

func (x *ServerChatMessage) GetFromIcon() string {
	if x != nil {
		return x.FromIcon
	}
	return ""
}

func (x *ServerChatMessage) GetToUid() string {
	if x != nil {
		return x.ToUid
	}
	return ""
}

func (x *ServerChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ServerChatMessage) GetCType() ChatType {
	if x != nil {
		return x.CType
	}
	return ChatType_SingleChat
}

func (x *ServerChatMessage) GetM_Type() ServerChatMessage_MessageType {
	if x != nil {
		return x.M_Type
	}
	return ServerChatMessage_TextMessage
}

func (x *ServerChatMessage) GetWith() int32 {
	if x != nil {
		return x.With
	}
	return 0
}

func (x *ServerChatMessage) GetHigh() int32 {
	if x != nil {
		return x.High
	}
	return 0
}

//创建群组消息
type CreateGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                              //创建群用户ID
	Nick      string      `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                            //创建群用户昵称
	Gid       string      `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                              //群聊ID
	GName     string      `protobuf:"bytes,4,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"`             //群组名称
	GHeader   string      `protobuf:"bytes,5,opt,name=g_header,json=gHeader,proto3" json:"g_header,omitempty"`       //群头像
	InviteUid []*UserInfo `protobuf:"bytes,6,rep,name=invite_uid,json=inviteUid,proto3" json:"invite_uid,omitempty"` //邀请的用户信息
	GroupInfo *GroupInfo  `protobuf:"bytes,7,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"` //群组基本配置信息
}

func (x *CreateGroupMessage) Reset() {
	*x = CreateGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupMessage) ProtoMessage() {}

func (x *CreateGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupMessage.ProtoReflect.Descriptor instead.
func (*CreateGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{30}
}

func (x *CreateGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CreateGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *CreateGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *CreateGroupMessage) GetGName() string {
	if x != nil {
		return x.GName
	}
	return ""
}

func (x *CreateGroupMessage) GetGHeader() string {
	if x != nil {
		return x.GHeader
	}
	return ""
}

func (x *CreateGroupMessage) GetInviteUid() []*UserInfo {
	if x != nil {
		return x.InviteUid
	}
	return nil
}

func (x *CreateGroupMessage) GetGroupInfo() *GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

//进群申请消息
type JoinReqGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                  //申请进群的用户ID
	Nick   string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                //申请进群的用户昵称
	Gid    string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                  //申请进入的群聊ID
	GName  string `protobuf:"bytes,4,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"` //群组名称
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`            //申请进群理由
}

func (x *JoinReqGroupMessage) Reset() {
	*x = JoinReqGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinReqGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinReqGroupMessage) ProtoMessage() {}

func (x *JoinReqGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinReqGroupMessage.ProtoReflect.Descriptor instead.
func (*JoinReqGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{31}
}

func (x *JoinReqGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *JoinReqGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *JoinReqGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *JoinReqGroupMessage) GetGName() string {
	if x != nil {
		return x.GName
	}
	return ""
}

func (x *JoinReqGroupMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//进群确认/进群通知
type JoinConfirmGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                  //申请进群的用户ID
	Nick   string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                //申请进群的用户昵称
	Gid    string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                  //申请进入的群聊ID
	GName  string `protobuf:"bytes,4,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"` //群组名称
	Status int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`           //是否同意进群 1:同意进群 2:拒绝进群
	Reason string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`            //同意或者拒绝加入群聊理由
}

func (x *JoinConfirmGroupMessage) Reset() {
	*x = JoinConfirmGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinConfirmGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinConfirmGroupMessage) ProtoMessage() {}

func (x *JoinConfirmGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinConfirmGroupMessage.ProtoReflect.Descriptor instead.
func (*JoinConfirmGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{32}
}

func (x *JoinConfirmGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *JoinConfirmGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *JoinConfirmGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *JoinConfirmGroupMessage) GetGName() string {
	if x != nil {
		return x.GName
	}
	return ""
}

func (x *JoinConfirmGroupMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *JoinConfirmGroupMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//退群消息
type OutGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`       //申请退群用户ID
	Nick   string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`     //申请退群用户昵称
	Gid    string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`       //申请退出的群聊ID
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"` //退出理由
}

func (x *OutGroupMessage) Reset() {
	*x = OutGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutGroupMessage) ProtoMessage() {}

func (x *OutGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutGroupMessage.ProtoReflect.Descriptor instead.
func (*OutGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{33}
}

func (x *OutGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *OutGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *OutGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *OutGroupMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//踢人消息
type KickGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                    //移除群聊的用户ID
	Nick        string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                                  //移除群聊的用户昵称
	OperateUid  string `protobuf:"bytes,3,opt,name=operate_uid,json=operateUid,proto3" json:"operate_uid,omitempty"`    //操作的用户ID
	OperateNick string `protobuf:"bytes,4,opt,name=operate_nick,json=operateNick,proto3" json:"operate_nick,omitempty"` //操作的用户昵称
	Gid         string `protobuf:"bytes,5,opt,name=gid,proto3" json:"gid,omitempty"`                                    //群聊ID
	Reason      string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`                              //移除理由
}

func (x *KickGroupMessage) Reset() {
	*x = KickGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickGroupMessage) ProtoMessage() {}

func (x *KickGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickGroupMessage.ProtoReflect.Descriptor instead.
func (*KickGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{34}
}

func (x *KickGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *KickGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *KickGroupMessage) GetOperateUid() string {
	if x != nil {
		return x.OperateUid
	}
	return ""
}

func (x *KickGroupMessage) GetOperateNick() string {
	if x != nil {
		return x.OperateNick
	}
	return ""
}

func (x *KickGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *KickGroupMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//解散群组
type DelGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                  //解散群聊的用户ID
	Nick   string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                //解散群聊的用户昵称
	Gid    string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                  //群聊ID
	GName  string `protobuf:"bytes,4,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"` //群组名称
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`            //解散群组理由
}

func (x *DelGroupMessage) Reset() {
	*x = DelGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelGroupMessage) ProtoMessage() {}

func (x *DelGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelGroupMessage.ProtoReflect.Descriptor instead.
func (*DelGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{35}
}

func (x *DelGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DelGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *DelGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *DelGroupMessage) GetGName() string {
	if x != nil {
		return x.GName
	}
	return ""
}

func (x *DelGroupMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//转让群主
type TransferOwnerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`       //新群主用户ID
	Nick   string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`     //新群主用户昵称
	Gid    string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`       //群聊ID
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"` //转让理由
}

func (x *TransferOwnerMessage) Reset() {
	*x = TransferOwnerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOwnerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOwnerMessage) ProtoMessage() {}

func (x *TransferOwnerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOwnerMessage.ProtoReflect.Descriptor instead.
func (*TransferOwnerMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{36}
}

func (x *TransferOwnerMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *TransferOwnerMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *TransferOwnerMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *TransferOwnerMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//是否群组禁言/解除禁言、锁定/解锁群组、禁止私聊、进群验证
type GroupStatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`        //禁言或解除禁言的用户ID
	Nick   string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`      //禁言或解除禁言的用户昵称
	Gid    string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`        //群聊ID
	Status int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"` //是否禁言 1:开启 2:关闭
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`  //开启或关闭禁言理由
}

func (x *GroupStatusMessage) Reset() {
	*x = GroupStatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupStatusMessage) ProtoMessage() {}

func (x *GroupStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupStatusMessage.ProtoReflect.Descriptor instead.
func (*GroupStatusMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{37}
}

func (x *GroupStatusMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GroupStatusMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *GroupStatusMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GroupStatusMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GroupStatusMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//变更群组公告
type NoticeGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`               //发布群公告的用户ID
	Nick       string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`             //发布群公告的用户昵称
	Gid        string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`               //群聊ID
	Notice     string `protobuf:"bytes,4,opt,name=notice,proto3" json:"notice,omitempty"`         //群组公告
	NoticeId   string `protobuf:"bytes,5,opt,name=noticeId,proto3" json:"noticeId,omitempty"`     //群组公告ID
	NoticeUuid string `protobuf:"bytes,6,opt,name=noticeUuid,proto3" json:"noticeUuid,omitempty"` //群组公告UUID
}

func (x *NoticeGroupMessage) Reset() {
	*x = NoticeGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeGroupMessage) ProtoMessage() {}

func (x *NoticeGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeGroupMessage.ProtoReflect.Descriptor instead.
func (*NoticeGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{38}
}

func (x *NoticeGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NoticeGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *NoticeGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *NoticeGroupMessage) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *NoticeGroupMessage) GetNoticeId() string {
	if x != nil {
		return x.NoticeId
	}
	return ""
}

func (x *NoticeGroupMessage) GetNoticeUuid() string {
	if x != nil {
		return x.NoticeUuid
	}
	return ""
}

//变更群名称
type NameGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                  //改变群名称的用户ID
	Nick  string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                //改变群名称的用户昵称
	Gid   string `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`                  //群聊ID
	GName string `protobuf:"bytes,4,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"` //新的群名称
}

func (x *NameGroupMessage) Reset() {
	*x = NameGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameGroupMessage) ProtoMessage() {}

func (x *NameGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameGroupMessage.ProtoReflect.Descriptor instead.
func (*NameGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{39}
}

func (x *NameGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NameGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *NameGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *NameGroupMessage) GetGName() string {
	if x != nil {
		return x.GName
	}
	return ""
}

//变更管理员
type AdminGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                    //增加或减少的管理员用户ID
	Nick        string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                                  //增加或减少的管理员用户昵称
	OperateUid  string `protobuf:"bytes,3,opt,name=operate_uid,json=operateUid,proto3" json:"operate_uid,omitempty"`    //操作的用户ID
	OperateNick string `protobuf:"bytes,4,opt,name=operate_nick,json=operateNick,proto3" json:"operate_nick,omitempty"` //操作的用户昵称
	Gid         string `protobuf:"bytes,5,opt,name=gid,proto3" json:"gid,omitempty"`                                    //群组ID
	Type        int32  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`                                 //增加或删除操作类型 1:增加 2:减少
	Reason      string `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`                              //操作理由
}

func (x *AdminGroupMessage) Reset() {
	*x = AdminGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGroupMessage) ProtoMessage() {}

func (x *AdminGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGroupMessage.ProtoReflect.Descriptor instead.
func (*AdminGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{40}
}

func (x *AdminGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AdminGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *AdminGroupMessage) GetOperateUid() string {
	if x != nil {
		return x.OperateUid
	}
	return ""
}

func (x *AdminGroupMessage) GetOperateNick() string {
	if x != nil {
		return x.OperateNick
	}
	return ""
}

func (x *AdminGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *AdminGroupMessage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AdminGroupMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//邀请进群申请
type InviteJoinRepGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                              //邀请的用户ID
	Nick      string      `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                            //邀请的用户昵称
	InviteUid []*UserInfo `protobuf:"bytes,3,rep,name=invite_uid,json=inviteUid,proto3" json:"invite_uid,omitempty"` //被邀请的用户信息
	Gid       string      `protobuf:"bytes,4,opt,name=gid,proto3" json:"gid,omitempty"`                              //群聊ID
	GName     string      `protobuf:"bytes,5,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"`             //群名称
	Reason    string      `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`                        //邀请进群理由
}

func (x *InviteJoinRepGroupMessage) Reset() {
	*x = InviteJoinRepGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteJoinRepGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteJoinRepGroupMessage) ProtoMessage() {}

func (x *InviteJoinRepGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteJoinRepGroupMessage.ProtoReflect.Descriptor instead.
func (*InviteJoinRepGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{41}
}

func (x *InviteJoinRepGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *InviteJoinRepGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *InviteJoinRepGroupMessage) GetInviteUid() []*UserInfo {
	if x != nil {
		return x.InviteUid
	}
	return nil
}

func (x *InviteJoinRepGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *InviteJoinRepGroupMessage) GetGName() string {
	if x != nil {
		return x.GName
	}
	return ""
}

func (x *InviteJoinRepGroupMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//邀请进群确认/邀请进群通知
type InviteConfirmGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                    //邀请的用户ID
	Nick        string      `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                                  //邀请的用户昵称
	InviteUid   []*UserInfo `protobuf:"bytes,3,rep,name=invite_uid,json=inviteUid,proto3" json:"invite_uid,omitempty"`       //被邀请的用户信息
	ConfirmUid  string      `protobuf:"bytes,4,opt,name=confirm_uid,json=confirmUid,proto3" json:"confirm_uid,omitempty"`    //确认的用户ID
	ConfirmNick string      `protobuf:"bytes,5,opt,name=confirm_nick,json=confirmNick,proto3" json:"confirm_nick,omitempty"` //确认的用户昵称
	Gid         string      `protobuf:"bytes,6,opt,name=gid,proto3" json:"gid,omitempty"`                                    //群聊ID
	GName       string      `protobuf:"bytes,7,opt,name=g_name,json=gName,proto3" json:"g_name,omitempty"`                   //群名称
	Reason      string      `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`                              //邀请进群理由
	Status      int32       `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                             //确认状态 1:同意进群 2:拒绝进群
	Type        int32       `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`                                //加群方式 1:扫码进群 2:邀请进群
}

func (x *InviteConfirmGroupMessage) Reset() {
	*x = InviteConfirmGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteConfirmGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteConfirmGroupMessage) ProtoMessage() {}

func (x *InviteConfirmGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteConfirmGroupMessage.ProtoReflect.Descriptor instead.
func (*InviteConfirmGroupMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{42}
}

func (x *InviteConfirmGroupMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *InviteConfirmGroupMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *InviteConfirmGroupMessage) GetInviteUid() []*UserInfo {
	if x != nil {
		return x.InviteUid
	}
	return nil
}

func (x *InviteConfirmGroupMessage) GetConfirmUid() string {
	if x != nil {
		return x.ConfirmUid
	}
	return ""
}

func (x *InviteConfirmGroupMessage) GetConfirmNick() string {
	if x != nil {
		return x.ConfirmNick
	}
	return ""
}

func (x *InviteConfirmGroupMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *InviteConfirmGroupMessage) GetGName() string {
	if x != nil {
		return x.GName
	}
	return ""
}

func (x *InviteConfirmGroupMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *InviteConfirmGroupMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *InviteConfirmGroupMessage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

//用户不在群内、群组不存在、群组以开启禁言、用户在群组内被禁言
type GroupTipChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"` //群组ID
}

func (x *GroupTipChatMessage) Reset() {
	*x = GroupTipChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTipChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTipChatMessage) ProtoMessage() {}

func (x *GroupTipChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTipChatMessage.ProtoReflect.Descriptor instead.
func (*GroupTipChatMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{43}
}

func (x *GroupTipChatMessage) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

//删除群公告
type DelGroupNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid      string `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`                           //群组ID
	NoticeId string `protobuf:"bytes,2,opt,name=notice_id,json=noticeId,proto3" json:"notice_id,omitempty"` //群组公告ID
	Reason   string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`                     //扩展字段
}

func (x *DelGroupNotice) Reset() {
	*x = DelGroupNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelGroupNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelGroupNotice) ProtoMessage() {}

func (x *DelGroupNotice) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelGroupNotice.ProtoReflect.Descriptor instead.
func (*DelGroupNotice) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{44}
}

func (x *DelGroupNotice) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *DelGroupNotice) GetNoticeId() string {
	if x != nil {
		return x.NoticeId
	}
	return ""
}

func (x *DelGroupNotice) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//好友通知类消息
//邀请好友
type FriendInviteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                        //发起申请的用户ID
	FUid    string `protobuf:"bytes,2,opt,name=f_uid,json=fUid,proto3" json:"f_uid,omitempty"`          //好友用户ID
	FNick   string `protobuf:"bytes,3,opt,name=f_nick,json=fNick,proto3" json:"f_nick,omitempty"`       //好友用户昵称
	FHeader string `protobuf:"bytes,4,opt,name=f_header,json=fHeader,proto3" json:"f_header,omitempty"` //好友用户头像
	Reason  string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`                  //申请成员好友理由
}

func (x *FriendInviteMessage) Reset() {
	*x = FriendInviteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendInviteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendInviteMessage) ProtoMessage() {}

func (x *FriendInviteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendInviteMessage.ProtoReflect.Descriptor instead.
func (*FriendInviteMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{45}
}

func (x *FriendInviteMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FriendInviteMessage) GetFUid() string {
	if x != nil {
		return x.FUid
	}
	return ""
}

func (x *FriendInviteMessage) GetFNick() string {
	if x != nil {
		return x.FNick
	}
	return ""
}

func (x *FriendInviteMessage) GetFHeader() string {
	if x != nil {
		return x.FHeader
	}
	return ""
}

func (x *FriendInviteMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//好友确认好友确认
type FriendConfirmMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid             string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                               //发起确认的用户ID
	Nick            string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`                                             //发起确认的好友昵称
	AvatarFile_Name string `protobuf:"bytes,3,opt,name=avatar_file_Name,json=avatarFileName,proto3" json:"avatar_file_Name,omitempty"` //好友用户头像
	WhatsUp         string `protobuf:"bytes,4,opt,name=whatsUp,proto3" json:"whatsUp,omitempty"`                                       //个性签名
	Type            string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                             //添加方式 1:扫码添加 2:搜索添加
	Main            string `protobuf:"bytes,6,opt,name=main,proto3" json:"main,omitempty"`                                             //用户邮箱
	Sex             int32  `protobuf:"varint,7,opt,name=sex,proto3" json:"sex,omitempty"`                                              //用户性别 0:保密 1:男 2:女,
	LiveStatus      int32  `protobuf:"varint,8,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`              //在线状态 1:在线 2:离线
	Uuid            string `protobuf:"bytes,9,opt,name=uuid,proto3" json:"uuid,omitempty"`                                             //用户UUID
	FUid            string `protobuf:"bytes,10,opt,name=f_uid,json=fUid,proto3" json:"f_uid,omitempty"`                                //发起申请好友的用户ID
	Status          int32  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`                                       //是否同意添加好友 1:同意添加好友 2:拒绝添加好友
	Reason          string `protobuf:"bytes,12,opt,name=reason,proto3" json:"reason,omitempty"`                                        //同意或者拒绝添加的理由
}

func (x *FriendConfirmMessage) Reset() {
	*x = FriendConfirmMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendConfirmMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendConfirmMessage) ProtoMessage() {}

func (x *FriendConfirmMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendConfirmMessage.ProtoReflect.Descriptor instead.
func (*FriendConfirmMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{46}
}

func (x *FriendConfirmMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FriendConfirmMessage) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *FriendConfirmMessage) GetAvatarFile_Name() string {
	if x != nil {
		return x.AvatarFile_Name
	}
	return ""
}

func (x *FriendConfirmMessage) GetWhatsUp() string {
	if x != nil {
		return x.WhatsUp
	}
	return ""
}

func (x *FriendConfirmMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FriendConfirmMessage) GetMain() string {
	if x != nil {
		return x.Main
	}
	return ""
}

func (x *FriendConfirmMessage) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *FriendConfirmMessage) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *FriendConfirmMessage) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FriendConfirmMessage) GetFUid() string {
	if x != nil {
		return x.FUid
	}
	return ""
}

func (x *FriendConfirmMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FriendConfirmMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//好友打招呼消息
type FriendSayMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UId     string `protobuf:"bytes,1,opt,name=u_id,json=uId,proto3" json:"u_id,omitempty"`       //用户ID
	UIcon   string `protobuf:"bytes,2,opt,name=u_icon,json=uIcon,proto3" json:"u_icon,omitempty"` //用户头像
	UNick   string `protobuf:"bytes,3,opt,name=u_nick,json=uNick,proto3" json:"u_nick,omitempty"` //用户昵称
	FId     string `protobuf:"bytes,4,opt,name=f_id,json=fId,proto3" json:"f_id,omitempty"`       //好友用户ID
	FIcon   string `protobuf:"bytes,5,opt,name=f_icon,json=fIcon,proto3" json:"f_icon,omitempty"` //好友用户头像
	FNick   string `protobuf:"bytes,6,opt,name=f_nick,json=fNick,proto3" json:"f_nick,omitempty"` //好友用户昵称
	Content string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`          //打招呼内容
}

func (x *FriendSayMessage) Reset() {
	*x = FriendSayMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendSayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendSayMessage) ProtoMessage() {}

func (x *FriendSayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendSayMessage.ProtoReflect.Descriptor instead.
func (*FriendSayMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{47}
}

func (x *FriendSayMessage) GetUId() string {
	if x != nil {
		return x.UId
	}
	return ""
}

func (x *FriendSayMessage) GetUIcon() string {
	if x != nil {
		return x.UIcon
	}
	return ""
}

func (x *FriendSayMessage) GetUNick() string {
	if x != nil {
		return x.UNick
	}
	return ""
}

func (x *FriendSayMessage) GetFId() string {
	if x != nil {
		return x.FId
	}
	return ""
}

func (x *FriendSayMessage) GetFIcon() string {
	if x != nil {
		return x.FIcon
	}
	return ""
}

func (x *FriendSayMessage) GetFNick() string {
	if x != nil {
		return x.FNick
	}
	return ""
}

func (x *FriendSayMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

//好友删除
type FriendDelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`               //发起删除好友的用户ID
	FUid   string `protobuf:"bytes,2,opt,name=f_uid,json=fUid,proto3" json:"f_uid,omitempty"` //删除的好友用户ID
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`         //删除好友理由
}

func (x *FriendDelMessage) Reset() {
	*x = FriendDelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendDelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendDelMessage) ProtoMessage() {}

func (x *FriendDelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendDelMessage.ProtoReflect.Descriptor instead.
func (*FriendDelMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{48}
}

func (x *FriendDelMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FriendDelMessage) GetFUid() string {
	if x != nil {
		return x.FUid
	}
	return ""
}

func (x *FriendDelMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//好友不存在
type FriendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FUid   string `protobuf:"bytes,1,opt,name=f_uid,json=fUid,proto3" json:"f_uid,omitempty"` //好友用户ID
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`         //扩展字段
}

func (x *FriendMessage) Reset() {
	*x = FriendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendMessage) ProtoMessage() {}

func (x *FriendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendMessage.ProtoReflect.Descriptor instead.
func (*FriendMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{49}
}

func (x *FriendMessage) GetFUid() string {
	if x != nil {
		return x.FUid
	}
	return ""
}

func (x *FriendMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

//系统类消息
//公告消息
type NoticeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notice string `protobuf:"bytes,1,opt,name=notice,proto3" json:"notice,omitempty"` //公告内容
}

func (x *NoticeMessage) Reset() {
	*x = NoticeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeMessage) ProtoMessage() {}

func (x *NoticeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeMessage.ProtoReflect.Descriptor instead.
func (*NoticeMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{50}
}

func (x *NoticeMessage) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

//强制下线消息
type UserForcedOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`    //用户ID
	Type int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` //下线类型 1:账号异地登录,2:该账号被锁定,3:Token已过期,4:密码修改,5:APP要求下线
}

func (x *UserForcedOffline) Reset() {
	*x = UserForcedOffline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserForcedOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserForcedOffline) ProtoMessage() {}

func (x *UserForcedOffline) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserForcedOffline.ProtoReflect.Descriptor instead.
func (*UserForcedOffline) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{51}
}

func (x *UserForcedOffline) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserForcedOffline) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

//注册欢迎语
type RegisterWelcomeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"` //注册欢迎语内容
}

func (x *RegisterWelcomeMessage) Reset() {
	*x = RegisterWelcomeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterWelcomeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWelcomeMessage) ProtoMessage() {}

func (x *RegisterWelcomeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWelcomeMessage.ProtoReflect.Descriptor instead.
func (*RegisterWelcomeMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{52}
}

func (x *RegisterWelcomeMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

//用户PC端上线下线
type UserPcLineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`        //用户ID
	Status int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"` //用户上线或下线（1：上线 2：下线）
	Ext    string `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`        //扩展字段
}

func (x *UserPcLineStatus) Reset() {
	*x = UserPcLineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPcLineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPcLineStatus) ProtoMessage() {}

func (x *UserPcLineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPcLineStatus.ProtoReflect.Descriptor instead.
func (*UserPcLineStatus) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{53}
}

func (x *UserPcLineStatus) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserPcLineStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserPcLineStatus) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//好友在线状态消息
type FriendLineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendId string `protobuf:"bytes,1,opt,name=friendId,proto3" json:"friendId,omitempty"` //好友ID
	UserId   string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`     //用户ID
	Status   int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`    //好友在线状态（1：在线 2：离线）
	Source   string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`     //好友上线下线设备
	Ext      string `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`           //扩展字段
}

func (x *FriendLineStatus) Reset() {
	*x = FriendLineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendLineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendLineStatus) ProtoMessage() {}

func (x *FriendLineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendLineStatus.ProtoReflect.Descriptor instead.
func (*FriendLineStatus) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{54}
}

func (x *FriendLineStatus) GetFriendId() string {
	if x != nil {
		return x.FriendId
	}
	return ""
}

func (x *FriendLineStatus) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FriendLineStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FriendLineStatus) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *FriendLineStatus) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

//同步消息体
type SynchroMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content     string      `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                                                 //更新的内容数据（头像、昵称、签名、好友备注、群内昵称）
	Status      bool        `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                                                  //状态(true:开,false:关)
	CType       ChatType    `protobuf:"varint,3,opt,name=c_type,json=cType,proto3,enum=pb.ChatType" json:"c_type,omitempty"`                      //会话类型(0:单聊,1:群聊)
	SessionId   string      `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                            //会话ID（好友ID、群聊ID）
	Sex         SexType     `protobuf:"varint,5,opt,name=sex,proto3,enum=pb.SexType" json:"sex,omitempty"`                                        //性别
	SynchroType SynchroType `protobuf:"varint,6,opt,name=synchro_type,json=synchroType,proto3,enum=pb.SynchroType" json:"synchro_type,omitempty"` //同步类型
	Ext         string      `protobuf:"bytes,7,opt,name=ext,proto3" json:"ext,omitempty"`                                                         //扩展字段
	ContentExt  string      `protobuf:"bytes,8,opt,name=content_ext,json=contentExt,proto3" json:"content_ext,omitempty"`                         //内容扩展字段（好友描述）
}

func (x *SynchroMessage) Reset() {
	*x = SynchroMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchroMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchroMessage) ProtoMessage() {}

func (x *SynchroMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchroMessage.ProtoReflect.Descriptor instead.
func (*SynchroMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{55}
}

func (x *SynchroMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SynchroMessage) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *SynchroMessage) GetCType() ChatType {
	if x != nil {
		return x.CType
	}
	return ChatType_SingleChat
}

func (x *SynchroMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SynchroMessage) GetSex() SexType {
	if x != nil {
		return x.Sex
	}
	return SexType_Secrecy
}

func (x *SynchroMessage) GetSynchroType() SynchroType {
	if x != nil {
		return x.SynchroType
	}
	return SynchroType_UserHeaderType
}

func (x *SynchroMessage) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *SynchroMessage) GetContentExt() string {
	if x != nil {
		return x.ContentExt
	}
	return ""
}

//用户基本信息
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UId     string `protobuf:"bytes,1,opt,name=u_id,json=uId,proto3" json:"u_id,omitempty"`             //用户ID
	UNick   string `protobuf:"bytes,2,opt,name=u_nick,json=uNick,proto3" json:"u_nick,omitempty"`       //用户昵称
	UHeader string `protobuf:"bytes,3,opt,name=u_header,json=uHeader,proto3" json:"u_header,omitempty"` //用户头像
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{56}
}

func (x *UserInfo) GetUId() string {
	if x != nil {
		return x.UId
	}
	return ""
}

func (x *UserInfo) GetUNick() string {
	if x != nil {
		return x.UNick
	}
	return ""
}

func (x *UserInfo) GetUHeader() string {
	if x != nil {
		return x.UHeader
	}
	return ""
}

//群组基本信息
type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime     int64  `protobuf:"varint,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //创建时间
	GId            string `protobuf:"bytes,2,opt,name=g_id,json=gId,proto3" json:"g_id,omitempty"`                                     //群id
	GStatus        int32  `protobuf:"varint,3,opt,name=g_status,json=gStatus,proto3" json:"g_status,omitempty"`                        //群状态-1已删除，0封禁，1正常
	MaxMemberCount int32  `protobuf:"varint,4,opt,name=max_member_count,json=maxMemberCount,proto3" json:"max_member_count,omitempty"` //群组最大人数
	MsgNoPromt     int32  `protobuf:"varint,5,opt,name=msg_no_promt,json=msgNoPromt,proto3" json:"msg_no_promt,omitempty"`             //消息免打扰0:否1：是'
	MsgTop         int32  `protobuf:"varint,6,opt,name=msg_top,json=msgTop,proto3" json:"msg_top,omitempty"`                           //消息是否置顶0：否1:是'
	IsGroupChat    int32  `protobuf:"varint,7,opt,name=is_group_chat,json=isGroupChat,proto3" json:"is_group_chat,omitempty"`          //全群是否禁言0：否1：是
	IsNeedVerify   int32  `protobuf:"varint,8,opt,name=is_need_verify,json=isNeedVerify,proto3" json:"is_need_verify,omitempty"`       //加群是否需要确认0：否1：是
	IsPrivateChat  int32  `protobuf:"varint,9,opt,name=is_private_chat,json=isPrivateChat,proto3" json:"is_private_chat,omitempty"`    //全群是否禁止私聊0：否1：是
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_im_message_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_im_message_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_im_message_proto_rawDescGZIP(), []int{57}
}

func (x *GroupInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GroupInfo) GetGId() string {
	if x != nil {
		return x.GId
	}
	return ""
}

func (x *GroupInfo) GetGStatus() int32 {
	if x != nil {
		return x.GStatus
	}
	return 0
}

func (x *GroupInfo) GetMaxMemberCount() int32 {
	if x != nil {
		return x.MaxMemberCount
	}
	return 0
}

func (x *GroupInfo) GetMsgNoPromt() int32 {
	if x != nil {
		return x.MsgNoPromt
	}
	return 0
}

func (x *GroupInfo) GetMsgTop() int32 {
	if x != nil {
		return x.MsgTop
	}
	return 0
}

func (x *GroupInfo) GetIsGroupChat() int32 {
	if x != nil {
		return x.IsGroupChat
	}
	return 0
}

func (x *GroupInfo) GetIsNeedVerify() int32 {
	if x != nil {
		return x.IsNeedVerify
	}
	return 0
}

func (x *GroupInfo) GetIsPrivateChat() int32 {
	if x != nil {
		return x.IsPrivateChat
	}
	return 0
}

var File_protobuf_im_message_proto protoreflect.FileDescriptor

var file_protobuf_im_message_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22,
	0xa9, 0x05, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x43, 0x4b, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x4c, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x41, 0x43, 0x4b, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x41, 0x43, 0x4b, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x41, 0x43, 0x4b, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3d, 0x0a,
	0x0f, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x4d, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x46, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x4d,
	0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x43, 0x4b, 0x48, 0x00,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x3d, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x4d, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x3d, 0x0a, 0x0f, 0x70, 0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x4d, 0x50, 0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x70, 0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x46, 0x0a, 0x12, 0x6f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x4d, 0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x42,
	0x0a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x11,
	0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x0d, 0x69, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x4d,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x69, 0x4d, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x6f,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x74,
	0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x5d, 0x0a, 0x09, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22,
	0x5a, 0x0a, 0x10, 0x49, 0x4d, 0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3f, 0x0a, 0x0d, 0x49,
	0x4d, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0d,
	0x49, 0x4d, 0x50, 0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6d, 0x0a,
	0x0d, 0x49, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x10, 0x49, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x43,
	0x4b, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x86, 0x01,
	0x0a, 0x10, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x43, 0x4b, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x63, 0x6b,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x6b, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x73, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcf, 0x08, 0x0a, 0x0d, 0x49, 0x4d, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0c,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0a,
	0x67, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x45, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x63,
	0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x6b, 0x55, 0x72, 0x6c,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x0e,
	0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x44, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b,
	0x44, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x68, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x63, 0x6b, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x3d, 0x0a, 0x0f, 0x48, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x73,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x4f, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x77, 0x0a, 0x0f, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78,
	0x74, 0x22, 0x39, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x74, 0x0a, 0x0c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x78, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x13, 0x0a, 0x05, 0x63, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x49, 0x6d, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x57, 0x69, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x47, 0x45, 0x4f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x13, 0x0a, 0x05, 0x63, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x49, 0x6d, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x57, 0x69, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x4c, 0x0a, 0x0c, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x47, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22,
	0x45, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x58, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x6b, 0x55,
	0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x22, 0x3c, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x5c,
	0x0a, 0x09, 0x41, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x32, 0x0a, 0x06,
	0x41, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x0a, 0x04, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x4e, 0x69, 0x63, 0x6b,
	0x22, 0xfc, 0x12, 0x0a, 0x0f, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x08, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x57, 0x0a, 0x17, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x17, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x6b, 0x69, 0x63,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x69, 0x63,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a,
	0x0f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48,
	0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a,
	0x19, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x19,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x19, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x70, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x69, 0x70, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x70, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x53, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53,
	0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x53, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x3c, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x68, 0x72, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a,
	0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x65,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x63, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x42, 0x0a, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0xc9, 0x01, 0x0a, 0x12, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x41, 0x43, 0x4b, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x73,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x18,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b,
	0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x4e, 0x69, 0x63, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0f,
	0x53, 0x6e, 0x61, 0x70, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x11, 0x0a, 0x04, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x11, 0x0a, 0x04, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x66, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x4e,
	0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x06, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78,
	0x74, 0x22, 0xd2, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x6f, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x69, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x22, 0x30, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x10, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x7c, 0x0a, 0x13, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x98, 0x01, 0x0a, 0x17, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69,
	0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x0f, 0x4f,
	0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa6,
	0x01, 0x0a, 0x10, 0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x66, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x12, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x10, 0x4e, 0x61,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbb, 0x01,
	0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x19,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12,
	0x2b, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x9f, 0x02,
	0x0a, 0x19, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63,
	0x6b, 0x12, 0x2b, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x55, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4e, 0x69,
	0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x27, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x70, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x66,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x55, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb4, 0x02, 0x0a, 0x14, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x68, 0x61, 0x74, 0x73, 0x55, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x68, 0x61, 0x74, 0x73, 0x55, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x66, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x55, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x61, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x75, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x75, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x11, 0x0a, 0x04, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x51, 0x0a, 0x10, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x10,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x32,
	0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x74, 0x22, 0x4f, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x11, 0x0a, 0x04, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xb1, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x4e, 0x6f, 0x50, 0x72, 0x6f, 0x6d, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x2a, 0xe9, 0x01, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x49, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x43, 0x4b, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4d, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x41, 0x43, 0x4b, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x50, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x4d, 0x50, 0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4d, 0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x2a, 0x37, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x10, 0x02, 0x2a,
	0xb9, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x6b, 0x55, 0x72, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0d, 0x2a, 0x9a, 0x08, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x66, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x67, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x68, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x75, 0x6c, 0x6c, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x69, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xc8, 0x01, 0x12,
	0x1c, 0x0a, 0x17, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xc9, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xca, 0x01, 0x12,
	0x18, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xcb, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4b, 0x69, 0x63,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xcc, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xcd, 0x01, 0x12, 0x1d,
	0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xce, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x45, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xcf, 0x01, 0x12, 0x1b, 0x0a, 0x16,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xd0, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x4c, 0x6f, 0x63,
	0x6b, 0x41, 0x6e, 0x64, 0x4e, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xd1, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4e, 0x61, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xd2, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xd3, 0x01,
	0x12, 0x1b, 0x0a, 0x16, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xd4, 0x01, 0x12, 0x1f, 0x0a,
	0x1a, 0x4a, 0x6f, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xd5, 0x01, 0x12, 0x22,
	0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10,
	0xd6, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xd7, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0xd8, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4e, 0x75, 0x6c, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xd9, 0x01,
	0x12, 0x1b, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xda, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xdb, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x6e, 0x61, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xdc, 0x01,
	0x12, 0x21, 0x0a, 0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0xdd, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xde, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10,
	0xf4, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x50, 0x63, 0x4c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf5, 0x03, 0x12, 0x19, 0x0a,
	0x14, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf6, 0x03, 0x2a, 0x92, 0x03, 0x0a, 0x0b, 0x53, 0x79, 0x6e,
	0x63, 0x68, 0x72, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x54, 0x6f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x65, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x11, 0x2a, 0x2a, 0x0a,
	0x07, 0x53, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x63, 0x79, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x57, 0x6f, 0x6d, 0x65, 0x6e, 0x10, 0x02, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_im_message_proto_rawDescOnce sync.Once
	file_protobuf_im_message_proto_rawDescData = file_protobuf_im_message_proto_rawDesc
)

func file_protobuf_im_message_proto_rawDescGZIP() []byte {
	file_protobuf_im_message_proto_rawDescOnce.Do(func() {
		file_protobuf_im_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_im_message_proto_rawDescData)
	})
	return file_protobuf_im_message_proto_rawDescData
}

var file_protobuf_im_message_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_protobuf_im_message_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_protobuf_im_message_proto_goTypes = []interface{}{
	(DataType)(0),                      // 0: pb.DataType
	(ChatType)(0),                      // 1: pb.ChatType
	(MessageType)(0),                   // 2: pb.MessageType
	(ServerMsgType)(0),                 // 3: pb.ServerMsgType
	(SynchroType)(0),                   // 4: pb.SynchroType
	(SexType)(0),                       // 5: pb.SexType
	(ServerChatMessage_MessageType)(0), // 6: pb.ServerChatMessage.MessageType
	(*IMMessage)(nil),                  // 7: pb.IMMessage
	(*IMChatMessageList)(nil),          // 8: pb.IMChatMessageList
	(*ToMessage)(nil),                  // 9: pb.ToMessage
	(*IMOffLineMessage)(nil),           // 10: pb.IMOffLineMessage
	(*IMPingMessage)(nil),              // 11: pb.IMPingMessage
	(*IMPongMessage)(nil),              // 12: pb.IMPongMessage
	(*IMAuthMessage)(nil),              // 13: pb.IMAuthMessage
	(*IMAuthMessageACK)(nil),           // 14: pb.IMAuthMessageACK
	(*IMChatMessageACK)(nil),           // 15: pb.IMChatMessageACK
	(*IMChatMessage)(nil),              // 16: pb.IMChatMessage
	(*HaveReadMessage)(nil),            // 17: pb.HaveReadMessage
	(*CustomMessage)(nil),              // 18: pb.CustomMessage
	(*StickersMessage)(nil),            // 19: pb.StickersMessage
	(*TextMessage)(nil),                // 20: pb.TextMessage
	(*ImageMessage)(nil),               // 21: pb.ImageMessage
	(*VideoMessage)(nil),               // 22: pb.VideoMessage
	(*GEOMessage)(nil),                 // 23: pb.GEOMessage
	(*VoiceMessage)(nil),               // 24: pb.VoiceMessage
	(*FileMessage)(nil),                // 25: pb.FileMessage
	(*CardMessage)(nil),                // 26: pb.CardMessage
	(*SharkUrl)(nil),                   // 27: pb.SharkUrl
	(*BackDelMessage)(nil),             // 28: pb.BackDelMessage
	(*AtMessage)(nil),                  // 29: pb.AtMessage
	(*AtInfo)(nil),                     // 30: pb.AtInfo
	(*IMServerMessage)(nil),            // 31: pb.IMServerMessage
	(*IMChatMessageToACK)(nil),         // 32: pb.IMChatMessageToACK
	(*GroupSingleForbidMessage)(nil),   // 33: pb.GroupSingleForbidMessage
	(*SnapchatMessage)(nil),            // 34: pb.SnapchatMessage
	(*DelMsgMessage)(nil),              // 35: pb.DelMsgMessage
	(*ServerChatMessage)(nil),          // 36: pb.ServerChatMessage
	(*CreateGroupMessage)(nil),         // 37: pb.CreateGroupMessage
	(*JoinReqGroupMessage)(nil),        // 38: pb.JoinReqGroupMessage
	(*JoinConfirmGroupMessage)(nil),    // 39: pb.JoinConfirmGroupMessage
	(*OutGroupMessage)(nil),            // 40: pb.OutGroupMessage
	(*KickGroupMessage)(nil),           // 41: pb.KickGroupMessage
	(*DelGroupMessage)(nil),            // 42: pb.DelGroupMessage
	(*TransferOwnerMessage)(nil),       // 43: pb.TransferOwnerMessage
	(*GroupStatusMessage)(nil),         // 44: pb.GroupStatusMessage
	(*NoticeGroupMessage)(nil),         // 45: pb.NoticeGroupMessage
	(*NameGroupMessage)(nil),           // 46: pb.NameGroupMessage
	(*AdminGroupMessage)(nil),          // 47: pb.AdminGroupMessage
	(*InviteJoinRepGroupMessage)(nil),  // 48: pb.InviteJoinRepGroupMessage
	(*InviteConfirmGroupMessage)(nil),  // 49: pb.InviteConfirmGroupMessage
	(*GroupTipChatMessage)(nil),        // 50: pb.GroupTipChatMessage
	(*DelGroupNotice)(nil),             // 51: pb.DelGroupNotice
	(*FriendInviteMessage)(nil),        // 52: pb.FriendInviteMessage
	(*FriendConfirmMessage)(nil),       // 53: pb.FriendConfirmMessage
	(*FriendSayMessage)(nil),           // 54: pb.FriendSayMessage
	(*FriendDelMessage)(nil),           // 55: pb.FriendDelMessage
	(*FriendMessage)(nil),              // 56: pb.FriendMessage
	(*NoticeMessage)(nil),              // 57: pb.NoticeMessage
	(*UserForcedOffline)(nil),          // 58: pb.UserForcedOffline
	(*RegisterWelcomeMessage)(nil),     // 59: pb.RegisterWelcomeMessage
	(*UserPcLineStatus)(nil),           // 60: pb.UserPcLineStatus
	(*FriendLineStatus)(nil),           // 61: pb.FriendLineStatus
	(*SynchroMessage)(nil),             // 62: pb.SynchroMessage
	(*UserInfo)(nil),                   // 63: pb.UserInfo
	(*GroupInfo)(nil),                  // 64: pb.GroupInfo
}
var file_protobuf_im_message_proto_depIdxs = []int32{
	0,  // 0: pb.IMMessage.data_type:type_name -> pb.DataType
	16, // 1: pb.IMMessage.chatMessageBody:type_name -> pb.IMChatMessage
	15, // 2: pb.IMMessage.chatMessageAckBody:type_name -> pb.IMChatMessageACK
	32, // 3: pb.IMMessage.chatMessageToACKBody:type_name -> pb.IMChatMessageToACK
	13, // 4: pb.IMMessage.authMessageBody:type_name -> pb.IMAuthMessage
	14, // 5: pb.IMMessage.authMessageAckBody:type_name -> pb.IMAuthMessageACK
	11, // 6: pb.IMMessage.pingMessageBody:type_name -> pb.IMPingMessage
	12, // 7: pb.IMMessage.pongMessageBody:type_name -> pb.IMPongMessage
	10, // 8: pb.IMMessage.offLineMessageBody:type_name -> pb.IMOffLineMessage
	31, // 9: pb.IMMessage.serverMessageBody:type_name -> pb.IMServerMessage
	16, // 10: pb.IMChatMessageList.iMChatMessage:type_name -> pb.IMChatMessage
	9,  // 11: pb.IMChatMessageList.to_message:type_name -> pb.ToMessage
	1,  // 12: pb.ToMessage.chat_type:type_name -> pb.ChatType
	1,  // 13: pb.IMChatMessageACK.c_type:type_name -> pb.ChatType
	20, // 14: pb.IMChatMessage.textMessage:type_name -> pb.TextMessage
	21, // 15: pb.IMChatMessage.imageMessage:type_name -> pb.ImageMessage
	22, // 16: pb.IMChatMessage.videoMessage:type_name -> pb.VideoMessage
	23, // 17: pb.IMChatMessage.geoMessage:type_name -> pb.GEOMessage
	24, // 18: pb.IMChatMessage.voiceMessage:type_name -> pb.VoiceMessage
	25, // 19: pb.IMChatMessage.fileMessage:type_name -> pb.FileMessage
	26, // 20: pb.IMChatMessage.cardMessage:type_name -> pb.CardMessage
	27, // 21: pb.IMChatMessage.sharkUrl:type_name -> pb.SharkUrl
	28, // 22: pb.IMChatMessage.backDelMessage:type_name -> pb.BackDelMessage
	29, // 23: pb.IMChatMessage.atMessage:type_name -> pb.AtMessage
	18, // 24: pb.IMChatMessage.customMessage:type_name -> pb.CustomMessage
	19, // 25: pb.IMChatMessage.stickersMessage:type_name -> pb.StickersMessage
	17, // 26: pb.IMChatMessage.haveReadMessage:type_name -> pb.HaveReadMessage
	1,  // 27: pb.IMChatMessage.c_type:type_name -> pb.ChatType
	2,  // 28: pb.IMChatMessage.m_type:type_name -> pb.MessageType
	30, // 29: pb.AtMessage.at_info:type_name -> pb.AtInfo
	3,  // 30: pb.IMServerMessage.s_msg_type:type_name -> pb.ServerMsgType
	37, // 31: pb.IMServerMessage.createGroupMessage:type_name -> pb.CreateGroupMessage
	38, // 32: pb.IMServerMessage.joinReqGroupMessage:type_name -> pb.JoinReqGroupMessage
	39, // 33: pb.IMServerMessage.joinConfirmGroupMessage:type_name -> pb.JoinConfirmGroupMessage
	40, // 34: pb.IMServerMessage.outGroupMessage:type_name -> pb.OutGroupMessage
	41, // 35: pb.IMServerMessage.kickGroupMessage:type_name -> pb.KickGroupMessage
	42, // 36: pb.IMServerMessage.delGroupMessage:type_name -> pb.DelGroupMessage
	43, // 37: pb.IMServerMessage.transferOwnerMessage:type_name -> pb.TransferOwnerMessage
	44, // 38: pb.IMServerMessage.groupStatusMessage:type_name -> pb.GroupStatusMessage
	45, // 39: pb.IMServerMessage.noticeGroupMessage:type_name -> pb.NoticeGroupMessage
	46, // 40: pb.IMServerMessage.nameGroupMessage:type_name -> pb.NameGroupMessage
	47, // 41: pb.IMServerMessage.adminGroupMessage:type_name -> pb.AdminGroupMessage
	48, // 42: pb.IMServerMessage.inviteJoinRepGroupMessage:type_name -> pb.InviteJoinRepGroupMessage
	49, // 43: pb.IMServerMessage.inviteConfirmGroupMessage:type_name -> pb.InviteConfirmGroupMessage
	50, // 44: pb.IMServerMessage.groupTipChatMessage:type_name -> pb.GroupTipChatMessage
	52, // 45: pb.IMServerMessage.friendInviteMessage:type_name -> pb.FriendInviteMessage
	53, // 46: pb.IMServerMessage.friendConfirmMessage:type_name -> pb.FriendConfirmMessage
	55, // 47: pb.IMServerMessage.friendDelMessage:type_name -> pb.FriendDelMessage
	54, // 48: pb.IMServerMessage.friendSayMessage:type_name -> pb.FriendSayMessage
	57, // 49: pb.IMServerMessage.noticeMessage:type_name -> pb.NoticeMessage
	58, // 50: pb.IMServerMessage.userForcedOffline:type_name -> pb.UserForcedOffline
	62, // 51: pb.IMServerMessage.synchroMessage:type_name -> pb.SynchroMessage
	59, // 52: pb.IMServerMessage.registerWelcomeMessage:type_name -> pb.RegisterWelcomeMessage
	36, // 53: pb.IMServerMessage.serverChatMessage:type_name -> pb.ServerChatMessage
	51, // 54: pb.IMServerMessage.delGroupNotice:type_name -> pb.DelGroupNotice
	60, // 55: pb.IMServerMessage.userPcLineStatus:type_name -> pb.UserPcLineStatus
	35, // 56: pb.IMServerMessage.delMsgMessage:type_name -> pb.DelMsgMessage
	34, // 57: pb.IMServerMessage.snapchatMessage:type_name -> pb.SnapchatMessage
	33, // 58: pb.IMServerMessage.groupSingleForbidMessage:type_name -> pb.GroupSingleForbidMessage
	56, // 59: pb.IMServerMessage.friendMessage:type_name -> pb.FriendMessage
	61, // 60: pb.IMServerMessage.friendLineStatus:type_name -> pb.FriendLineStatus
	1,  // 61: pb.IMChatMessageToACK.c_type:type_name -> pb.ChatType
	1,  // 62: pb.DelMsgMessage.c_type:type_name -> pb.ChatType
	1,  // 63: pb.ServerChatMessage.c_type:type_name -> pb.ChatType
	6,  // 64: pb.ServerChatMessage.m_Type:type_name -> pb.ServerChatMessage.MessageType
	63, // 65: pb.CreateGroupMessage.invite_uid:type_name -> pb.UserInfo
	64, // 66: pb.CreateGroupMessage.group_info:type_name -> pb.GroupInfo
	63, // 67: pb.InviteJoinRepGroupMessage.invite_uid:type_name -> pb.UserInfo
	63, // 68: pb.InviteConfirmGroupMessage.invite_uid:type_name -> pb.UserInfo
	1,  // 69: pb.SynchroMessage.c_type:type_name -> pb.ChatType
	5,  // 70: pb.SynchroMessage.sex:type_name -> pb.SexType
	4,  // 71: pb.SynchroMessage.synchro_type:type_name -> pb.SynchroType
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_protobuf_im_message_proto_init() }
func file_protobuf_im_message_proto_init() {
	if File_protobuf_im_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_im_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMChatMessageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMOffLineMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMPingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMPongMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMAuthMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMAuthMessageACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMChatMessageACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HaveReadMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StickersMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GEOMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharkUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackDelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMChatMessageToACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSingleForbidMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapchatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelMsgMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinReqGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinConfirmGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOwnerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupStatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteJoinRepGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteConfirmGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTipChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelGroupNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendInviteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendConfirmMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendSayMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendDelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserForcedOffline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterWelcomeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPcLineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendLineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynchroMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_im_message_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protobuf_im_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*IMMessage_ChatMessageBody)(nil),
		(*IMMessage_ChatMessageAckBody)(nil),
		(*IMMessage_ChatMessageToACKBody)(nil),
		(*IMMessage_AuthMessageBody)(nil),
		(*IMMessage_AuthMessageAckBody)(nil),
		(*IMMessage_PingMessageBody)(nil),
		(*IMMessage_PongMessageBody)(nil),
		(*IMMessage_OffLineMessageBody)(nil),
		(*IMMessage_ServerMessageBody)(nil),
	}
	file_protobuf_im_message_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*IMChatMessage_TextMessage)(nil),
		(*IMChatMessage_ImageMessage)(nil),
		(*IMChatMessage_VideoMessage)(nil),
		(*IMChatMessage_GeoMessage)(nil),
		(*IMChatMessage_VoiceMessage)(nil),
		(*IMChatMessage_FileMessage)(nil),
		(*IMChatMessage_CardMessage)(nil),
		(*IMChatMessage_SharkUrl)(nil),
		(*IMChatMessage_BackDelMessage)(nil),
		(*IMChatMessage_AtMessage)(nil),
		(*IMChatMessage_CustomMessage)(nil),
		(*IMChatMessage_StickersMessage)(nil),
		(*IMChatMessage_HaveReadMessage)(nil),
	}
	file_protobuf_im_message_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*IMServerMessage_CreateGroupMessage)(nil),
		(*IMServerMessage_JoinReqGroupMessage)(nil),
		(*IMServerMessage_JoinConfirmGroupMessage)(nil),
		(*IMServerMessage_OutGroupMessage)(nil),
		(*IMServerMessage_KickGroupMessage)(nil),
		(*IMServerMessage_DelGroupMessage)(nil),
		(*IMServerMessage_TransferOwnerMessage)(nil),
		(*IMServerMessage_GroupStatusMessage)(nil),
		(*IMServerMessage_NoticeGroupMessage)(nil),
		(*IMServerMessage_NameGroupMessage)(nil),
		(*IMServerMessage_AdminGroupMessage)(nil),
		(*IMServerMessage_InviteJoinRepGroupMessage)(nil),
		(*IMServerMessage_InviteConfirmGroupMessage)(nil),
		(*IMServerMessage_GroupTipChatMessage)(nil),
		(*IMServerMessage_FriendInviteMessage)(nil),
		(*IMServerMessage_FriendConfirmMessage)(nil),
		(*IMServerMessage_FriendDelMessage)(nil),
		(*IMServerMessage_FriendSayMessage)(nil),
		(*IMServerMessage_NoticeMessage)(nil),
		(*IMServerMessage_UserForcedOffline)(nil),
		(*IMServerMessage_SynchroMessage)(nil),
		(*IMServerMessage_RegisterWelcomeMessage)(nil),
		(*IMServerMessage_ServerChatMessage)(nil),
		(*IMServerMessage_DelGroupNotice)(nil),
		(*IMServerMessage_UserPcLineStatus)(nil),
		(*IMServerMessage_DelMsgMessage)(nil),
		(*IMServerMessage_SnapchatMessage)(nil),
		(*IMServerMessage_GroupSingleForbidMessage)(nil),
		(*IMServerMessage_FriendMessage)(nil),
		(*IMServerMessage_FriendLineStatus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_im_message_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_im_message_proto_goTypes,
		DependencyIndexes: file_protobuf_im_message_proto_depIdxs,
		EnumInfos:         file_protobuf_im_message_proto_enumTypes,
		MessageInfos:      file_protobuf_im_message_proto_msgTypes,
	}.Build()
	File_protobuf_im_message_proto = out.File
	file_protobuf_im_message_proto_rawDesc = nil
	file_protobuf_im_message_proto_goTypes = nil
	file_protobuf_im_message_proto_depIdxs = nil
}
